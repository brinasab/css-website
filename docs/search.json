[
  {
    "objectID": "syllabus.html",
    "href": "syllabus.html",
    "title": "Computing for the Social Sciences",
    "section": "",
    "text": "Last updated: October 8, 2025 (minor typos)"
  },
  {
    "objectID": "syllabus.html#course-syllabus-fall-2025",
    "href": "syllabus.html#course-syllabus-fall-2025",
    "title": "Computing for the Social Sciences",
    "section": "",
    "text": "Last updated: October 8, 2025 (minor typos)"
  },
  {
    "objectID": "syllabus.html#course-description",
    "href": "syllabus.html#course-description",
    "title": "Computing for the Social Sciences",
    "section": "Course Description",
    "text": "Course Description\nWelcome to “Computing for the Social Sciences”!\nFor course information (Emails, Office Hours, etc.) see Home.\nThis is an applied course for social scientists with little-to-no programming experience who wish to harness growing digital and computational resources. The focus is on learning the basics of programming in R and generating reproducible research. Topics include coding concepts (e.g., data structures, control structures. etc.), data visualization, data wrangling, web-scraping, version control software, exploratory data analysis, and more. Students will leave the course with basic programming skills for the social sciences and the ability to adapt and expand these skills as they encounter new questions, methods, and data beyond the course.\nRequirements: No prior experience with R is required, though it’s helpful to have completed a course involving a programming language (e.g., Python, Stata, SPSS, or others) in some capacity. If you’re unsure or have had informal exposure to programming, please email the instructor to see if the course is a good fit.\nNote: MACS 30500 is cross-listed with CHDV 30511/ENST 20550/MACS 20500/MAPS 30500/PLSC 30235/PSYC 30510/SOCI 20278/SOCI 40176/SOSC 26032\n\nLearning Objectives\nBy the end of the course, students will be able to:\n\nConstruct and execute basic programs in R using programming techniques and tidyverse packages\nSearch for and use external libraries to enhance R’s base functions\nApply Git and GitHub workflows for version control within RStudio\nCreate and edit R Markdown documents to produce reproducible reports and presentations\nImport data from various sources\nClean and transform raw data\nTransform data into a tidy format\nVisualize and interpret data using descriptive methods\nManipulate strings and dates\nScrape websites to collect data\n\n\n\nMaterials and Content\nThe main textbook for this course is the 2nd edition of R for Data Science by Garrett Grolemund and Hadley Wickham. The book is freely accessible online. All course materials and assignments will be available on the course website. Consulting the textbook and reviewing the in-class material is required.\nSee Course Content and Schedule for details. Schedule and Content might be subject to change, but if changes occur students will be promptly informed.\n\n\nHow to Succeed in this Course\nIntended Audience\nThis course is for UChicago students who want to use R as a tool for analyzing data, typically in the social sciences. It is not a computer science course, but an introduction to programming for research. Many students who have taken it in the past were looking to build skills they could apply to their own research projects. If you have never programmed before, expect a new way of thinking—the course will be challenging but rewarding if you commit for the full quarter.\n\nKeep up with course materials\nEach class has readings and class materials posted on the course website. Review them before class, revisit them after, and especially go back to them before starting assignments. Come prepared with questions you’d like to raise—class time mixes lecture and practice, and questions are welcome. You can ask them in class, during Office Hours, or on Ed Discussion (preferred over email). Staying on top of class materials is key to success.\nAttend class\nRegular attendance is expected. Please inform the instructor in advance if you must miss a class. It is fine to miss 1–2 lectures throughout the quarter, but no more than that, unless this is due to health or other serious issues. Bring a laptop to each class.\nOwn Your Learning Journey\nAdhere to the course-specific AI policies for assignments (see below). At this point, I am confident that state-of-the-art AI can by and large solve most of this course’s assignments. But this course is about learning to code in R, not learning to use AI to code in R. Assignments may feel challenging, but they are carefully designed and tested to be achievable without AI. Start early, meet deadlines, and reach out if you need help along the way.\nTrust\nOur instructor–student relationship is based on trust. If that trust breaks down, our work shifts away from growth and feedback toward surveillance and control, which benefits no one. I ask you to trust that I have your best interests at heart and that I design this class to empower you. In turn, I trust that you are here to learn R with intrinsic motivation and will approach the course’s challenges with persistence and curiosity. I am also open to discussing and modeling how I use R (with and without AI) in my own work, and to explaining the rationale behind this course’s policies. You can also expect transparency in grading from me and the TAs (see Assessment below for details).\n\n\nAssessment\n\nBreakdown and Grading Scheme\nStudent learning in this course will be assessed as follows:\n\n\n\nWhat\nPoints\nGrading Method\n\n\n\n\nAssignment 1\n5\nPass/Fail\n\n\nAssignment 2\n15\nPoints-Based\n\n\nAssignment 3\n15\nPoints-Based\n\n\nAssignment 4\n15\nPoints-Based\n\n\nFinal Project\n20\nPoints-Based\n\n\nIn-Class Short Exam 1\n15\nPoints-Based\n\n\nIn-Class Short Exam 2\n15\nPoints-Based\n\n\nTotal\n100\n\n\n\n\nYour final grade is the cumulative score of all submitted work throughout the course. We use the following grading scheme to determine your final grade: A (95-100), A- (90-94), B+ (87-89), B (83-86), B- (80-82), C+ (77-79), C (73-76), C- (70-72). Grades below 70 are dealt on a case-by-case basis.\n\n\nAssigments: Deadlines and Late Submissions\nAll take-home assignments are due by 11:59 PM (Chicago time) via Canvas (submit a link to your GitHub repo):\n\nGrace period: Each assignment includes a 24-hour grace period with no penalty.\nLate penalty: After the grace period, 1 point is deducted for every 24 hours late. Example: An assignment worth 13 points submitted one day after the grace period ends will receive 12 points.\n\nStudents are expected to submit all take-home assignments in full and on time:\n\nMissed assignments: Assignments not submitted at all will receive a grade of 0%, which will impact your final grade. If you miss a deadline due to exceptional circumstances (e.g., documented illness or emergency), please contact me as soon as possible. Extensions may be granted on a case-by-case basis. Note: starting an assignment late or having a busy week does not qualify as an exceptional circumstance. The built-in grace period is meant to give you flexibility for unexpected issues, but it is not a substitute for starting on time.\nIncomplete assignments: If more than 25% of an assignment is missing, it will not be graded and will be treated as a missed assignment. If less than 25% is missing, the assignment will be graded, with penalties for each incomplete element.\n\n\n\nExams: Attendance and Expectations\nStudents are expected to take in-class exams during scheduled class time.\nExams are closed-book: no notes, textbooks, phones, or other materials are permitted. Only the exam and your computer may be used.\nMake-up exams will be considered only in cases of documented circumstances beyond the student’s control (e.g., serious illness, medical or family emergency). Note: personal travel, work commitments, or undocumented issues do not qualify as valid reasons. All requests for a make-up exam must be submitted as soon as possible and prior to the exam. Approval is at the discretion of the instructor.\n\n\nRubric\nGrades are part of the system here, but a score reflects one assignment, not your overall worth or ability. To keep grading transparent, exams will include multiple-choice and other question formats. Whenever possible, I will share correct answers afterward. Assignments are evaluated using the rubric below so you know what’s expected. If you’d like more feedback—on what’s strong and what could be improved—just ask.\nAssignments are scored as Excellent (roughly A+/A), Very Good (A-), Good (B/B+), Needs Improvement (C), or Not Sufficient (below C) across five categories, weighted as follows:\n\nCoding Strategy (20%):\n\nthe logic of your code (how it solves the problem),\n\ncorrectness (does it work?),\n\nsophistication (depth of solution),\n\nuse of course tools/techniques (e.g., conditionals, functions, tidyverse, etc.),\n\nefficiency (avoiding unnecessary repetition).\n\nPresentation and Explanation (20%):\n\neffectiveness of visualizations, tables, or summaries,\n\nclarity of conceptual choices in presenting data,\n\nyour ability to interpret results,\n\nuse of Markdown syntax.\n\nAchievement (20%):\n\nyour mastery of the required concepts/tools,\n\ncreativity and initiative,\n\nability to go beyond minimum requirements,\n\nnote that Excellent in this category indicates truly outstanding work.\n\nReproducibility (20%):\n\ncompliance with course conventions (repo access, required files submitted),\n\nclear use of Markdown/RMarkdown,\n\nmeaningful and rich history of commit messages,\n\netc.\n\nCoding Style (10%):\n\nadherence to R code conventions,\n\nclarity for others reading your code,\n\nappropriate comments (neither too few nor too many),\n\nlogical organization,\n\nuse of descriptive variable names.\n\nsee Why Coding Style Matters.\n\nResources and AI Narrative (10%): Evaluates\n\nproper citation of all external resources (links, page numbers, etc.),\n\nclear and honest AI narrative (if AI was used), written by you,\n\nreflection on what you learned.\n\n\nTo achieve Excellent in a given category, all requirements described above must be met. For the other categories, it might be that only one, or more than one, elements are missing. For example, you could achieve Very Good on “Coding Style” if you are following all coding conventions, but the code is inconsistent, or overly or under commented.\n\n\n\n\nAcademic Integrity & Use of AI Policies\n\nPlagiarism: UChicago Policy\nEach student in this course is expected to abide by the University of Chicago Code of Academic Integrity. Under the provisions of the Code, anyone who gives or receives unauthorized assistance in the preparation of work at home or during tests in class will be subject to disciplinary action. A student’s name on any piece of work is our assurance that they have neither given nor received any unauthorized help in its preparation.\n\n\nPlagiarism: Course-Specific Policies\n1. Collaboration: Collaboration is permitted, but direct copying of someone’s else code is prohibited. Students in this course may help each other by answering questions, brainstorming approaches, and explaining concepts. We all benefit and learn from that. However, (a) you must acknowledge this in your assignment or work; and (b) each student must write, debug, and submit their own code and copy someone’s else code is prohibited.\n2. Use of External Resources: External resources (e.g., beyond course readings, slides, and code shared in class) are permitted but only after having consulted course materials, and must be cited appropriately. If online, copy and paste the link; if offline (e.g., book, article), reference the page or section; if AI, explain how you used it (but see below on AI-specific policies). You are responsible for reporting the sources you consulted and for being able to explain any code or ideas incorporated from these sources.\n\n3. Use of LLMs and AI: AI tools are powerful and easily accessible, but building a programming foundation is work you must do yourself, even if you plan to use AI after this course. Shortcuts won’t build lasting skills: real learning takes time, effort, and struggle. I think that over-reliance on AI undermines this process.\nFor these reasons, AI use (e.g., ChatGPT, PhoenixAI, Copilot, etc.) in assignments and final projects is strictly limited to the uses outlined below:\n\nFirst try on your own. Do not copy/paste prompts into AI to get preliminary solutions. You may consult AI only after at least ~15 minutes of independent effort and reviewing class materials.\nUse class methods and materials. Your primary solution must use approaches taught in class (slides, book, in-class code). Alternative solutions may be included, and even encouraged, but only as additional work, properly cited, and compared against your primary solution.\nDisclose use. Every assignment must include a statement, written exclusively by you (no AI-editing, etc.), describing how (if at all) you used AI, for which task, how you validated and integrated AI output with course sources, and what you learned in the process.\nNo AI in class. Use of AI during in-class sessions is prohibited unless explicitly authorized by the instructor. At times, we may incorporate AI examples or exercises in class as part of building AI literacy and understanding appropriate use.\n\nAny use of AI outside these conditions is considered an academic integrity violation and will receive zero credit. Examples include: submitting code not introduced in class as your primary solution (even if it works), failing to cite sources, omitting or writing an AI disclosure narrative that does not comply with instructions.\nThe bottom line: You must be the author for all work submitted in your assignments. If you don’t understand what the program is doing and are not prepared to explain it in detail (we might ask), you should not submit it.\n\n\n\nAccessibility and Support\nThe University of Chicago is committed to diversity and rigorous inquiry from multiple perspectives. Services and reasonable accommodations are available to persons with temporary and permanent disabilities, to students with DACA or undocumented status, to students facing mental health or other personal challenges, and to students with other kinds of learning challenges. Please, contact me if there are circumstances affecting your ability to participate in class.\nIf you have, or think you may have a disability, please contact Student Disability Services for a confidential discussion and for requesting accommodation: SDS. Once SDS approves your accommodation, it will be emailed to both you and me. Please, follow up with me to discuss the necessary logistics of your accommodations. If you need immediate accommodation, please speak with me after class or send an email message to me and SDS.\nSome resources that might be of use include: Office of Student Disability Services, UChicago Student Wellness, Center for Identity and Inclusion."
  },
  {
    "objectID": "setup/setup-workbench.html",
    "href": "setup/setup-workbench.html",
    "title": "RStudio Workbench Setup",
    "section": "",
    "text": "If you have not yet, go to https://github.com and follow the instructions there to create a free GitHub account. Choose a professional username (see these tips).\nAdd your GitHub username to the Excel file linked on Lecture 1.\nWe’ll use your username to invite you to our GitHub Course Organization, which is required to access and submit homework assignments. You’ll receive an invitation email from GitHub — make sure to open it and accept the invitation to join the organization."
  },
  {
    "objectID": "setup/setup-workbench.html#step-1-create-a-github-account",
    "href": "setup/setup-workbench.html#step-1-create-a-github-account",
    "title": "RStudio Workbench Setup",
    "section": "",
    "text": "If you have not yet, go to https://github.com and follow the instructions there to create a free GitHub account. Choose a professional username (see these tips).\nAdd your GitHub username to the Excel file linked on Lecture 1.\nWe’ll use your username to invite you to our GitHub Course Organization, which is required to access and submit homework assignments. You’ll receive an invitation email from GitHub — make sure to open it and accept the invitation to join the organization."
  },
  {
    "objectID": "setup/setup-workbench.html#step-2-log-into-rstudio-workbench",
    "href": "setup/setup-workbench.html#step-2-log-into-rstudio-workbench",
    "title": "RStudio Workbench Setup",
    "section": "Step 2: Log into RStudio Workbench",
    "text": "Step 2: Log into RStudio Workbench\nGo to https://macss-r.uchicago.edu/\nLogin with your UChicago CNetID and password to login; this is the same username/password you use for other UChicago online services. You’re done. You should see a clean RStudio window in your browser.\n\n\n\n\n\n\nNote\n\n\n\nOnly students approved by SSCS can access this server. If you can’t log in, chances are that you have not yet been added to the server. Email me at nardin@uchicago.edu. For network or cVPN issues, contact ITS."
  },
  {
    "objectID": "setup/setup-workbench.html#step-3-configure-git-in-rstudio-workbench",
    "href": "setup/setup-workbench.html#step-3-configure-git-in-rstudio-workbench",
    "title": "RStudio Workbench Setup",
    "section": "Step 3: Configure Git in RStudio Workbench",
    "text": "Step 3: Configure Git in RStudio Workbench\nTo make Git work smoothly in this course, you’ll configure settings 3.1 and 3.2 below.\nYou only need to do this once per machine!\nYou can also watch a video walkthrough of the setup process.\n\n3.1 Identify yourself to Git\n\nWhat is this?\nTo track your work and link changes to you, Git needs to know your name and email address. So, you need to tell them to Git. Use the same email you used to your set up your GitHub account (see Lecture 1 “Before class”).\n\n\nWhat you need to do to\nGo to the Console tab in RStudio and run the code below, replacing name and email with your own:\n\nyour name can be your GitHub username or your actual first and last name\nyour email must be the same email you used to sign up for GitHub when you created an account\n\nlibrary(usethis)\nusethis::use_git_config(user.name = \"Your GitHub Username\", user.email = \"your@email.com\")\nTo confirm it worked (e.g., that Git got your credentials), go to Tools &gt; Terminal and run the following command in the shell/terminal tab that opens up:\ngit config --global --list\nIf you see your name and email, you’re all set.\nIf something is off, like a typo in your name or the wrong email (you must use the email linked to your GitHub account): just re-run the R code with the correct information. It will overwrite the previous settings.\n\n\n\n\n3.2 Set Up SSH Authentication\n\nWhat is this?\nNow Git knows your name and email. But to send your work from Git (on your computer – in our case, Workbench) to GitHub (online), you need to prove to GitHub that’s really you — this is called authentication.\nThere are two methods for authentication: either SSH keys or HTTPS with a personal access token. Both options allow Git to connect to GitHub securely, so you can push and pull changes smoothly. Since we are using RStudio Workbench for the class, you will need to use the SSH method to authenticate. The server that hosts our Workbench does not have the ability to cache your personal access token for the HTTPS method.\nSSH, or Secure Shell Protocol, is a secure way to prove your identity when connecting to GitHub. Unlike passwords, which can be vulnerable to brute-force attacks, SSH keys are much harder to crack.\nWhen you generate an SSH key pair, you get two long strings of characters:\n\na public key, which you upload to GitHub\na private key, which stays safely on your computer (or in RStudio Workbench)\n\nWhen you connect to GitHub, Git uses your private key to unlock the connection. If it matches the public key on GitHub, you’re authenticated!\nNote: on GitHub, the URL for SSH looks like git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git Make sure you use this SSH URL to create a project or clone a repository. If you accidentally use the HTTPS version, the operation will not work.\n\n\nWhat you need to do to\nYou need to create and store an SSH key pair, by running the following code in your R Console:\ncredentials::ssh_setup_github()\nOnce you do that, you’ll be guided through a few steps:\n\nIt should say “No SSH key found. Generate one now?” → Select Yes\nA long string of characters will appear in the Console, that’s your public SSH key\nYou will be asked to open a browser → Select Yes\nBefore or after opening a new browser, copy the entire SSH key (including the ssh-rsa at the beginning) from your Console\n\nOnce you are on the GitHub page:\n\nPaste your entire SSH key into the GitHub page that opened in your new browser (you can do this only if you registered a GitHub account, see step 1 above)\nUnder “Title”, give the key an informative name, something like csp-workbench-fall25 or similar\nLeave “Key type” set to Authentication Key\nClick the green “Add SSH key” button\nIf prompted, complete GitHub’s security steps (e.g., enter a verification code or password or anything else asked)\n\nYou should now see your key listed in your GitHub account under the “SSH and GPG keys” page!\nTo confirm it worked, go back R, then to Tools &gt; Terminal and run the following command in the shell/terminal tab that opens up:\nls -l ~/.ssh\nYou should see two lines showing the keys you just created: id_rsa is your private SSH key (do not share with others), your id_rsa.pub is your public SSH key (the one you put on GitHub).\nIf you see more than these two files, it likely means you’ve set up extra SSH keys, which we want to avoid as it might create problems. You want to reset all keys, and start fresh (contact us if you need help with this)."
  },
  {
    "objectID": "setup/setup-workbench.html#whats-next",
    "href": "setup/setup-workbench.html#whats-next",
    "title": "RStudio Workbench Setup",
    "section": "What’s next?",
    "text": "What’s next?\nIf you completed this part successfully, you are ready to test your setup — go to the Git within RStudio Tutorial page and follow the instructions!"
  },
  {
    "objectID": "setup/index.html",
    "href": "setup/index.html",
    "title": "Computing for the Social Sciences",
    "section": "",
    "text": "Sotfware Setup Fall 2025\n\n\n\nThis section of the website guides you through everything you need to set up for the course:\n1. First, Configure your Setup: RStudio Workbench Setup\n2. Second, Test your Setup: Git within RStudio Tutorial\n3. Third, Learn More: What are these Tools?\n\n\n\n\n\n\nNote\n\n\n\nThese instructions are for RStudio Workbench, which is the platform we use in this course. If you have prior programming experience and prefer to install R and RStudio on your own computer, reach out to discuss."
  },
  {
    "objectID": "lectures/drafts/11-slides.html#same-task-with-and-without-a-for-loop",
    "href": "lectures/drafts/11-slides.html#same-task-with-and-without-a-for-loop",
    "title": "Introduction to R: Lecture 11",
    "section": "Same Task: With and Without a For Loop",
    "text": "Same Task: With and Without a For Loop\n\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\n\n\n\nRows: 344\nColumns: 8\n$ species           &lt;fct&gt; Adelie, Adelie, Adelie, Adelie, Adelie, Adelie, Adel…\n$ island            &lt;fct&gt; Torgersen, Torgersen, Torgersen, Torgersen, Torgerse…\n$ bill_length_mm    &lt;dbl&gt; 39.1, 39.5, 40.3, NA, 36.7, 39.3, 38.9, 39.2, 34.1, …\n$ bill_depth_mm     &lt;dbl&gt; 18.7, 17.4, 18.0, NA, 19.3, 20.6, 17.8, 19.6, 18.1, …\n$ flipper_length_mm &lt;int&gt; 181, 186, 195, NA, 193, 190, 181, 195, 193, 190, 186…\n$ body_mass_g       &lt;int&gt; 3750, 3800, 3250, NA, 3450, 3650, 3625, 4675, 3475, …\n$ sex               &lt;fct&gt; male, female, female, NA, female, male, female, male…\n$ year              &lt;int&gt; 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007, 2007…"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#calculate-the-mean-value-of-several-columns-without-a-loop",
    "href": "lectures/drafts/11-slides.html#calculate-the-mean-value-of-several-columns-without-a-loop",
    "title": "Introduction to R: Lecture 11",
    "section": "Calculate the mean value of several columns without a loop",
    "text": "Calculate the mean value of several columns without a loop\nWe can take the mean() function, and apply it to each column:\n\npenguins %&gt;% summarize(avg_bill_length = mean(bill_length_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_bill_depth = mean(bill_depth_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE))\n\n\nThis works — but requires a lot of copy/paste! How can we do the same thing with a for loop?"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#automate-the-same-task-with-a-loop",
    "href": "lectures/drafts/11-slides.html#automate-the-same-task-with-a-loop",
    "title": "Introduction to R: Lecture 11",
    "section": "Automate the same task with a loop",
    "text": "Automate the same task with a loop\nFirst, initialize an empty vector to store results. Second, use a for loop to calculate the mean of each (numeric) column of this penguins dataframe.\n\noutput &lt;- vector(mode = \"double\", length = ncol(penguins))\n\nfor (i in seq_along(penguins)) {\n  #print(i)\n  #print(penguins[i])\n  output[i] &lt;- mean(penguins[[i]], na.rm = TRUE)\n}\n\noutput"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#why-we-even-learn-loops-in-r",
    "href": "lectures/drafts/11-slides.html#why-we-even-learn-loops-in-r",
    "title": "Introduction to R: Lecture 11",
    "section": "Why We Even Learn Loops in R?",
    "text": "Why We Even Learn Loops in R?\nR is a vectorized language, so many tasks can and should be done without writing a for loop.\nStill, understanding loops is important:\n\nto build foundational logic and control flow skills\nfor non-vectorized tasks, like row-by-row operations\nto debug more complex workflows"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#three-main-alternatives-to-for-loops-in-r",
    "href": "lectures/drafts/11-slides.html#three-main-alternatives-to-for-loops-in-r",
    "title": "Introduction to R: Lecture 11",
    "section": "Three Main Alternatives to For Loops in R",
    "text": "Three Main Alternatives to For Loops in R\nWhen working with dataframes, R provides the following alternatives that are often better than writing a for loop:\n\n\n\nFunction Family\nPackage\nBest Used For\nDocs / Link\n\n\n\n\nmap_*()\npurrr\nApplying functions to elements of lists or columns\nmap docs\n\n\nacross()\ndplyr\nApplying the same function to multiple columns inside mutate() or summarize()\nacross docs\n\n\n*apply()\nbase R\nRow/column-wise operations on matrices or data frames\napply docs\n\n\n\nThe asterisk * is a placeholder for a family of related functions (e.g., map_dbl(), map_chr(), sapply(), etc.)"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-map-functions-in-the-tidyverse",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-map-functions-in-the-tidyverse",
    "title": "Introduction to R: Lecture 11",
    "section": "1. Replacing for loops with “map()” functions in the tidyverse",
    "text": "1. Replacing for loops with “map()” functions in the tidyverse\n\nThe so-called “map functions” come from the purr package in R: https://purrr.tidyverse.org/reference/map.html\nThere are several map_*() functions each creates a different type of output (this is the same idea as in the for loop when we specify the mode of our output vector):\n\nmap() makes a list\nmap_lgl() makes a logical vector\nmap_int() makes an integer vector\nmap_dbl() makes a double vector\nmap_chr() makes a character vector\n\nLet’s see a few examples using the penguins data."
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-map-functions-in-the-tidyverse-1",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-map-functions-in-the-tidyverse-1",
    "title": "Introduction to R: Lecture 11",
    "section": "1. Replacing for loops with “map()” functions in the tidyverse",
    "text": "1. Replacing for loops with “map()” functions in the tidyverse\nPick the appropriate map() function (there are several!) and specify at least two main arguments:\n\nwhat you are iterating over\nwhat you are calculating\n\n\npenguins %&gt;% \n  select(where(is.numeric)) %&gt;%\n  map_dbl(mean, na.rm = TRUE)"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse",
    "title": "Introduction to R: Lecture 11",
    "section": "2. Replacing for loops with “across()” in the tidyverse",
    "text": "2. Replacing for loops with “across()” in the tidyverse\nAnother popular option to replace a for loop is the across() function from dplyr\nWhat it does: applies the same operation (e.g., mean) to multiple columns at once\nBest use: since it comes from dplyr, it works seamlessly inside dplyr verbs like mutate() and summarize() (these are its favorite verbs to work with!)"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse-1",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse-1",
    "title": "Introduction to R: Lecture 11",
    "section": "2. Replacing for loops with “across()” in the tidyverse",
    "text": "2. Replacing for loops with “across()” in the tidyverse\nWe looked at this example earlier (which calculates the mean of several columns in a data frame) and rewrote it using a for loop. Now we rewrite it again but this time using across():\n\npenguins %&gt;% summarize(avg_bill_length = mean(bill_length_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_bill_depth = mean(bill_depth_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse-2",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse-2",
    "title": "Introduction to R: Lecture 11",
    "section": "2. Replacing for loops with “across()” in the tidyverse",
    "text": "2. Replacing for loops with “across()” in the tidyverse\nRewrite previous example using across():\n\npenguins %&gt;% \n  summarize(\n    across(\n      .cols = where(is.numeric),           # select columns by type\n      .fns = ~ mean(.x, na.rm = TRUE)))   # apply mean, skipping NA\n\nThe function across() has two main arguments:\n\n.cols: the columns to operate on. You can select them by position, name, or type (in this example, by type using where(is.numeric)).\n.fns: the function, or list of functions, to apply to each column (in this example, we use mean() and .x is a placeholder for the current column being processed)\n\nYou can omit .cols and .fns if you pass the arguments in the correct order."
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse-3",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-across-in-the-tidyverse-3",
    "title": "Introduction to R: Lecture 11",
    "section": "2. Replacing for loops with “across()” in the tidyverse",
    "text": "2. Replacing for loops with “across()” in the tidyverse\nAdd names to the newly computed means:\n\npenguins %&gt;% \n  summarize(\n    across(\n      .cols = where(is.numeric),                   \n      .fns = ~ mean(.x, na.rm = TRUE),             \n      .names = \"avg_{.col}\"                   \n    )\n  )\n\n\n\n\n\n\n\n\nWhat does \"avg_{.col}\" mean?\n\n\n\n\"avg_\" is a literal prefix that will be added to each new column name.\n\n{.col} is a placeholder that will be replaced with the original column name.\n\nSo if you’re applying mean() to a column named bill_length_mm, the result will be named avg_bill_length_mm"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r",
    "title": "Introduction to R: Lecture 11",
    "section": "3. Replacing for loops with “apply()” functions in base R",
    "text": "3. Replacing for loops with “apply()” functions in base R\nFinally, a third option to replace a for loop in R is using one of the apply() functions from base R\nWhat it does: applies the same operation (e.g., mean) to multiple columns at once\nBest use: when working outside tidyverse verbs (this is from base R!) and can be applied across rows or columns (most common)"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-1",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-1",
    "title": "Introduction to R: Lecture 11",
    "section": "3. Replacing for loops with “apply()” functions in base R",
    "text": "3. Replacing for loops with “apply()” functions in base R\nWe looked at this example earlier (which calculates the mean of several columns in a data frame) and rewrote it using a for loop. Now we rewrite it again but this time using apply():\n\npenguins %&gt;% summarize(avg_bill_length = mean(bill_length_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_bill_depth = mean(bill_depth_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_flipper_length = mean(flipper_length_mm, na.rm = TRUE))\npenguins %&gt;% summarize(avg_body_mass = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-2",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-2",
    "title": "Introduction to R: Lecture 11",
    "section": "3. Replacing for loops with “apply()” functions in base R",
    "text": "3. Replacing for loops with “apply()” functions in base R\nRewrite previous example using apply():\n\n# manually select only numeric column using base R syntax\npenguins_numeric &lt;- penguins[ , c(\"bill_length_mm\", \"bill_depth_mm\", \n                                  \"flipper_length_mm\", \"body_mass_g\")]\n\n# apply mean to these columns\napply(penguins_numeric, 2, mean, na.rm = TRUE)  \n\nNote the 2 stays for MARGIN = 2 (apply on the columns). If you write 1 it means rows. Type ?apply in your Console for more info."
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-3",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-3",
    "title": "Introduction to R: Lecture 11",
    "section": "3. Replacing for loops with “apply()” functions in base R",
    "text": "3. Replacing for loops with “apply()” functions in base R\nThe apply() is a family meaning there are several similar apply function you can use:\n\n\n\n\n\n\n\n\n\n\nFunction\nUse Case\nInput Type\nOutput Type\nWhy Use It\n\n\n\n\napply()\nApply a function to rows or columns\nMatrix, data frame\nVector or matrix\nFor row/column-wise operations\n\n\nlapply()\nApply a function to each element\nList, data frame\nList\nKeeps outputs as list (safe, flexible)\n\n\nsapply()\nLike lapply() but simplifies output\nList, data frame\nVector or matrix\nShorter output, easier to read\n\n\nvapply()\nLike sapply(), but type-safe\nList, data frame\nVector or matrix\nSafer than sapply()—explicit type check"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-4",
    "href": "lectures/drafts/11-slides.html#replacing-for-loops-with-apply-functions-in-base-r-4",
    "title": "Introduction to R: Lecture 11",
    "section": "3. Replacing for loops with “apply()” functions in base R",
    "text": "3. Replacing for loops with “apply()” functions in base R\n\n# Use numeric columns from penguins dataset\nnum_data &lt;- penguins[ , 3:6]\n\n# apply(): function across columns (MARGIN = 2)\napply(num_data, 2, mean, na.rm = TRUE)\n\n# lapply(): list output\nlapply(num_data, mean, na.rm = TRUE)\n\n# sapply(): simplified vector output\nsapply(num_data, mean, na.rm = TRUE)\n\n# vapply(): safe version of sapply()\nvapply(num_data, mean, na.rm = TRUE, FUN.VALUE = numeric(1))\n\n\napply() works best with matrix-like structures\nlapply() is list-safe; sapply() is more concise\nvapply() avoids surprises by enforcing output type (here: return a single numeric value)"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#definition-of-while-loops",
    "href": "lectures/drafts/11-slides.html#definition-of-while-loops",
    "title": "Introduction to R: Lecture 11",
    "section": "Definition of While Loops",
    "text": "Definition of While Loops\nWe focused on “for loops” because they are the most common, but R, and many other programming languages, also supports “while loops”\nHow while loops works:\n\nEvaluate a condition\nIf the condition is TRUE, run the loop body\nStart over: re-evaluate the condition\nRepeat until the condition is FALSE (then the while loop is over)"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#while-loop-syntax",
    "href": "lectures/drafts/11-slides.html#while-loop-syntax",
    "title": "Introduction to R: Lecture 11",
    "section": "While Loop Syntax",
    "text": "While Loop Syntax\nSyntax:\nwhile (condition to be evaluated) {\n  statement(s)\n}\nExample:\ncounter &lt;- 1\n\nwhile(counter &lt;= 4) {\n  print(counter)\n  counter &lt;- counter + 1\n}"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#while-loop-examples",
    "href": "lectures/drafts/11-slides.html#while-loop-examples",
    "title": "Introduction to R: Lecture 11",
    "section": "While Loop Examples",
    "text": "While Loop Examples\nTake the previous code, but this time print counter also at the end:\ncounter &lt;- 1\n\nwhile(counter &lt;= 3) {\n  print(counter)\n  counter &lt;- counter + 1\n  print(counter)\n}\nWhy are the results different from the previous code?"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#while-loop-examples-1",
    "href": "lectures/drafts/11-slides.html#while-loop-examples-1",
    "title": "Introduction to R: Lecture 11",
    "section": "While Loop Examples",
    "text": "While Loop Examples\nTake the previous code, but this time we do not increment our counter variable.\ncounter &lt;- 1\nwhile(counter &lt; 3){\n  print(counter)\n}\nWhat is the output of this code?"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#while-loop-examples-2",
    "href": "lectures/drafts/11-slides.html#while-loop-examples-2",
    "title": "Introduction to R: Lecture 11",
    "section": "While Loop Examples",
    "text": "While Loop Examples\nWhat is the output of this code?\ncounter &lt;- 1\nwhile(counter &lt; 4){\n  print(counter)\n  multiply &lt;- counter * 100\n  print(multiply)\n  counter &lt;- counter + 1\n  print(counter)\n}"
  },
  {
    "objectID": "lectures/drafts/11-slides.html#while-loop-uses",
    "href": "lectures/drafts/11-slides.html#while-loop-uses",
    "title": "Introduction to R: Lecture 11",
    "section": "While Loop Uses",
    "text": "While Loop Uses\nWhile Loops are useful when you don’t know in advance how many times to iterate — you want the loop to continue until a condition is met.\nExample use cases:\n\nKeep looping until you get three heads in a row from random coin flips\n\nKeep accepting user input until you reach a target number of responses\n\nWhile loops require a “count variable” to be set outside the loop.\nWhile loops are important but less common than for loops especially for the types of tasks we do in this course. For this reason, we don’t cover them in-depth."
  },
  {
    "objectID": "lectures/drafts/11-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/11-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 11",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#control-structures-whats-the-idea",
    "href": "lectures/drafts/09-slides.html#control-structures-whats-the-idea",
    "title": "Introduction to R: Lecture 9",
    "section": "Control Structures: What’s the Idea?",
    "text": "Control Structures: What’s the Idea?\nUp to this point, our R code has been running line by line following in a fixed sequence.\n\n\n\n\n\n\n\n\nNow we ask: Can our code be dynamic vs fixed?\n\n\nFor Example: Can it skip some lines and run others depending on a condition? Or can it repeat itself when needed?\nYes, with control structures!"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#what-are-control-structures",
    "href": "lectures/drafts/09-slides.html#what-are-control-structures",
    "title": "Introduction to R: Lecture 9",
    "section": "What Are Control Structures?",
    "text": "What Are Control Structures?\nControl structures let us write code that can:\n\nMake decisions\n→ with conditional statements (if, if...else, etc.)\nRepeat actions\n→ with loops (for, while)\n\nConditional statements and loops — that is, control structures — let us control the flow of execution. They allow our code to respond dynamically to different situations, rather than always running in the same fixed order like we’ve done so far."
  },
  {
    "objectID": "lectures/drafts/09-slides.html#conditional-statements",
    "href": "lectures/drafts/09-slides.html#conditional-statements",
    "title": "Introduction to R: Lecture 9",
    "section": "Conditional Statements",
    "text": "Conditional Statements\nConditional statements let our code make decisions: the code checks conditions, evaluates them, and chooses what to do.\nSaid more formally, we use logical tests to determine which code should run:\n\nSingle test with if... else\nMultiple tests with if... else if... else\nNested tests by placing one if inside another\nVectorized tests with ifelse() (or if_else() in tidyverse) to apply a condition to each element of a vector"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#practice",
    "href": "lectures/drafts/09-slides.html#practice",
    "title": "Introduction to R: Lecture 9",
    "section": "💻 Practice",
    "text": "💻 Practice\n\nDownload today’s class materials from the course website.\nOpen the file called warm-up.R.\nBefore running the code: look over the syntax and try to predict what the code will output\nRun the code and compare it to your prediction.\nBe ready to share at least one question about what the code."
  },
  {
    "objectID": "lectures/drafts/09-slides.html#single-test-with-if-else",
    "href": "lectures/drafts/09-slides.html#single-test-with-if-else",
    "title": "Introduction to R: Lecture 9",
    "section": "1. Single test with if… else",
    "text": "1. Single test with if… else\nUse if...else when your code needs to test one condition and take one of two possible actions, depending on whether the condition is TRUE or FALSE.\nSyntax:\nif (condition) {\n    # action performed when condition is TRUE\n    action1\n} else {\n    # action performed when condition is FALSE\n    action2\n}\nExample:\n\nage &lt;- 14\n\nif (age &gt; 16) {\n  print(\"You can get a driving license\")\n} else {\n  print(\"You cannot drive\")\n}"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#single-test-with-if-else-1",
    "href": "lectures/drafts/09-slides.html#single-test-with-if-else-1",
    "title": "Introduction to R: Lecture 9",
    "section": "1. Single test with if… else",
    "text": "1. Single test with if… else\nAnother Example: What’s the output of this code?\n\nmovie_rating &lt;- c(4.5, 4.2, 5.0, 3.8, 2.9, 1.7)\nmovie_avg_rating &lt;- mean(movie_rating)\n\nif (movie_avg_rating &gt;= 4) {\n  print(\"This movie is great!\")\n} else {\n  print(\"Not a favorite.\")\n}"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#multiple-tests-with-if-else-if-else",
    "href": "lectures/drafts/09-slides.html#multiple-tests-with-if-else-if-else",
    "title": "Introduction to R: Lecture 9",
    "section": "2. Multiple tests with if… else if… else",
    "text": "2. Multiple tests with if… else if… else\nUse if...else if...else when your code needs to test multiple conditions and take different actions depending on which condition is TRUE.\nSyntax:\nif (condition1) {\n    # action performed when condition 1 is TRUE\n    action1\n} else if (condition2) {\n    # action performed when condition 2 is TRUE\n    action2\n} else {\n    # action performed when conditions 1 and 2 are FALSE\n    action3\n}\n\nExample:\n\nx &lt;- 0\n\nif (x &gt; 0) {\n  print(\"x is positive\")\n} else if (x &lt; 0) {\n  print(\"x is negative\")\n} else {\n  print(\"x is zero\")\n}"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#note-with-conditional-statements-sequence-matters",
    "href": "lectures/drafts/09-slides.html#note-with-conditional-statements-sequence-matters",
    "title": "Introduction to R: Lecture 9",
    "section": "Note: with conditional statements sequence matters!",
    "text": "Note: with conditional statements sequence matters!\nConditional statements are evaluated in order so the sequence of your code matters:\n\nR checks each condition one by one, from top to bottom\n\nAs soon as it finds a condition that is TRUE, it runs that block and skips the rest"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#multiple-tests-with-if-else-if-else-1",
    "href": "lectures/drafts/09-slides.html#multiple-tests-with-if-else-if-else-1",
    "title": "Introduction to R: Lecture 9",
    "section": "2. Multiple tests with if… else if… else",
    "text": "2. Multiple tests with if… else if… else\nAnother Example with multiple else if statements:\n# Take user input\ntemperature &lt;- as.integer(readline(prompt = \"Enter today's temperature in Celsius: \"))\n\n# Determine weather based on temperature\nif (temperature &gt;= 30) {\n  weather &lt;- \"Hot\"\n} else if (temperature &gt;= 20) {\n  weather &lt;- \"Cool\"\n} else if (temperature &gt;= 10) {\n  weather &lt;- \"Breezy\"\n} else {\n  weather &lt;- \"Freezing\"\n}\nprint(weather)"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#practice-1",
    "href": "lectures/drafts/09-slides.html#practice-1",
    "title": "Introduction to R: Lecture 9",
    "section": "💻 Practice",
    "text": "💻 Practice\n\nWhat happens if the conditions are out of order? Move temperature &gt;= 10 before temperature &gt;= 20 in the code and run it with temperature 25\n\n\n\nAdd another else if statement to further refine the code: If the temperature is between 0 and 10 (inclusive of 0, exclusive of 10), set the weather to “Cold”. Hint: use the & operator to combine two conditions.\n\n\nOnce done, share your code here."
  },
  {
    "objectID": "lectures/drafts/09-slides.html#nested-tests-by-placing-one-if-inside-another",
    "href": "lectures/drafts/09-slides.html#nested-tests-by-placing-one-if-inside-another",
    "title": "Introduction to R: Lecture 9",
    "section": "3. Nested tests by placing one if inside another",
    "text": "3. Nested tests by placing one if inside another\n\nUse nested if...else statements when your code needs to check conditions within conditions. This allows you to make a second decision only after a first condition is met.\nExample (note the %% returns the remainder after division):\n\nx &lt;- 15\n\nif (x &gt; 0) {\n  if (x %% 2 == 0) {\n    print(\"x is a positive even number\")\n  } else {\n    print(\"x is a positive odd number\")\n  }\n} else {\n  if (x %% 2 == 0) {\n    print(\"x is a negative even number\")\n  } else {\n    print(\"x is a negative odd number\")\n  }\n}"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#nested-tests-by-placing-one-if-inside-another-1",
    "href": "lectures/drafts/09-slides.html#nested-tests-by-placing-one-if-inside-another-1",
    "title": "Introduction to R: Lecture 9",
    "section": "3. Nested tests by placing one if inside another",
    "text": "3. Nested tests by placing one if inside another\nSame example, but this checks also the condition x &lt;- 0:\n\nx &lt;- 0\n\nif (x &gt; 0) {\n  if (x %% 2 == 0) {\n    print(\"x is a positive even number\")\n  } else {\n    print(\"x is a positive odd number\")\n  }\n} else if (x &lt; 0) {\n  if (x %% 2 == 0) {\n    print(\"x is a negative even number\")\n  } else {\n    print(\"x is a negative odd number\")\n  }\n} else {\n  print(\"x is zero\")\n}"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse",
    "href": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse",
    "title": "Introduction to R: Lecture 9",
    "section": "4. Vectorized tests with ifelse()",
    "text": "4. Vectorized tests with ifelse()\nUse ifelse() to apply a condition to each element of a vector. This is called a “vectorized test”, and fits well R’s vector-based design.\nSyntax:\nifelse (condition to be evaluated,\n    action performed when condition is TRUE,\n    action performed when condition is FALSE)\nExample:\n\ny &lt;- 3\n\nifelse(sqrt(16) &gt; y, \n       sqrt(16),\n       0)"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-1",
    "href": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-1",
    "title": "Introduction to R: Lecture 9",
    "section": "4. Vectorized tests with ifelse()",
    "text": "4. Vectorized tests with ifelse()\nAnother example: What is the output of this code?\n\nnumbers &lt;- c(10, 6, 7)\nifelse(numbers %% 2 == 1, \n       \"odd\",\n       \"even\")\n\n\n\n\n\n\n\n\n\nHow ifelse() works:\n\n\n\nThe input to ifelse() is often a vector, not just a single value, so the output is also a vector. The code evaluates each element of the vector, applying the specified action for each case.\nThis works because ifelse() supports vectorized operations: operations directly applied on entire vectors, rather than looping through individual elements one-by-one."
  },
  {
    "objectID": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-2",
    "href": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-2",
    "title": "Introduction to R: Lecture 9",
    "section": "4. Vectorized tests with ifelse()",
    "text": "4. Vectorized tests with ifelse()\nExample: What is the output of this code?\n\nlibrary(tidyverse)\n\nqualify &lt;- tibble(\"Athlet\" = c(\"Noah\", \"Julio\", \"Nick\", \"Maria\"), \n                  \"Scores\" = c(32, 37, 28, 30))\n\n# using base R to access column Scores\nifelse(qualify$Scores &gt; 30, \n       \"Admitted\", \n       \"Rejected\")\n\n# using dplyr\nqualify %&gt;%\n  mutate(status = ifelse(Scores &gt; 30,\n                       \"Admitted\",\n                       \"Rejected\"))"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-3",
    "href": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-3",
    "title": "Introduction to R: Lecture 9",
    "section": "4. Vectorized tests with ifelse()",
    "text": "4. Vectorized tests with ifelse()\nIn the previous example, we only had two possible categories: “Admitted” and “Rejected”\nWhat happens to our code if we add a third one, say “Waitlisted”?\n\n\nqualify &lt;- tibble(\"Athlet\" = c(\"Noah\", \"Julio\", \"Nick\", \"Maria\"), \n                  \"Scores\" = c(32, 37, 28, 30))\n\nqualify %&gt;%\n  mutate(Status = ifelse(Scores &gt; 35,            # first condition\n                         \"Admitted\",             # if TRUE\n                         ifelse(Scores &gt;= 30,    # second condition (only if first is FALSE)\n                                \"Waitlisted\",    # if TRUE\n                                \"Rejected\")))    # if both FALSE"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-4",
    "href": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-4",
    "title": "Introduction to R: Lecture 9",
    "section": "4. Vectorized tests with ifelse()",
    "text": "4. Vectorized tests with ifelse()\nNested ifelse() statements work, but they make the code harder to read.\nCompare the previous code with this code that does not use them:\n\nqualify &lt;- tibble(\"Athlet\" = c(\"Noah\", \"Julio\", \"Nick\", \"Maria\"), \n                  \"Scores\" = c(32, 37, 28, 30))\n\nqualify %&gt;%\n  mutate(Status = \"Rejected\") %&gt;%                                  # default label\n  mutate(Status = ifelse(Scores &gt;= 30, \"Waitlisted\", Status)) %&gt;%  # update if condition met\n  mutate(Status = ifelse(Scores &gt; 35, \"Admitted\", Status))         # update if higher condition met\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nIf you have multiple conditions (more than two):\n\nWrite several separate mutate() + ifelse() steps, as shown on this slide, rather than nesting them, as shown on the previous slide\nWhen possible, use case_when() instead of ifelse() for better readability"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-5",
    "href": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-5",
    "title": "Introduction to R: Lecture 9",
    "section": "4. Vectorized tests with ifelse()",
    "text": "4. Vectorized tests with ifelse()\nPeople often use ifelse() to recode variables in a dataframe. It’s a good choice when the recoding can be done with a single ifelse(), as shown in this example.\nExample: the variable decisionDirection takes four values (1 conservative, 2 liberal, 3 unspecifiable, and NA). Recode it to take three values (0 conservative, 1 liberal, and NA for both NA and unspecifiable)\ndata %&gt;%\n  mutate(decisionDirection = ifelse(\n    decisionDirection == 3, # condition to be evaluated\n    NA,                     # if true, do NA\n    decisionDirection - 1   # if false, subtract one to value\n    ))"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-6",
    "href": "lectures/drafts/09-slides.html#vectorized-tests-with-ifelse-6",
    "title": "Introduction to R: Lecture 9",
    "section": "4. Vectorized tests with ifelse()",
    "text": "4. Vectorized tests with ifelse()\nNote there is also a tidyverse version of the base R ifelse() function!\nThe tidyverse version is called if_else() https://dplyr.tidyverse.org/reference/if_else.html\nThe two are similar, hence I introduced only on here, pick the one you prefer."
  },
  {
    "objectID": "lectures/drafts/09-slides.html#practice-2",
    "href": "lectures/drafts/09-slides.html#practice-2",
    "title": "Introduction to R: Lecture 9",
    "section": "💻 Practice",
    "text": "💻 Practice\nYou can fine more practice exercises in today’s class materials (downloaded from the website)"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/09-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 9",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nControl structures let us change the flow of execution in our code\n\nWe focused on conditional statements: how to make decisions using if, else, and else if\nWe practiced different types of conditionals:\n\nsingle test, multiple tests, and nested tests\n\nvectorized tests with ifelse() and if_else()"
  },
  {
    "objectID": "lectures/drafts/09-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/09-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 9",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#definitions",
    "href": "lectures/drafts/07-slides.html#definitions",
    "title": "Introduction to R: Lecture 7",
    "section": "Definitions",
    "text": "Definitions\nRenaming: change variable names (column names)\nRecoding: change values/levels of categorical variables (column values; e.g., inside a column)"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#uses",
    "href": "lectures/drafts/07-slides.html#uses",
    "title": "Introduction to R: Lecture 7",
    "section": "Uses",
    "text": "Uses\nWhat are some common scenarios where you’d want to rename variable names or recode variable values?\n\nYou are cleaning up imported data\n\nThe variable name is has issues (e.g., Flipper Length (mm) → flipper_length_mm)\nYou need to standardize categories (e.g., \"Good\" and \"GOOD\" → \"good\")\nEtc.\n\nYou are preparing data for modeling or visualization\n\nYou want to recode \"FEMALE\"/\"MALE\" to 0/1 for a regression model\n\nEtc."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#we-work-with-the-penguins-raw-data",
    "href": "lectures/drafts/07-slides.html#we-work-with-the-penguins-raw-data",
    "title": "Introduction to R: Lecture 7",
    "section": "We work with the Penguins (raw) Data!",
    "text": "We work with the Penguins (raw) Data!\n# Load libraries and data\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\n\n# Explore data\nhead(penguins_raw)\ntail(penguins_raw)\nrbind(head(penguins_raw, 3), tail(penguins_raw, 3))\nglimpse(penguins_raw)"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#renaming-variables-with-rename",
    "href": "lectures/drafts/07-slides.html#renaming-variables-with-rename",
    "title": "Introduction to R: Lecture 7",
    "section": "Renaming Variables with rename",
    "text": "Renaming Variables with rename\nTo change variable names (column names) the most common method is rename()\nChange the name of the variable studyName to study_name:\n# check before renaming\nstr(penguins_raw)\npenguins_raw %&gt;% select(studyName)\n\n# rename\npenguins_raw %&gt;% rename(study_name = studyName)   # new = old\n\n# remember to save to keep changes\np &lt;- penguins_raw %&gt;% rename(study_name = studyName)\np %&gt;% select(study_name)"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#practice-renaming-variables",
    "href": "lectures/drafts/07-slides.html#practice-renaming-variables",
    "title": "Introduction to R: Lecture 7",
    "section": "💻 Practice Renaming Variables",
    "text": "💻 Practice Renaming Variables\n\nUse select() to check the variable Comments in penguins_raw\nUse rename() to rename Comments to notes\nSave the result to a new object\nUse select() to check your result\n\nOnce done, copy your code here to share it."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#recoding-variables-method-1-with-mutate-recode",
    "href": "lectures/drafts/07-slides.html#recoding-variables-method-1-with-mutate-recode",
    "title": "Introduction to R: Lecture 7",
    "section": "Recoding Variables Method 1: with mutate + recode",
    "text": "Recoding Variables Method 1: with mutate + recode\nTo change variable values (usually levels of categorical variables), we learn two methods.\nChange the levels of the categorical variable Sex (MALE becomes 1, FEMALE becomes 0) with method 1:\n# check before recoding\npenguins_raw %&gt;% count(Sex)\n\n# mutate + recode\np &lt;- penguins_raw %&gt;%\n  mutate(sex = recode(Sex, \"MALE\" = 1, \"FEMALE\" = 0))\n\n# compare\npenguins_raw %&gt;% count(Sex)\np %&gt;% count(Sex)"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#recoding-variables-method-2-with-mutate-case_when",
    "href": "lectures/drafts/07-slides.html#recoding-variables-method-2-with-mutate-case_when",
    "title": "Introduction to R: Lecture 7",
    "section": "Recoding Variables Method 2: with mutate + case_when",
    "text": "Recoding Variables Method 2: with mutate + case_when\nChange the levels of the categorical variable Sex (MALE becomes 1, FEMALE becomes 0) with method 2:\n# mutate + case_when\npenguins_raw %&gt;%\n  mutate(Sex = case_when(Sex == \"MALE\" ~ 1,\n                         Sex == \"FEMALE\" ~ 0,\n                         TRUE ~ NA_real_))\n  \n# like for method 1 (previous code) save results to keep changes and compare\n\n\n\n\n\n\nNote\n\n\nWith case_when() each logical condition ~ value pair acts like if → then:\n\nfor each row, R looks if the condition is TRUE: “If you find the value MALE in Sex, then convert it to 1”\nTRUE ~ NA_real_ tells R: “If no previous condition was met, then return NA as as a number”"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#practice-recoding-variables",
    "href": "lectures/drafts/07-slides.html#practice-recoding-variables",
    "title": "Introduction to R: Lecture 7",
    "section": "💻 Practice Recoding Variables",
    "text": "💻 Practice Recoding Variables\n\nUse count() to check the variable Species in penguins_raw\nPick method 1 or method 2 to recode the values of that variable into Adelie, Chinstrap, Gentoo\nSave the result to a new object\nUse count() to verify both results\n\nOnce done, copy your code here to share it."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#the-role-of-mutate-in-recoding",
    "href": "lectures/drafts/07-slides.html#the-role-of-mutate-in-recoding",
    "title": "Introduction to R: Lecture 7",
    "section": "The Role of mutate in Recoding",
    "text": "The Role of mutate in Recoding\nrename()\n\nSpecific use: change column names\n\nIt changes the column’s name, but leaves the column’s values unchanged\n\nmutate()\n\nMany uses: create new columns or modify existing columns values\n\nIt changes the column’s values, potentially can also rename the column\n\n\n\n\n\n\n\nNote\n\n\nFor recoding, we use mutate() because our first goal is changing the column’s values. We learned two methods:\n\nMethod 1: mutate(Sex = recode(Sex, \"MALE\" = 1, \"FEMALE\" = 0))\n\nMethod 2: mutate(Sex = case_when(sex == \"MALE\" ~ 1, sex == \"FEMALE\" ~ 0))"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#rename-vs-recode-syntax-reference",
    "href": "lectures/drafts/07-slides.html#rename-vs-recode-syntax-reference",
    "title": "Introduction to R: Lecture 7",
    "section": "Rename vs Recode: Syntax Reference",
    "text": "Rename vs Recode: Syntax Reference\n\n\n\n\n\n\n\n\n\n\nFunction\nWhat It Changes\nSyntax + Example\nTips\n\n\n\n\nrename()\nColumn names\nrename(new_name = old_name)  rename(notes = Comments)\nNo quotes around variable names\n\n\nrecode()\nColumn values\nrecode(variable, \"old\" = new)  recode(Sex, \"MALE\" = 1)\nCheck function doc to see when quotes are needed\n\n\ncase_when()\nColumn values\ncase_when(variable == \"old\" ~ new)  case_when(Sex == \"MALE\" ~ 1)\nCheck function doc to see when quotes are needed\n\n\n\n\n\n\n\n\n\nNote\n\n\nAll recoding is typically done inside mutate()."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#syntactic-valid-variable-names-in-r",
    "href": "lectures/drafts/07-slides.html#syntactic-valid-variable-names-in-r",
    "title": "Introduction to R: Lecture 7",
    "section": "Syntactic (Valid) Variable Names in R",
    "text": "Syntactic (Valid) Variable Names in R\n\n\nValid Names in R:\n\nUse letters, numbers, and the symbols . or _\nBut cannot start with a number or symbol\n\n\nExamples of Valid Names:\nflipper_length_mm\nflipper.length.mm\nflipper.length_mm     # valid but poor style\nFlipperLengthMm       # valid but poor style"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#non-syntactic-invalid-variable-names-in-r",
    "href": "lectures/drafts/07-slides.html#non-syntactic-invalid-variable-names-in-r",
    "title": "Introduction to R: Lecture 7",
    "section": "Non-syntactic (Invalid) Variable Names in R",
    "text": "Non-syntactic (Invalid) Variable Names in R\n\n\nWhat Makes a Name Invalid:\n\nContains spaces or symbols\nStarts with a number or symbol\nUses reserved words (e.g., TRUE, NULL, if, function)\nType ?Reserved in the Console for the full list\n\n\nExamples of Invalid Names:\nFlipper Length (mm)\n@_flipper_length_mm\nflipper_ length_mm\nflipper-length-mm\n.flipper.length.mm"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#practice-syntactic-and-non-syntactic-names",
    "href": "lectures/drafts/07-slides.html#practice-syntactic-and-non-syntactic-names",
    "title": "Introduction to R: Lecture 7",
    "section": "💻 Practice: Syntactic and Non-Syntactic Names",
    "text": "💻 Practice: Syntactic and Non-Syntactic Names\nWhich of the following are valid names?\n\n3_religion\n#3_religion\nq3_religion\nq3.religion\nq3-religion\nq3 religion\nTRUE\n\n\n\n\n\n\n\nTip\n\n\nFor best coding style, use snake_case for all your variables names and keep them to three words maximum. Example: q3_religion"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#how-to-handle-non-syntactic-names-and-why-it-matters",
    "href": "lectures/drafts/07-slides.html#how-to-handle-non-syntactic-names-and-why-it-matters",
    "title": "Introduction to R: Lecture 7",
    "section": "How to Handle Non-syntactic Names — and Why It Matters",
    "text": "How to Handle Non-syntactic Names — and Why It Matters\nYou should avoid creating non-syntactic names, BUT you’ll often encounter them, especially in datasets not created in R (from Excel or other external sources). If you don’t handle them properly, R will throw errors when you try to use them.\nWhat to Do:\n1. Use backticks to refer to them (e.g., `Flipper Length (mm)`)\n2. Use rename() to change them to syntactic names\nNon-syntactic names will break code if you forget to wrape them in backticks, so renaming avoids issues."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#working-with-non-syntactic-names-in-practice",
    "href": "lectures/drafts/07-slides.html#working-with-non-syntactic-names-in-practice",
    "title": "Introduction to R: Lecture 7",
    "section": "Working with Non-syntactic Names in Practice",
    "text": "Working with Non-syntactic Names in Practice\nImagine you are working on political ideology by country, assembled by someone else. The data are in Excel and when you imported them in R they look like this:\ndf &lt;- tibble(country = c(\"Italy\", \"Germany\", \"France\", \"Italy\", \"United States\"),\n                  `4 ideology` = c(\"communism\", \"fascism\", \"anarchism\", \"fascism\", \"capitalism\"))\n\nTo use the non-syntactic variable name without changing it and without errors, you must use backticks:\nselect(df, `4 ideology`)"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#practice-syntactic-non-syntactic-variable-names",
    "href": "lectures/drafts/07-slides.html#practice-syntactic-non-syntactic-variable-names",
    "title": "Introduction to R: Lecture 7",
    "section": "💻 Practice: Syntactic & Non-syntactic Variable Names",
    "text": "💻 Practice: Syntactic & Non-syntactic Variable Names\nTry this in R:\n\nUse glimpse(penguins_raw) or str(penguins_raw) and identify non-syntactic variables names in this raw dataset\nPick one of them, and try accessing it with select() without backticks: what happens?\nUse rename() to give the variable a syntactic valid name\nSave the result to a new object\nVerify the name was changed and you can now access it\n\nOnce done, copy your code here to share it."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#what-are-missing-data",
    "href": "lectures/drafts/07-slides.html#what-are-missing-data",
    "title": "Introduction to R: Lecture 7",
    "section": "What Are Missing Data?",
    "text": "What Are Missing Data?\nR distinguishes two types of missing data:\n\nExplicit missing: visible NA or NaN values in the dataset\nImplicit missing: data that was never recorded\n\nIn this course, we focus on explicit missing data. For implicit missing data, see R for Data Science Chapter 18\n\n\n\n\n\n\nNote\n\n\nExplicit = value is missing as NA (Not Available) or NaN (Not a Number)\nImplicit = value was never recorded (row or cell is absent)"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#how-missing-data-behave",
    "href": "lectures/drafts/07-slides.html#how-missing-data-behave",
    "title": "Introduction to R: Lecture 7",
    "section": "How Missing Data Behave",
    "text": "How Missing Data Behave\nAny operation involving a missing value will also return a missing value (see Chapter 12.2.2 Missing values for more):\nNA &gt; 5\n\nsum(c(3, 1, 4, NA)\nsum(c(3, 1, 4, NA), na.rm = TRUE)\n\nmean(c(3,1,4,NA))\nmean(c(3, 1, 4, NA), na.rm = TRUE)"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#common-ways-to-handle-missing-data",
    "href": "lectures/drafts/07-slides.html#common-ways-to-handle-missing-data",
    "title": "Introduction to R: Lecture 7",
    "section": "Common Ways to Handle Missing Data",
    "text": "Common Ways to Handle Missing Data\nWe’ll review three main tools:\n\nis.na() – to detect missing values\nna.rm = TRUE – to ignore missing values\ndrop_na() – to remove missing values"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#detect-missing-data-with-is.na",
    "href": "lectures/drafts/07-slides.html#detect-missing-data-with-is.na",
    "title": "Introduction to R: Lecture 7",
    "section": "1. Detect Missing Data with is.na():",
    "text": "1. Detect Missing Data with is.na():\nUse is.na() to find the missing values in a specific variable. It returns TRUE for missing values, and FALSE otherwise.\nCheck for missing values in the penguins_raw dataset:\n# using base R syntax\nsum(is.na(penguins_raw$Sex))\ntable(is.na(penguins_raw$Sex))\n\n# using tidyverse syntax\npenguins_raw %&gt;% summarize(sum(is.na(Sex)))\npenguins_raw  %&gt;% count(is.na(Sex)) \n\n# filter rows where sex is missing\nfilter(penguins_raw, is.na(Sex))    # correct  \nfilter(penguins_raw, Sex == NA)     # incorrect"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#ignore-missing-data-with-na.rm-true",
    "href": "lectures/drafts/07-slides.html#ignore-missing-data-with-na.rm-true",
    "title": "Introduction to R: Lecture 7",
    "section": "2. Ignore Missing Data with na.rm = TRUE",
    "text": "2. Ignore Missing Data with na.rm = TRUE\nUse na.rm = TRUE to exclude missing values when performing calculations. Often used with summarize() when calculating things like mean, sum, standard deviation.\npenguins_raw %&gt;% summarize(avg_mass = mean(`Body Mass (g)`, na.rm = TRUE))\npenguins_raw %&gt;% summarize(sum_mass = sum(`Body Mass (g)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nTip\n\n\nThe command na.rm = TRUE does not remove missing data from the variable(s), it just skips them for that operation, but they are not dropped!"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#remove-missing-data-with-drop_na",
    "href": "lectures/drafts/07-slides.html#remove-missing-data-with-drop_na",
    "title": "Introduction to R: Lecture 7",
    "section": "3. Remove Missing Data with drop_na()",
    "text": "3. Remove Missing Data with drop_na()\nUse drop_na() to remove rows with missing values. Either across all columns or in a specific column.\nDrop missing values in one specific column (preferred):\npenguins_raw %&gt;%\n  drop_na(`Body Mass (g)`) %&gt;%\n  summarize(avg_mass = mean(`Body Mass (g)`))\n\n\n\n\n\n\n\n\nWarning\n\n\nBe careful with drop_na() as it removes entire rows, which may unintentionally filter out relevant data. Check which variable(s) you are dropping, and avoid using it blindly across all columns."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#practice-handling-missing-data",
    "href": "lectures/drafts/07-slides.html#practice-handling-missing-data",
    "title": "Introduction to R: Lecture 7",
    "section": "💻 Practice: Handling Missing Data",
    "text": "💻 Practice: Handling Missing Data\n\nRename: use the penguins_raw dataset and rename Flipper Length (mm) to flipper_length_mm. Save the result as a new dataframe, e.g., penguins_clean or p\n\nUse the new dataframe with the renamed variable for the tasks below:\n\nDetect missing values: use is.na() and sum() to count how many are missing in the variable flipper length\nExclude missing from calculations: use na.rm = TRUE inside mean() to calculate the average flipper length\nDrop missing values: use drop_na() to remove rows with missing values in flipper length\n\nOnce done, share your code here."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#ways-to-fill-or-replace-missing-data",
    "href": "lectures/drafts/07-slides.html#ways-to-fill-or-replace-missing-data",
    "title": "Introduction to R: Lecture 7",
    "section": "Ways to Fill or Replace Missing Data",
    "text": "Ways to Fill or Replace Missing Data\nMain functions to replace or fill missing values:\n\nreplace_na() – replace missing values with a specified value\n\nfill() – carry values forward or backward (from the package tidyr)\n\ncoalesce() – return the first non-missing value across multiple columns\n\nSee Chapter 18 of R for Data Science for more."
  },
  {
    "objectID": "lectures/drafts/07-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/07-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 7",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nHow to rename variables using rename()\nHow to recode values inside a variable using recode() and case_when()\nThe difference between syntactic and non-syntactic variable names, and how to handle them\nHow to detect, ignore, or drop missing values using:\n\nis.na() to detect\nna.rm = TRUE to ignore\ndrop_na() to remove"
  },
  {
    "objectID": "lectures/drafts/07-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/07-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 7",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#our-goals-today",
    "href": "lectures/drafts/05-slides.html#our-goals-today",
    "title": "Introduction to R: Lecture 5",
    "section": "Our Goals Today",
    "text": "Our Goals Today\nPractice using graphs for data analysis. Specifically:\n\nDisplay variation and co-variation: Learn how to visualize the distribution of a single variable (e.g., cost to attend a school) and of two or more variables (e.g., cost and admrate).\nMatch graph type to variable type: Choose appropriate graph types depending on whether variables are categorical (e.g., school type), continuous (e.g., cost), or both.\nInterpret the graph: Practice describing what a graph reveals — such as trends, group differences, and outliers."
  },
  {
    "objectID": "lectures/drafts/05-slides.html#about-the-scorecard-dataset",
    "href": "lectures/drafts/05-slides.html#about-the-scorecard-dataset",
    "title": "Introduction to R: Lecture 5",
    "section": "About the scorecard dataset",
    "text": "About the scorecard dataset\nThe U.S. Department of Education collects annual statistics on colleges and universities in the United States: https://collegescorecard.ed.gov/data\nThis dataset includes variables such as:\n\nname: name of the school\nstate: state where the school is located\n\ntype: school type (e.g., Public, Private Nonprofit, Private For-Profit)\n\nadmrate: admission rate (e.g., 0.91 = 91%)\n\ncost: published cost of attendance\n\nnetcost: net cost of attendance after financial aid\n\nsatavg: average SAT score of admitted students\n\n...: many additional variables\n\nWe’ll focus on a subset of this data from the 2018–2019 academic year."
  },
  {
    "objectID": "lectures/drafts/05-slides.html#about-the-scorecard-dataset-1",
    "href": "lectures/drafts/05-slides.html#about-the-scorecard-dataset-1",
    "title": "Introduction to R: Lecture 5",
    "section": "About the scorecard dataset",
    "text": "About the scorecard dataset\nlibrary(tidyverse)\nlibrary(rcis)\ndata(scorecard)\nglimpse(scorecard)\n\n\nRows: 1,732\nColumns: 14\n$ unitid    &lt;dbl&gt; 100654, 100663, 100706, 100724, 100751, 100830, 100858, 1009…\n$ name      &lt;chr&gt; \"Alabama A & M University\", \"University of Alabama at Birmin…\n$ state     &lt;chr&gt; \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", …\n$ type      &lt;fct&gt; \"Public\", \"Public\", \"Public\", \"Public\", \"Public\", \"Public\", …\n$ admrate   &lt;dbl&gt; 0.9175, 0.7366, 0.8257, 0.9690, 0.8268, 0.9044, 0.8067, 0.53…\n$ satavg    &lt;dbl&gt; 939, 1234, 1319, 946, 1261, 1082, 1300, 1230, 1066, NA, 1076…\n$ cost      &lt;dbl&gt; 23053, 24495, 23917, 21866, 29872, 19849, 31590, 32095, 3431…\n$ netcost   &lt;dbl&gt; 14990, 16953, 15860, 13650, 22597, 13987, 24104, 22107, 2071…\n$ avgfacsal &lt;dbl&gt; 69381, 99441, 87192, 64989, 92619, 71343, 96642, 56646, 5400…\n$ pctpell   &lt;dbl&gt; 0.7019, 0.3512, 0.2536, 0.7627, 0.1772, 0.4644, 0.1455, 0.23…\n$ comprate  &lt;dbl&gt; 0.2974, 0.6340, 0.5768, 0.3276, 0.7110, 0.3401, 0.7911, 0.69…\n$ firstgen  &lt;dbl&gt; 0.3658281, 0.3412237, 0.3101322, 0.3434343, 0.2257127, 0.381…\n$ debt      &lt;dbl&gt; 15250, 15085, 14000, 17500, 17671, 12000, 17500, 16000, 1425…\n$ locale    &lt;fct&gt; City, City, City, City, City, City, City, City, City, Suburb…"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#the-scorecard-dataset-making-a-plot",
    "href": "lectures/drafts/05-slides.html#the-scorecard-dataset-making-a-plot",
    "title": "Introduction to R: Lecture 5",
    "section": "The scorecard dataset: making a plot",
    "text": "The scorecard dataset: making a plot\nWhich type of college has the highest average SAT score?\n# with faceted histogram\nggplot(data = scorecard, mapping = aes(x = satavg)) +\n  geom_histogram() + \n  facet_wrap(facets = vars(type))\n\nWhat’s a histogram?"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#the-scorecard-dataset-interpreting-a-plot",
    "href": "lectures/drafts/05-slides.html#the-scorecard-dataset-interpreting-a-plot",
    "title": "Introduction to R: Lecture 5",
    "section": "The scorecard dataset: interpreting a plot",
    "text": "The scorecard dataset: interpreting a plot\nWhat do these graphs reveal about average SAT scores by type of college?\n\n\n\n\n\n\n\nInterpreting plots is as important as writing code\n\n\nAccording to these graphs, private nonprofit schools have the highest average SAT scores, closely followed by public schools, and then private for-profit schools.\nBut this interpretation doesn’t tell the full story:\n\nFrom the histogram, we can see that each school type includes a different number of colleges. i.e., they have different sample sizes (private for-profit schools have far fewer schools than others).\nThis matters because averages based on small groups may not represent the broader category well. Looking at the full distribution gives us a more complete understanding."
  },
  {
    "objectID": "lectures/drafts/05-slides.html#the-scorecard-dataset-asking-more-questions-answering-them-with-dplyr",
    "href": "lectures/drafts/05-slides.html#the-scorecard-dataset-asking-more-questions-answering-them-with-dplyr",
    "title": "Introduction to R: Lecture 5",
    "section": "The scorecard dataset: asking more questions, answering them with dplyr",
    "text": "The scorecard dataset: asking more questions, answering them with dplyr\nHow many schools are in each type?\nscorecard %&gt;% count(type) \nWhich schools are categorized as private for-profit?\nscorecard %&gt;%\n  filter(type == \"Private, for-profit\") %&gt;%\n  select(name, state, type, satavg, cost)\nWhat about the University of Chicago?\nscorecard %&gt;% filter(name == \"University of Chicago\")\nEtc."
  },
  {
    "objectID": "lectures/drafts/05-slides.html#once-you-draw-a-plot-ask-yourself",
    "href": "lectures/drafts/05-slides.html#once-you-draw-a-plot-ask-yourself",
    "title": "Introduction to R: Lecture 5",
    "section": "Once you draw a plot, ask yourself:",
    "text": "Once you draw a plot, ask yourself:\n\n\nSubstantive questions:\n\nWhat does this graph tell?\nAre there patterns? Outliers?\nWhat hypotheses can I generate?\nWhat else I want to know?\nShould I dig deeper with dplyr?\nEtc.\n\n\nStylistic questions:\n\nIs the chosen plot appropriate (match variable type)?\nIs the plot clear and easy to understand?\nIs it too busy or too simple?\nCould it be improved? (titles, labels, colors, etc.)\nDoes I need to manipulate the data first?\nEtc."
  },
  {
    "objectID": "lectures/drafts/05-slides.html#types-of-visualizations-and-best-graph-types",
    "href": "lectures/drafts/05-slides.html#types-of-visualizations-and-best-graph-types",
    "title": "Introduction to R: Lecture 5",
    "section": "Types of Visualizations and Best Graph Types",
    "text": "Types of Visualizations and Best Graph Types\nDo I want to represent variation in:\n\nA single variable?\nTwo variables?\nThree variables?\n\nWhat type(s) are my variables?\n\nContinuous (e.g., satavg average SAT score, cost published cost)\nCategorical (e.g., type school type, state U.S. state)\nOther types (often treated as categorical): ordinal, nominal, binary\n\n\n\n\n\n\n\nTip\n\n\nThink about which variables you want to display and their type before choosing a graph!"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#univariate-one-variable",
    "href": "lectures/drafts/05-slides.html#univariate-one-variable",
    "title": "Introduction to R: Lecture 5",
    "section": "Univariate (One Variable)",
    "text": "Univariate (One Variable)\nTo show how values vary within a single variable:\n\nOne continuous variable → Histogram\nOne categorical variable → Bar Chart\n\n\n\n\n\n\n\n\n\n\n\nFunction\nWhat Gets Counted\nWhen to Use\n\n\n\n\ngeom_histogram()\nHow many values fall into each numeric bin\nWhen x is continuous\n\n\ngeom_bar()\nHow many observations are in each category\nWhen x is categorical"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#bivariate-two-variables",
    "href": "lectures/drafts/05-slides.html#bivariate-two-variables",
    "title": "Introduction to R: Lecture 5",
    "section": "Bivariate (Two Variables)",
    "text": "Bivariate (Two Variables)\nTo show how two variables co-vary:\n\nTwo continuous variables → Scatterplot\nOne categorical + one continuous → Box Plot\nTwo categorical variables → Grouped or Stacked Bar Chart"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#multivariate-three-variables",
    "href": "lectures/drafts/05-slides.html#multivariate-three-variables",
    "title": "Introduction to R: Lecture 5",
    "section": "Multivariate (Three Variables)",
    "text": "Multivariate (Three Variables)\nTo compare patterns across subgroups:\n\nOne categorical + two continuous → Faceted Scatterplot\nTwo categorical + one continuous → Grouped Box Plot\n\n\nThese are the most common combinations. There are more options as you explore deeper!"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#main-graph-types-and-when-to-use-them",
    "href": "lectures/drafts/05-slides.html#main-graph-types-and-when-to-use-them",
    "title": "Introduction to R: Lecture 5",
    "section": "Main Graph Types and When to Use Them",
    "text": "Main Graph Types and When to Use Them\n\n\n\nType of Graph\nggplot2 Function\nInput Variables\nGoal\n\n\n\n\nHistogram\ngeom_histogram()\nOne continuous (e.g., age, income)\nShow the distribution of values\n\n\nBar Chart\ngeom_bar()\nOne categorical (e.g., region, gender)\nShow frequencies or counts of categories\n\n\nStacked Bar Chart\ngeom_bar() + fill\nTwo categorical variables (e.g., region by gender)\nCompare parts of a whole across categories\n\n\nScatterplot\ngeom_point()\nTwo continuous variables (e.g., height vs. weight, price vs. rating)\nShow relationship or correlation\n\n\nBox Plot\ngeom_boxplot()\nOne continuous + one categorical (e.g., income by gender)\nCompare distributions, spot outliers\n\n\nFaceted Scatterplot\nfacet_wrap() + geom_point()\nTwo continuous + one categorical (e.g., by country or year)\nCompare patterns across groups"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#practice-1",
    "href": "lectures/drafts/05-slides.html#practice-1",
    "title": "Introduction to R: Lecture 5",
    "section": "💻 Practice",
    "text": "💻 Practice\nOn the next slide, you’ll see a set of tasks. In small groups, use the scorecard dataset to create the most appropriate graph for each one.\n\nBefore plotting: Consider the type of variable and the type of variation you need to represent. Use the slides as reference.\nWhile plotting: Keep it simple, as you would for an initial Exploratory Data Analysis (e.g., no need to add labels, legends, color adjustments, scales, themes, facets, etc.)\nAfter plotting: Stare at the graph… look for patterns, outliers, or any notable features, and substantively interpret the graph."
  },
  {
    "objectID": "lectures/drafts/05-slides.html#practice-2",
    "href": "lectures/drafts/05-slides.html#practice-2",
    "title": "Introduction to R: Lecture 5",
    "section": "💻 Practice",
    "text": "💻 Practice\n\nShare your solutions here https://codeshare.io/vAzK44\nTASK 1: Plot the annual total cost of school attendance across the U.S. Hint: try geom_histogram() with the variable cost\nTASK 2: Plot the total number of schools in the U.S. by school type. Hint: try geom_bar() with the variable variable type\nTASK 3: Plot the annual total cost and net cost of attendance to schools in the U.S. (variables cost and netcost)\nTASK 4: Plot the annual total cost of attendance by school type (variables cost and type)\nTASK 5: Plot the annual total cost of attendance and net cost of attendance by school type (variables cost, netcost, type)"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#download-today-materials",
    "href": "lectures/drafts/05-slides.html#download-today-materials",
    "title": "Introduction to R: Lecture 5",
    "section": "💻 Download Today Materials",
    "text": "💻 Download Today Materials\nDownload today’s class materials from our website for:\n\nfurther insights into these tasks (and solutions!)\nadditional practice exercises"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#takeaways-and-tips",
    "href": "lectures/drafts/05-slides.html#takeaways-and-tips",
    "title": "Introduction to R: Lecture 5",
    "section": "Takeaways and Tips",
    "text": "Takeaways and Tips\nFollow this approach to move from quick exploration to polished, communicative plots:\n\n\nWhen exploring your data:\n\nStart with simple and plots to get a sense of the distribution and relationships\nFocus on interpretation first, not style\nAsk questions: What stands out? Are there outliers, trends, or surprises? What else do you want to know?\n\n\nOnce you settle on a plot:\n\nRefine the code to improve readability and aesthetics\nAdd styling elements (labels, scales, legends, and themes. etc. as needed)\nUse polished plots for assignments, reports, or presentations\n\n\nTypically, researchers create many exploratory plots and only a few make it to the final report."
  },
  {
    "objectID": "lectures/drafts/05-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/05-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 5",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nPick graph types that match the types of variables in your data\nRead and interpret visualizations\nPracice using ggplot and dplyr"
  },
  {
    "objectID": "lectures/drafts/05-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/05-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 5",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#reminders",
    "href": "lectures/drafts/03-slides.html#reminders",
    "title": "Introduction to R: Lecture 3",
    "section": "Reminders",
    "text": "Reminders\n\nCheck your working directory inside R Workbench (“Project:”) and switch project if necessary\nCheck your R version\n\nR 4.5.1 use this!\nR 4.2.0"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#what-is-a-dataset",
    "href": "lectures/drafts/03-slides.html#what-is-a-dataset",
    "title": "Introduction to R: Lecture 3",
    "section": "What Is a Dataset?",
    "text": "What Is a Dataset?\nImagine you are a data analyst for Ford and have information on ~200 cars. For each car, you know:\n\nHow big the engine is (engine size or displacement, in liters)\nHow many miles it gets on the highway (fuel efficiency, in Miles Per Gallons)\nThe class of the car (e.g., compact, SUV, etc.)\n\nQuestions for you:\n\nWhat do you think a dataset like this might look like?\nWhat is a dataset, anyway?\nWhat does one row represent? What does one column represent?"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#plotting-data",
    "href": "lectures/drafts/03-slides.html#plotting-data",
    "title": "Introduction to R: Lecture 3",
    "section": "Plotting Data",
    "text": "Plotting Data\nImagine you pick two pieces of information (e.g., variables) from this car dataset:\n\nvariable 1: car fuel efficiency on the highway\nvariable 2: car engine size (engine displacement)\n\nYou want to understand the relationship between these two variables visually, so you start by creating a simple scatter plot…"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#our-first-plot-with-ggplot2",
    "href": "lectures/drafts/03-slides.html#our-first-plot-with-ggplot2",
    "title": "Introduction to R: Lecture 3",
    "section": "Our First Plot with ggplot2",
    "text": "Our First Plot with ggplot2\n\nBefore we explain the code to make this plot…\n\nWhat’s on the x-axis? And on the y -axis?\nWhat do you think each dot in this scatterplot represents?\nIf you wanted to pick a car that combines high fuel efficiency on the highway and a large engine size, where would you look on this plot? Are there cars like that here?\nLarger engines tend to have __________ highway MPG efficiency"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#understanding-a-dataset-mpg",
    "href": "lectures/drafts/03-slides.html#understanding-a-dataset-mpg",
    "title": "Introduction to R: Lecture 3",
    "section": "Understanding a Dataset: mpg",
    "text": "Understanding a Dataset: mpg\nOpen R Workbench and use R version 4.5.1\nCopy/paste this code into your R Console and run it for a preview of the mpg dataset:\nlibrary(ggplot2)\ndata(mpg)\nhead(mpg)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#installing-and-loading-packages-in-r",
    "href": "lectures/drafts/03-slides.html#installing-and-loading-packages-in-r",
    "title": "Introduction to R: Lecture 3",
    "section": "Installing and Loading Packages in R",
    "text": "Installing and Loading Packages in R\nTo use external tools like ggplot2, you need to first install and then load the package. A package is a a collection of code, data, and documentation.\nInstall a package. Only once per computer:\ninstall.packages(\"ggplot2\")\nLoad a package. Every time you use it, at the top of the script:\nlibrary(ggplot2)\nIn this course, we’re using RStudio Workbench, where everything is already installed. So you only need to load packages."
  },
  {
    "objectID": "lectures/drafts/03-slides.html#key-dataset-terms",
    "href": "lectures/drafts/03-slides.html#key-dataset-terms",
    "title": "Introduction to R: Lecture 3",
    "section": "Key Dataset Terms",
    "text": "Key Dataset Terms\n\nObservation = each row = one car\n\nVariable = each column = a car property (e.g., displ, hwy, class)\n\ndispl: engine size or displacement, in liters\n\nhwy: fuel efficiency, highway miles per gallon\n\nclass: class or type of car (compact, SUV…)\n\n\nThe mpg dataset has 234 observations (cars, in rows) and 11 variables (properties, in columns)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#code-to-make-our-first-plot-with-ggplot2",
    "href": "lectures/drafts/03-slides.html#code-to-make-our-first-plot-with-ggplot2",
    "title": "Introduction to R: Lecture 3",
    "section": "Code to Make our First Plot with ggplot2",
    "text": "Code to Make our First Plot with ggplot2\n\n\nlibrary(ggplot2)\n\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy))\nWhat this code does:\n\nSets the data: mpg\nMakes a scatterplot: geom_point()\nTells what to put on the axes: aes()\nMaps the variable engine size to x-axis: x = displ\nMaps the variable fuel efficiency to y-axis: y = hwy"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#add-title-and-axes-labels",
    "href": "lectures/drafts/03-slides.html#add-title-and-axes-labels",
    "title": "Introduction to R: Lecture 3",
    "section": "Add Title and Axes Labels",
    "text": "Add Title and Axes Labels\nOur initial plot also had a Title and Axes Labels, that’s the full code to add them (copy/paste it to your Console):\nlibrary(ggplot2)\n\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy)) +\n  labs(title = \"Car Fuel Efficiency on the Highway vs. Car Engine Size\",\n       x = \"Car Engine Size in Liters\",\n       y = \"Car Highway MPG (Fuel Efficiency)\")"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#why-visualize-data",
    "href": "lectures/drafts/03-slides.html#why-visualize-data",
    "title": "Introduction to R: Lecture 3",
    "section": "Why Visualize Data?",
    "text": "Why Visualize Data?\nBefore you run numbers or models, it’s useful to look at the data visually!\n\nGraphs help you spot patterns, relationships, and outliers\nVisualization makes data more understandable and shareable\nYou can explore your questions more quickly"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#practice",
    "href": "lectures/drafts/03-slides.html#practice",
    "title": "Introduction to R: Lecture 3",
    "section": "💻 Practice",
    "text": "💻 Practice\nTeam up with someone, run this code in your Console, and answer the questions:\nlibrary(ggplot2)\ndata(mpg)\n\nggplot(mpg) +\n  geom_point(aes(x = displ, y = hwy, color = class))\n\nWhat do you see? Describe the plot to your partner\nWhat do the first two lines of code do?\nWhat does color = class do?\nReplace the current x variable with the variable cty (city miles per gallons), run the code, and describe the new plot"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#grammar-of-graphics-and-ggplot2",
    "href": "lectures/drafts/03-slides.html#grammar-of-graphics-and-ggplot2",
    "title": "Introduction to R: Lecture 3",
    "section": "Grammar of Graphics and ggplot2",
    "text": "Grammar of Graphics and ggplot2\nWe’ve been creating plots intuitively. Now, let’s learn them formally.\n\nggplot2 is the main R package used for data visualization\nIt’s part of the tidyverse, a collection of packages for data science: https://www.tidyverse.org/\nCreated by Hadley Wickham, who also co-authored your course textbook\nBuilt using the theory called the Grammar of Graphics, a system for creating layered plots"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#grammar-and-grammar-of-graphics",
    "href": "lectures/drafts/03-slides.html#grammar-and-grammar-of-graphics",
    "title": "Introduction to R: Lecture 3",
    "section": "Grammar and “Grammar of Graphics”",
    "text": "Grammar and “Grammar of Graphics”\n\nA grammar is a set of rules (syntax and morphology) that helps us structure a language. It lets us communicate clearly.\n\nApplied to R and ggplot2…\n\nA Grammar of Graphics is a set of rules for building data visualizations. It lets us create many types of plots using the same structure."
  },
  {
    "objectID": "lectures/drafts/03-slides.html#main-components-of-the-grammar-of-graphics",
    "href": "lectures/drafts/03-slides.html#main-components-of-the-grammar-of-graphics",
    "title": "Introduction to R: Lecture 3",
    "section": "Main Components of the Grammar of Graphics",
    "text": "Main Components of the Grammar of Graphics\nThe Grammar of Graphics defines a plot as built from five main parts.\nThese five parts together are called a layer:\n\nDATA: the dataset you are using\nGEOM: the type of plot (e.g., points, bars, lines)\nMAPPING: maps variables to aesthetics like x, y, color, etc. with aes()\nSTAT: whether the data should be transformed (e.g., counted) or not (identity)\nPOSITION: how things are arranged on the plot (e.g., stacked or jittered)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#grammar-of-graphics-code-template",
    "href": "lectures/drafts/03-slides.html#grammar-of-graphics-code-template",
    "title": "Introduction to R: Lecture 3",
    "section": "Grammar of Graphics: Code Template",
    "text": "Grammar of Graphics: Code Template\nLet’s look at how these five parts of a layer show up in ggplot2 code:\n# code template\n\nggplot(data = &lt;DATA&gt;) +\n  &lt;GEOM&gt;(\n    mapping = aes(&lt;MAPPING&gt;),\n    stat = &lt;STAT&gt;,\n    position = &lt;POSITION&gt;\n  )\nYou can also add more elements, like:\n+ &lt;COORDINATE SYSTEM&gt;\n+ &lt;FACET&gt;"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#grammar-of-graphics-code-template-with-the-mpg-dataset",
    "href": "lectures/drafts/03-slides.html#grammar-of-graphics-code-template-with-the-mpg-dataset",
    "title": "Introduction to R: Lecture 3",
    "section": "Grammar of Graphics: Code Template with the mpg Dataset",
    "text": "Grammar of Graphics: Code Template with the mpg Dataset\nNow, fill in this code template using the mpg data and plot it:\n\n\n# code template\n\nggplot(data = &lt;DATA&gt;) +\n  &lt;GEOM&gt;(\n    mapping = aes(&lt;MAPPING&gt;),\n    stat = &lt;STAT&gt;,\n    position = &lt;POSITION&gt;\n  ) +\n  &lt;COORDINATE&gt; +\n  &lt;FACET&gt;\n\n# filled with mpg data\n\nggplot(data = mpg) +\n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#on-coding-style-in-r",
    "href": "lectures/drafts/03-slides.html#on-coding-style-in-r",
    "title": "Introduction to R: Lecture 3",
    "section": "On Coding Style in R",
    "text": "On Coding Style in R\nBefore continuing with the Grammar of Graphics, let’s take a moment to focus on coding style (parenthesis, signs, indentation, variable names, etc.)\nHere’s the same code as before. This time, read it focusing on its style. What do you notice?\nggplot(data = mpg) + \n  geom_point(\n     mapping = aes(x = displ, y = hwy, color = class),\n     stat = \"identity\", \n     position = \"identity\") +\n  coord_cartesian() +\n  facet_wrap(facets = vars(class), nrow = 1)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#coding-style-checklist",
    "href": "lectures/drafts/03-slides.html#coding-style-checklist",
    "title": "Introduction to R: Lecture 3",
    "section": "Coding Style Checklist",
    "text": "Coding Style Checklist\n\nUse &lt;- to assign values to variables\nUse = to assign values to function arguments\nUse descriptive, meaningful variable names (snake_case, lowercase)\nAdd spaces around operators (e.g., +, -, &lt;-) for readability\nAvoid spaces inside parentheses or brackets\nClose every opened parenthesis\nBreak long lines and use indentation\nUse comments, but do not abuse them"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#why-care-about-coding-style",
    "href": "lectures/drafts/03-slides.html#why-care-about-coding-style",
    "title": "Introduction to R: Lecture 3",
    "section": "Why Care About Coding Style?",
    "text": "Why Care About Coding Style?\nResources to guide you:\n\nR for Data Science, Chapter 4\nThe tidyverse style guide\nWhy does coding style matter?"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#make-and-store-a-plot",
    "href": "lectures/drafts/03-slides.html#make-and-store-a-plot",
    "title": "Introduction to R: Lecture 3",
    "section": "Make and Store a Plot",
    "text": "Make and Store a Plot\nThis code makes a plot, but does not store it\n ggplot(data = mpg) +\n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)\nThis code makes a plot and stores it to an object that I named fuel_plot\nfuel_plot &lt;- ggplot(data = mpg) +\n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)\nfuel_plot"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#core-components-of-ggplot2",
    "href": "lectures/drafts/03-slides.html#core-components-of-ggplot2",
    "title": "Introduction to R: Lecture 3",
    "section": "Core Components of ggplot2",
    "text": "Core Components of ggplot2\nYou’ve seen the code template and the big picture. Now we’ll take a closer look at key components:\n\nLayers\n\ndata\nmapping\ngeom\nstat\nposition\n\nCoordinate System\nFacets\nScales (not covered today)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#layers",
    "href": "lectures/drafts/03-slides.html#layers",
    "title": "Introduction to R: Lecture 3",
    "section": "Layers",
    "text": "Layers\nLayers create the visual elements on a plot. Each layer has five parts:\nggplot(data = mpg) + \n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\", \n    position = \"identity\"\n  ) + \n  geom_smooth(\n    mapping = aes(x = displ, y = hwy),\n    method = \"lm\"\n  )"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#data-and-aesthetic-mappings",
    "href": "lectures/drafts/03-slides.html#data-and-aesthetic-mappings",
    "title": "Introduction to R: Lecture 3",
    "section": "Data and Aesthetic Mappings",
    "text": "Data and Aesthetic Mappings\nData:\n\nThe dataset used for the plot\nExample: data = mpg\n\nMapping:\n\nLinks variables to aesthetics (x, y, color, size…)\nExample: aes(x = displ, y = hwy, color = class)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#how-ggplot2-controls-positioning",
    "href": "lectures/drafts/03-slides.html#how-ggplot2-controls-positioning",
    "title": "Introduction to R: Lecture 3",
    "section": "How ggplot2 Controls Positioning",
    "text": "How ggplot2 Controls Positioning\nAdjusts how elements are positioned to avoid overlap.\n\nScatterplot: often position = \"identity\"\nJitter: position = \"jitter\" spreads overlapping points\nBar plot: use \"stack\", \"dodge\", etc.\n\n\n\n\n\n\n\nTip\n\n\nCheck geom_*() documentation to learn supported positions."
  },
  {
    "objectID": "lectures/drafts/03-slides.html#statistical-transformations-in-layers",
    "href": "lectures/drafts/03-slides.html#statistical-transformations-in-layers",
    "title": "Introduction to R: Lecture 3",
    "section": "Statistical Transformations in Layers",
    "text": "Statistical Transformations in Layers\nStat: transforms your data for plotting.\n\nBar charts: geom_bar() uses stat = \"count\" by default\nScatterplots: often use stat = \"identity\"\n\nggplot(data = mpg) + \n  geom_bar(mapping = aes(x = class)) # implicitly counts"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#choosing-the-right-geometric-object",
    "href": "lectures/drafts/03-slides.html#choosing-the-right-geometric-object",
    "title": "Introduction to R: Lecture 3",
    "section": "Choosing the Right Geometric Object",
    "text": "Choosing the Right Geometric Object\nThe geometric object is the type of plot you’re making:\n\ngeom_point() → scatterplot\ngeom_line() → line chart\ngeom_bar() → bar chart\n\nEach geom accepts certain aesthetics. Read the docs: geom_point reference"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#practice-color-aesthetics",
    "href": "lectures/drafts/03-slides.html#practice-color-aesthetics",
    "title": "Introduction to R: Lecture 3",
    "section": "💻 Practice: Color Aesthetics",
    "text": "💻 Practice: Color Aesthetics\nWhich of these three code blocks is correct? Run and compare them in R.\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = class))\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy), color = \"blue\")\n\nggplot(data = mpg) + \n  geom_point(mapping = aes(x = displ, y = hwy, color = \"blue\"))"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#practice-color-aesthetics-1",
    "href": "lectures/drafts/03-slides.html#practice-color-aesthetics-1",
    "title": "Introduction to R: Lecture 3",
    "section": "💻 Practice: Color Aesthetics",
    "text": "💻 Practice: Color Aesthetics\n\n\n✅ Correct\naes(color = class)\nMaps a variable.\n\n✅ Correct\ncolor = \"blue\"\nSets color manually (outside aes).\n\n❌Incorrect\naes(color = \"blue\")\nTries to map a fixed value (the string “blue”). Not useful.\n\n\nSetting vs Mapping in ggplot2\n\nSetting means assigning a fixed value outside aes()\nExample: color = \"blue\" (does not come from the data)\nMapping means linking a variable inside aes()\nExample: aes(color = class) (comes from the data, from a variable)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#common-beginner-mistakes",
    "href": "lectures/drafts/03-slides.html#common-beginner-mistakes",
    "title": "Introduction to R: Lecture 3",
    "section": "Common Beginner Mistakes",
    "text": "Common Beginner Mistakes\n\nPutting fixed values like “blue” inside aes() (e.g., aes(color = \"blue\")\nForgetting to close aes() or geom_() parentheses\nUsing &lt;- inside aes() instead of ="
  },
  {
    "objectID": "lectures/drafts/03-slides.html#coordinate-system-and-faceting",
    "href": "lectures/drafts/03-slides.html#coordinate-system-and-faceting",
    "title": "Introduction to R: Lecture 3",
    "section": "Coordinate System and Faceting",
    "text": "Coordinate System and Faceting\nCoordinate System:\n\nTranslates data into the plot space\nDefault: Cartesian system (coord_cartesian())\n\nFaceting:\n\nSplits data into subplots by a variable\n\nggplot(data = mpg) + \n  geom_point(aes(x = displ, y = hwy, color = class)) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#example-1",
    "href": "lectures/drafts/03-slides.html#example-1",
    "title": "Introduction to R: Lecture 3",
    "section": "Example 1",
    "text": "Example 1\nExample from the previous slides\nLong version:\nggplot(data = mpg) + \n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\", \n    position = \"identity\") + \n  geom_smooth(\n    mapping = aes(x = displ, y = hwy),\n    method = \"lm\")\n\nShort version:\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) + \n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#example-2",
    "href": "lectures/drafts/03-slides.html#example-2",
    "title": "Introduction to R: Lecture 3",
    "section": "Example 2",
    "text": "Example 2\nScatterplot between cars’ engine size (displ) and highway fuel efficiency (hwy)\nLong version:\nggplot() +\n  layer(\n    data = mpg, \n    mapping = aes(x = displ, y = hwy),\n    geom = \"point\", \n    stat = \"identity\", \n    position = \"identity\"\n  ) +\n  scale_y_continuous() +\n  scale_x_continuous() +\n  coord_cartesian()\n\nShort version:\nggplot(data = mpg, aes(x = displ, y = hwy)) +\n  geom_point()"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#defaults-cheat-sheet",
    "href": "lectures/drafts/03-slides.html#defaults-cheat-sheet",
    "title": "Introduction to R: Lecture 3",
    "section": "Defaults Cheat Sheet",
    "text": "Defaults Cheat Sheet\nUse these defaults to simplify code:\n\nstat = \"identity\" for geom_point()\nposition = \"identity\" unless changed\nCommon aes() calls can go in ggplot()\nscale_*_continuous() not needed unless customizing"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#quick-review",
    "href": "lectures/drafts/03-slides.html#quick-review",
    "title": "Introduction to R: Lecture 3",
    "section": "Quick Review",
    "text": "Quick Review\n\nWhat does geom_point() do?\nWhat does stat = \"identity\" mean?\nWhen would you use facet_wrap()?\nWhat’s wrong with aes(color = \"blue\")?\n\nTry answering these without peeking at the slides!"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#practice-gapminder",
    "href": "lectures/drafts/03-slides.html#practice-gapminder",
    "title": "Introduction to R: Lecture 3",
    "section": "💻 Practice: Gapminder",
    "text": "💻 Practice: Gapminder\nDownload today’s in-class materials from the website!\nThe gapminder dataset:\nContains data on various socio-economic indicators for countries around the world over multiple years (1957-2008). It includes information on life expectancy, GDP per capita, and population\nGapminder info: https://cran.r-project.org/web/packages/gapminder/readme/README.html and https://www.gapminder.org/"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/03-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 3",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nCore components of the Grammar of Graphics\nGenerate simple graphs with ggplot2\nUse the Grammar of Graphics template and simplify it with defaults\nR Coding Style Best Practices"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#reminders-1",
    "href": "lectures/drafts/03-slides.html#reminders-1",
    "title": "Introduction to R: Lecture 3",
    "section": "Reminders",
    "text": "Reminders\n\nHomework 1 is due Wednesday, July 2nd\nThere is no class Thursday, July 3rd"
  },
  {
    "objectID": "lectures/drafts/03-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/03-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 3",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#teaching-team",
    "href": "lectures/drafts/01-slides.html#teaching-team",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Teaching Team",
    "text": "Teaching Team"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#teaching-team-1",
    "href": "lectures/drafts/01-slides.html#teaching-team-1",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\nRole\nName\nEmail\nOffice Hours\n\n\n\n\nInstructor\nSabrina Nardin\nnardin@uchicago.edu\nTue & Thu, 2:30–3:30 PM (after class)\n\n\nTeaching Assistant\nZach Meyer\nzmeyer@uchicago.edu\nTue 2:30–3:30 PM (after class)\n\n\nTeaching Assistant\nZixuan Zhou (she/her)\nzixuanzhou@uchicago.edu\nThu 2:30–3:30 PM (after class)\n\n\n\n\n\n\nHow to Reach Out\n\nAsk questions during or after class\nAttend Office Hours\nPost on Ed Discussion course-related questions"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#course-objectives",
    "href": "lectures/drafts/01-slides.html#course-objectives",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Course Objectives",
    "text": "Course Objectives\nThe goal of this course is to acquire basic computational skills. Specifically:\n\nLearning R, especially the “tidyverse”\nLearning best practices for reproducible research\n\n\nYou won’t become an R expert in a few weeks, BUT you will:\n\nlearn the basics and gain confidence to explore new techniques beyond this course\nuse R as a tool for analyzing social science data"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#course-topics",
    "href": "lectures/drafts/01-slides.html#course-topics",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Course Topics",
    "text": "Course Topics\nMain topics of this course:\n\nGit/GitHub via RStudio\nR Markdown\nData Visualization\nData Cleaning and Transformation\nExploratory Data Analysis\nWeb-Scraping\nReproducible Research\nR Programming: Control Structures, Data Structures, etc."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#how-well-do-this",
    "href": "lectures/drafts/01-slides.html#how-well-do-this",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "How We’ll Do This",
    "text": "How We’ll Do This\nWe start simple and build toward more complex code\n\n# create a variable and print it\nx &lt;- \"Hello!\"\nprint(x)\n\n[1] \"Hello!\""
  },
  {
    "objectID": "lectures/drafts/01-slides.html#how-well-do-this-1",
    "href": "lectures/drafts/01-slides.html#how-well-do-this-1",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "How We’ll Do This",
    "text": "How We’ll Do This\nWe use a mix of lectures and in-class activities, and we rely on several platforms (e.g., course website, Canvas, Ed Discussion, Workbench, Git/GitHub, and Markdown).\nAll course materials are free and accessible from our website."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#assessment",
    "href": "lectures/drafts/01-slides.html#assessment",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Assessment",
    "text": "Assessment\nSee “Assessment” section of our Syllabus and the Course Schedule:\n\nAssessment and Evaluation: There will be four take-home assignments, one final project, and two short in-class exams. Check the syllabus for details.\nSubmission Policies: See Syllabus, especially for late or missed assignments.\nEvaluation Philosophy and Rubric\n\nTips:\n\ndo the readings before class, even if you do not understand everything\nstart early to work on the take-home assignments; (starting from the 2nd) they will be a bit challenging, especially if you have never programmed before: they won’t tell you exactly what to do to solve the problem\nread our AI policy\nform a study group, and ask for help if you get stuck"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#software-setup",
    "href": "lectures/drafts/01-slides.html#software-setup",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Software Setup",
    "text": "Software Setup\nIn this course we use RStudio Workbench, which is cloud-based version of RStudio that runs in your browser.\nNext lecture we will learn the basics of Git and GitHub and complete the Software Setup for the course.\nCheck our website under “Software Setup” for details."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#activity-meet-share-goals",
    "href": "lectures/drafts/01-slides.html#activity-meet-share-goals",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Activity: Meet & Share Goals",
    "text": "Activity: Meet & Share Goals\nIn groups of 3-5 people, please share:\n\nYour name, plus something about yourself that you’re comfortable sharing (e.g., a hobby, your experience with programming, etc.)\nWhat you hope to learn or achieve in this course\nAny questions you have, and strategies you plan to use to stay on track (we’ll go around the room and answer questions)\n\n\n\n\n\n\n\n\nDone early?\n\n\nIf your group finishes early, please complete this short survey if you haven’t already. It only takes a minute and helps us better understand your background and what you’re hoping to learn in this course."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#course-expectations",
    "href": "lectures/drafts/01-slides.html#course-expectations",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Course Expectations",
    "text": "Course Expectations\n\nAttend classes and bring a laptop (no cell phones)\nReview in-class materials and complete assigned work\nAsk questions and collaborate\n\n15-minute rule\nResources: AI (but see next slide), Google, StackOverflow, your peers (study group!)\nOffice Hours and Ed Discussion"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#yes-to-collaboration-no-to-copying",
    "href": "lectures/drafts/01-slides.html#yes-to-collaboration-no-to-copying",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Yes to Collaboration, No to Copying",
    "text": "Yes to Collaboration, No to Copying\nResearchers collaborate on projects. Developers work in teams to write programs. AI is becoming part of our daily and academic lives.\n\n→ Collaboration is good and encouraged, but in this course you are also expected to:\n\nComplete your own work individually\nWrite your code and fully understand it\nBe ready to explain your code line-by-line to someone else"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#collaboration-vs.-plagiarism",
    "href": "lectures/drafts/01-slides.html#collaboration-vs.-plagiarism",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Collaboration vs. Plagiarism",
    "text": "Collaboration vs. Plagiarism\n\n\n✅ DO:\n\nDiscuss and debug with peers\nRewrite code found online in your own style and cite the source\nUse AI to debug or clarify concepts after you try yourself\nSubmit code you wrote\nSubmit code you fully understand\nPrioritize methods from class materials and readings\n\n\n🚫 DON’T:\n\nCopy code from your classmaters or others\nSimply copy and paste chunks of code from the internet\nUse AI beyond the AI-Policy of this course\nSubmit code you didn’t write\nSubmit code you can’t explain\nWrite code that"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#tips-from-former-students",
    "href": "lectures/drafts/01-slides.html#tips-from-former-students",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Tips from former students…",
    "text": "Tips from former students…\n\n\n“One of the hardest things for me was remembering where I saw a concept or piece of code.”Advice: Stay organized (e.g., customize slides and notes, and create your own system to retrieve info)!\n\n\n\n\n“Homework took more time and effort than I expected.” Advice: Start early! You don’t need to know everything before you begin: just get started and review the materials as needed. Use pen and paper to write pseudo-code before you start.\n\n\n\n\n“I’m in week 4, and I feel lost.”Advice: Reach out to us! Concepts build over time. The big picture will click IF you stay consistent with your efforts every week.\n\n\n\n\n“I found code that worked but wasn’t covered in class, so I wasn’t sure whether to use it.”Advice: Stick to class syntax and functions — they’re chosen for a reason. But you can show both approaches by comparing the function(s) covered in class with your own."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#what-are-these-tools",
    "href": "lectures/drafts/01-slides.html#what-are-these-tools",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "What Are These Tools?",
    "text": "What Are These Tools?\n\n\n\n\n\n\n\nTool\nWhat It Is\n\n\n\n\nR\nA programming language for data analysis, statistics, and visualization.\n\n\nRStudio\nA user-friendly interface (IDE) for using R.\n\n\nWorkbench\nA cloud-based version of R/RStudio with everything pre-installed. We will use it in this course to minimize setup issues."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#lets-start-by-exploring-our-software",
    "href": "lectures/drafts/01-slides.html#lets-start-by-exploring-our-software",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Let’s start by exploring our Software",
    "text": "Let’s start by exploring our Software\nWorkbench: https://macss-r.uchicago.edu/\n\nLog in\nLook at panels\nHow to export/import files between Workbench and your machine\nCreate an empty R Script"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#getting-started-with-r",
    "href": "lectures/drafts/01-slides.html#getting-started-with-r",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Getting Started with R",
    "text": "Getting Started with R\nToday we learn how to:\n\nCreate and use variables\n\nUnderstand variable types (e.g., number, text, logical, etc.)\n\nWrite comments and organize your code\n\nUse scripts (vs. console) for reproducibility\n\nClear your environment\n\nGroup values using vectors"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#live-coding-activity-to-get-started-with-r",
    "href": "lectures/drafts/01-slides.html#live-coding-activity-to-get-started-with-r",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "💻 Live Coding Activity to get Started with R",
    "text": "💻 Live Coding Activity to get Started with R\nWe learn all of this via a live coding activity:\n\nLog into Workbench https://macss-r.uchicago.edu/\nType along with me as we write and run code together\nStop me anytime if you have questions"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#deep-dive-on-r-markown",
    "href": "lectures/drafts/01-slides.html#deep-dive-on-r-markown",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Deep Dive on R Markown",
    "text": "Deep Dive on R Markown\nR Markdown is a file format (with extension .Rmd) that combines R code, using code chunks, and text in a single document. It’s very popular because it makes it easy to create reproducible reports, analyses, and presentations.\nYou might hear about Quarto (with extension .qmd), which is a newer alternative to R Markdown. We won’t cover Quarto in this course, but if you learn R Markdown, you can quickly adjust to Quarto."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#comparing-r-scripts-r-markdown-and-markdown",
    "href": "lectures/drafts/01-slides.html#comparing-r-scripts-r-markdown-and-markdown",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Comparing R Scripts, R Markdown, and Markdown",
    "text": "Comparing R Scripts, R Markdown, and Markdown\n\n\n\nFile Type\nExtension\nKey Differences\n\n\n\n\nR Script\n.R\nSupports code\n\n\nR Markdown\n.Rmd\nSupports code and formatted text\n\n\nMarkdown\n.md\nSupports formatted text\n\n\n\nWe use all three, but mainly .Rmd for assignments and .md for Git/GitHub documentation."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-three-main-components",
    "href": "lectures/drafts/01-slides.html#r-markdown-three-main-components",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Three Main Components",
    "text": "R Markdown: Three Main Components\n\nYAML header for document title, author, output format, etc. Insert it at the top between ---\nText regular Markdown for headers, lists, links, etc.\nCode chunks for code. Insert it with triple backticks ```\n\n\n\n\n\n\n\n\nCode Chunk Tips\n\n\nThree ways to insert a code chunk in your R Markdown:\n\nUse the RStudio toolbar\n\nType manually ```{r} and ```\nUse a shortcut\n\nMac: ⌘ + ⌥ + I\n\nWindows: Ctrl + Alt + I"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-example",
    "href": "lectures/drafts/01-slides.html#r-markdown-example",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Example",
    "text": "R Markdown: Example\nThis is what we type (YAML, text, code):\n---\ntitle: \"Homework 1\"\nauthor: \"Sabrina Nardin\"\noutput: html_document\n---\n\nI write my homework description here. \nI can format the text in many ways, for example, by bolding **key concepts**.\n\n```{r}\n# create a variable\nx &lt;- 5\n```"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#yaml-yet-another-markup-language",
    "href": "lectures/drafts/01-slides.html#yaml-yet-another-markup-language",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "YAML: Yet Another Markup Language",
    "text": "YAML: Yet Another Markup Language\nThe YAML header sits at the top of your .Rmd and tells R what the document is about and how to display it (e.g., as a html, PDF, Word, etc.). Spacing, indentation, and --- all matters!\nThe example below shows three fields but many more can be added:\n---\ntitle: \"Homework 1\"\nauthor: \"Sabrina Nardin\"\noutput: html_document\n---"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-formatting-text",
    "href": "lectures/drafts/01-slides.html#r-markdown-formatting-text",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Formatting Text",
    "text": "R Markdown: Formatting Text\n\n\nSyntax\n*Italics*  \n**Bold**  \n~~Strikethrough~~  \n`inline code`\n\nOutput\nItalics\nBold\nStrikethrough\ninline code"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-unordered-lists",
    "href": "lectures/drafts/01-slides.html#r-markdown-unordered-lists",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Unordered Lists",
    "text": "R Markdown: Unordered Lists\n\n\nSyntax\n+ item 1  \n  + sub  \n  + sub  \n- item 2  \n  - sub  \n  - sub  \n+ item 3  \n  - sub  \n  * sub  \n\nOutput\n\nitem 1\n\nsub\nsub\n\nitem 2\n\nsub\nsub\n\nitem 3\n\nsub\nsub"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-ordered-lists",
    "href": "lectures/drafts/01-slides.html#r-markdown-ordered-lists",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Ordered Lists",
    "text": "R Markdown: Ordered Lists\n\n\nSyntax\n1. item 1  \n    + sub  \n      + sub  \n    + sub  \n\n1. item 2  \n    * sub  \n      * sub  \n    * sub  \n\n1. item 3  \n    - sub  \n\nOutput\n\nitem 1\n\nsub\n\nsub\n\n\nsub\n\nitem 2\n\nsub\n\nsub\n\n\nsub\n\nitem 3\n\nsub"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-formatting-headers",
    "href": "lectures/drafts/01-slides.html#r-markdown-formatting-headers",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Formatting Headers",
    "text": "R Markdown: Formatting Headers\n# Heading 1  \n## Heading 2  \n### Heading 3  \n\nHeading 1\n\n\nHeading 2\n\n\nHeading 3"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#using-in-code-vs.-markdown-text",
    "href": "lectures/drafts/01-slides.html#using-in-code-vs.-markdown-text",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Using # in Code vs. Markdown Text",
    "text": "Using # in Code vs. Markdown Text\n\n\nIn Code\n# Assign number to variable\nx &lt;- 5 \n# Assign text to variable\nname &lt;- \"Sabrina\"\n\n# starts a COMMENT in R Scripts and R Markdown Code Chunks\nComments are ignored when the code runs\nUse one single # for code explanations or debugging, space doesn’t matter\n\n\nIn R Markdown Text\n# Title (h1)\n## Section (h2)\n### Subsection (h3)\n#### More Subsections (h4)\n\n# creates a HEADER in Markdown or R Markdown Text\nThe number of # signs = heading level\nUse as many # as needed for organizing document sections, space matters"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-insert-links-images-and-tables",
    "href": "lectures/drafts/01-slides.html#r-markdown-insert-links-images-and-tables",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Insert Links, Images, and Tables",
    "text": "R Markdown: Insert Links, Images, and Tables\n\n\n\nElement\nSyntax Example\nNotes\nPreview\n\n\n\n\nLink\n[RStudio](https://www.rstudio.com/)\nText in [], URL in ()\nLink\n\n\nImage\n![Logo](images/logo.png \"Optional title\")\nStart with !, include optional \"title\"\nImage\n\n\nTable\n| Tool    | Use     ||---------|---------|| R       | Stats   |\nUse | for columns and --- for header\nTable\n\n\n\nNote:\n\nSpacing always matters\nFor images to display, the file (e.g., .png, .jpg) must be saved in your current working dir or project folder"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-handy-code-chunk-options",
    "href": "lectures/drafts/01-slides.html#r-markdown-handy-code-chunk-options",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Handy Code Chunk Options",
    "text": "R Markdown: Handy Code Chunk Options\n\n\n\n\n\n\n\n\n\nOption\nWhat it does\nDefault\n\n\n\n\neval = FALSE\nCode is not run, only shown; results do not appear. Useful for code examples or showing code with errors.\neval = TRUE\n\n\ninclude = FALSE\nCode is run, but both code and results are hidden. Useful for setup code you don’t want to display.\ninclude = TRUE\n\n\necho = FALSE\nCode is run, results are shown, but code is hidden. Good when readers only need the output.\necho = TRUE\n\n\nerror = TRUE\nCode is run and shown, even if it throws an error. Useful when demonstrating broken code.\nerror = FALSE\n\n\nmessage = FALSE / warning = FALSE\nCode is run, but messages and warnings are hidden from the output.\nmessage = TRUE / warning = TRUE\n\n\n\n\nCheck this table and options for more."
  },
  {
    "objectID": "lectures/drafts/01-slides.html#rendering-r-markdown-documents",
    "href": "lectures/drafts/01-slides.html#rendering-r-markdown-documents",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Rendering R Markdown Documents",
    "text": "Rendering R Markdown Documents\nR Markdown lets you create documents that combine text, code, and output, and “render” or “knit” them in formats like html, pdf, word, and more.\n\n\n\n\n\n\n\nRendering Tips\n\n\nThree ways to render your R Markdown document:\n\nClick “Knit” in RStudio and choose an output\nSet the format in the YAML header such as html_document,word_document, pdf_document, github_document, etc.\nUse render() in your console by typing rmarkdown::render(\"my-document.Rmd\", output_format: html_document). More info here"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#r-markdown-knitting-process",
    "href": "lectures/drafts/01-slides.html#r-markdown-knitting-process",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Knitting process",
    "text": "R Markdown: Knitting process\nWhen you “knit” your document, the following sequential things happen:\n\nR Markdown sends the .Rmd file to knitr http://yihui.name/knitr/\nKnitr executes all of the code chunks and creates a new plain Markdown .md file which includes the code and its output\nThis plain Markdown file is then converted by pandoc into any number of output types including html, PDF, Word document, etc.: http://pandoc.org/"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#practice-r-markdown-syntax",
    "href": "lectures/drafts/01-slides.html#practice-r-markdown-syntax",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "💻 Practice R Markdown Syntax",
    "text": "💻 Practice R Markdown Syntax\n\nLog into Workbench https://macss-r.uchicago.edu/\nDownload today’s code from Lecture 1 on our website\nComplete the R Markdown in-class practice\nWant more? Try this interactive tutorial"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/01-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nFamiliarized with Workbench\nWrote simple R code\nKey components of R Markdown\nHow to run and render R Markdown Documents"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#reminders",
    "href": "lectures/drafts/01-slides.html#reminders",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Reminders",
    "text": "Reminders\n\nRegister for a GitHub account and share your GitHub username with us (see Lecture 1 on our website for details)\nReview today’s materials to prep for the short quiz at the beginning of next class\nCheck Lecture 2 homepage"
  },
  {
    "objectID": "lectures/drafts/01-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/01-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/18-home.html",
    "href": "lectures/18-home.html",
    "title": "Lecture 18: Exam 2; Final Project Check-In",
    "section": "",
    "text": "Date: December 3, 2025\nTopics: Exam 2; Final Project Check-In\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/18-home.html#info-and-materials",
    "href": "lectures/18-home.html#info-and-materials",
    "title": "Lecture 18: Exam 2; Final Project Check-In",
    "section": "",
    "text": "Date: December 3, 2025\nTopics: Exam 2; Final Project Check-In\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/18-home.html#learning-objectives",
    "href": "lectures/18-home.html#learning-objectives",
    "title": "Lecture 18: Exam 2; Final Project Check-In",
    "section": "Learning Objectives",
    "text": "Learning Objectives"
  },
  {
    "objectID": "lectures/18-home.html#readings",
    "href": "lectures/18-home.html#readings",
    "title": "Lecture 18: Exam 2; Final Project Check-In",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "lectures/17-home.html",
    "href": "lectures/17-home.html",
    "title": "Lecture 17: Reproducible Workflow, Final Project Check-In",
    "section": "",
    "text": "Date: December 1, 2025\nTopics: Reproducible Workflow, Final Project Check-In\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/17-home.html#info-and-materials",
    "href": "lectures/17-home.html#info-and-materials",
    "title": "Lecture 17: Reproducible Workflow, Final Project Check-In",
    "section": "",
    "text": "Date: December 1, 2025\nTopics: Reproducible Workflow, Final Project Check-In\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/17-home.html#learning-objectives",
    "href": "lectures/17-home.html#learning-objectives",
    "title": "Lecture 17: Reproducible Workflow, Final Project Check-In",
    "section": "Learning Objectives",
    "text": "Learning Objectives"
  },
  {
    "objectID": "lectures/17-home.html#readings",
    "href": "lectures/17-home.html#readings",
    "title": "Lecture 17: Reproducible Workflow, Final Project Check-In",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "lectures/16-home.html",
    "href": "lectures/16-home.html",
    "title": "Lecture 16: Web-Scraping 2",
    "section": "",
    "text": "Date: November 19, 2025\nTopics: Web-Scraping 2\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/16-home.html#info-and-materials",
    "href": "lectures/16-home.html#info-and-materials",
    "title": "Lecture 16: Web-Scraping 2",
    "section": "",
    "text": "Date: November 19, 2025\nTopics: Web-Scraping 2\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/16-home.html#learning-objectives",
    "href": "lectures/16-home.html#learning-objectives",
    "title": "Lecture 16: Web-Scraping 2",
    "section": "Learning Objectives",
    "text": "Learning Objectives"
  },
  {
    "objectID": "lectures/16-home.html#readings",
    "href": "lectures/16-home.html#readings",
    "title": "Lecture 16: Web-Scraping 2",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "lectures/15-home.html",
    "href": "lectures/15-home.html",
    "title": "Lecture 15: Web-Scraping 1",
    "section": "",
    "text": "Date: November 17, 2025\nTopics: Web-Scraping 1\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/15-home.html#info-and-materials",
    "href": "lectures/15-home.html#info-and-materials",
    "title": "Lecture 15: Web-Scraping 1",
    "section": "",
    "text": "Date: November 17, 2025\nTopics: Web-Scraping 1\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/15-home.html#learning-objectives",
    "href": "lectures/15-home.html#learning-objectives",
    "title": "Lecture 15: Web-Scraping 1",
    "section": "Learning Objectives",
    "text": "Learning Objectives"
  },
  {
    "objectID": "lectures/15-home.html#readings",
    "href": "lectures/15-home.html#readings",
    "title": "Lecture 15: Web-Scraping 1",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "lectures/14-home.html",
    "href": "lectures/14-home.html",
    "title": "Lecture 14: Functions 2, Debugging",
    "section": "",
    "text": "Date: November 12, 2025\nTopics: Functions 2, Debugging\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/14-home.html#info-and-materials",
    "href": "lectures/14-home.html#info-and-materials",
    "title": "Lecture 14: Functions 2, Debugging",
    "section": "",
    "text": "Date: November 12, 2025\nTopics: Functions 2, Debugging\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/14-home.html#learning-objectives",
    "href": "lectures/14-home.html#learning-objectives",
    "title": "Lecture 14: Functions 2, Debugging",
    "section": "Learning Objectives",
    "text": "Learning Objectives"
  },
  {
    "objectID": "lectures/14-home.html#readings",
    "href": "lectures/14-home.html#readings",
    "title": "Lecture 14: Functions 2, Debugging",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "lectures/13-home.html",
    "href": "lectures/13-home.html",
    "title": "Lecture 13: Functions 1",
    "section": "",
    "text": "Date: November 10, 2025\nTopics: Functions 1\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/13-home.html#info-and-materials",
    "href": "lectures/13-home.html#info-and-materials",
    "title": "Lecture 13: Functions 1",
    "section": "",
    "text": "Date: November 10, 2025\nTopics: Functions 1\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/13-home.html#learning-objectives",
    "href": "lectures/13-home.html#learning-objectives",
    "title": "Lecture 13: Functions 1",
    "section": "Learning Objectives",
    "text": "Learning Objectives"
  },
  {
    "objectID": "lectures/13-home.html#readings",
    "href": "lectures/13-home.html#readings",
    "title": "Lecture 13: Functions 1",
    "section": "Readings",
    "text": "Readings"
  },
  {
    "objectID": "lectures/12-home.html",
    "href": "lectures/12-home.html",
    "title": "Lecture 12: Control Flow 2",
    "section": "",
    "text": "Date: November 5, 2025\nTopics: Writing Loops\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/12-home.html#info-and-materials",
    "href": "lectures/12-home.html#info-and-materials",
    "title": "Lecture 12: Control Flow 2",
    "section": "",
    "text": "Date: November 5, 2025\nTopics: Writing Loops\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/12-home.html#learning-objectives",
    "href": "lectures/12-home.html#learning-objectives",
    "title": "Lecture 12: Control Flow 2",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand how for loops work\nLearn how to track and save results during a loop (e.g., running totals)\nRecognize the difference between looping over indexes and over elements\nIdentify and apply alternatives to for loops in R, such as map(), across(), and apply()\nUnderstand when and how to use while loops for condition-based iteration"
  },
  {
    "objectID": "lectures/12-home.html#readings",
    "href": "lectures/12-home.html#readings",
    "title": "Lecture 12: Control Flow 2",
    "section": "Readings",
    "text": "Readings\n\n“Chapter 26 Iteration” from “R for Data Science” 2nd Edition"
  },
  {
    "objectID": "lectures/11-home.html",
    "href": "lectures/11-home.html",
    "title": "Lecture 11: Control Flow 1",
    "section": "",
    "text": "Date: November 3, 2025\nTopics: Writing conditionals with if, else, and else if\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/if-else\")"
  },
  {
    "objectID": "lectures/11-home.html#info-and-materials",
    "href": "lectures/11-home.html#info-and-materials",
    "title": "Lecture 11: Control Flow 1",
    "section": "",
    "text": "Date: November 3, 2025\nTopics: Writing conditionals with if, else, and else if\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/if-else\")"
  },
  {
    "objectID": "lectures/11-home.html#learning-objectives",
    "href": "lectures/11-home.html#learning-objectives",
    "title": "Lecture 11: Control Flow 1",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDefine what control structures are and why they matter\nIntroduce one type of control structure: conditional statements\nPractice using conditional statements in R"
  },
  {
    "objectID": "lectures/11-home.html#readings",
    "href": "lectures/11-home.html#readings",
    "title": "Lecture 11: Control Flow 1",
    "section": "Readings",
    "text": "Readings\n\nChapter 13 “Control Structures” in “R programming for Data Science” (Notice this is not our regular book!)"
  },
  {
    "objectID": "lectures/10-home.html",
    "href": "lectures/10-home.html",
    "title": "Lecture 10: Data Structures, Base R",
    "section": "",
    "text": "Date: October 29, 2025\nTopics: Intro to Data Structures, Data Types, and Base R\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/subsetting\")"
  },
  {
    "objectID": "lectures/10-home.html#info-and-materials",
    "href": "lectures/10-home.html#info-and-materials",
    "title": "Lecture 10: Data Structures, Base R",
    "section": "",
    "text": "Date: October 29, 2025\nTopics: Intro to Data Structures, Data Types, and Base R\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/subsetting\")"
  },
  {
    "objectID": "lectures/10-home.html#learning-objectives",
    "href": "lectures/10-home.html#learning-objectives",
    "title": "Lecture 10: Data Structures, Base R",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand what Base R is, and how it differs from the Tidyverse\nIdentify R data types and structures\n\nExplore R vectors\nSubset data using Base R syntax"
  },
  {
    "objectID": "lectures/10-home.html#readings",
    "href": "lectures/10-home.html#readings",
    "title": "Lecture 10: Data Structures, Base R",
    "section": "Readings",
    "text": "Readings\n\nChapter 20 “Vectors” in “R for Data Science” 1st Edition. I assigned the 1st Edition because I find it a bit clearer on this topic than the 2nd Edition, but you might want to take a look also at Chapter 12 “Logical Vectors” and Chapter 13 “Numbers” of the 2nd Edition and decide what you prefer. Either works!\nChapter 27 “A field guide to base R” in “R for Data Science” 2nd Edition."
  },
  {
    "objectID": "lectures/09-home.html",
    "href": "lectures/09-home.html",
    "title": "Lecture 9: Exam 1; Strings and Regular Expressions",
    "section": "",
    "text": "Date: October 27, 2025\nTopics: Exam 1; Strings and Regular Expressions\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/regular-expr\")"
  },
  {
    "objectID": "lectures/09-home.html#info-and-materials",
    "href": "lectures/09-home.html#info-and-materials",
    "title": "Lecture 9: Exam 1; Strings and Regular Expressions",
    "section": "",
    "text": "Date: October 27, 2025\nTopics: Exam 1; Strings and Regular Expressions\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/regular-expr\")"
  },
  {
    "objectID": "lectures/09-home.html#learning-objectives",
    "href": "lectures/09-home.html#learning-objectives",
    "title": "Lecture 9: Exam 1; Strings and Regular Expressions",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDefine Strings, Regular Expressions, and their uses\nIntroduce stringr()\nPractice using Regular Expressions in R to extract info from strings"
  },
  {
    "objectID": "lectures/09-home.html#readings",
    "href": "lectures/09-home.html#readings",
    "title": "Lecture 9: Exam 1; Strings and Regular Expressions",
    "section": "Readings",
    "text": "Readings\n\nChapter 14 “Strings” in “R for Data Science” 2nd Edition (read it all, especially 14.4 “Extracting data from strings”)\nChapter 17 from R Programming for Data Science. Focus on the stringr() section — that’s all we cover in class, but the full chapter is a good reference if you want to explore more\nstringr() documentation and cheatsheet"
  },
  {
    "objectID": "lectures/08-home.html",
    "href": "lectures/08-home.html",
    "title": "Lecture 8: Tidydata, Lubridate",
    "section": "",
    "text": "Date: October 22, 2025\nTopics: Intro to Tidydata and Lubridate\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/tidydata\")"
  },
  {
    "objectID": "lectures/08-home.html#info-and-materials",
    "href": "lectures/08-home.html#info-and-materials",
    "title": "Lecture 8: Tidydata, Lubridate",
    "section": "",
    "text": "Date: October 22, 2025\nTopics: Intro to Tidydata and Lubridate\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/tidydata\")"
  },
  {
    "objectID": "lectures/08-home.html#learning-objectives",
    "href": "lectures/08-home.html#learning-objectives",
    "title": "Lecture 8: Tidydata, Lubridate",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nDefine the concept of tidy data and its characteristics\nPractice tidying data with tidyr\nIntroduce lubridate to manipulate dates in R"
  },
  {
    "objectID": "lectures/08-home.html#readings",
    "href": "lectures/08-home.html#readings",
    "title": "Lecture 8: Tidydata, Lubridate",
    "section": "Readings",
    "text": "Readings\n\n“Chapter 5 Data tidying” from “R for Data Science” 2nd Edition\ntidyr Documentation\ntidyr Cheat Sheet\n“Chapter 17 Dates and times” from “R for Data Science” 2nd Edition"
  },
  {
    "objectID": "lectures/07-home.html",
    "href": "lectures/07-home.html",
    "title": "Lecture 7: Data Cleaning, Importing Data, Relational Data",
    "section": "",
    "text": "Date: October 20, 2025\nTopics: Data Cleaning, Importing Data, Relational Data\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/relational-data\")"
  },
  {
    "objectID": "lectures/07-home.html#info-and-materials",
    "href": "lectures/07-home.html#info-and-materials",
    "title": "Lecture 7: Data Cleaning, Importing Data, Relational Data",
    "section": "",
    "text": "Date: October 20, 2025\nTopics: Data Cleaning, Importing Data, Relational Data\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/relational-data\")"
  },
  {
    "objectID": "lectures/07-home.html#learning-objectives",
    "href": "lectures/07-home.html#learning-objectives",
    "title": "Lecture 7: Data Cleaning, Importing Data, Relational Data",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nRename and recode variables using rename(), recode(), and case_when()\nIdentify syntactic vs. non-syntactic variable names and handle them correctly\nDetect, handle, and clean explicit missing data using common tools\nImporting and Exporting data in R\nManage relational data with dplyr (e.g., linking and merging related tables)"
  },
  {
    "objectID": "lectures/07-home.html#readings",
    "href": "lectures/07-home.html#readings",
    "title": "Lecture 7: Data Cleaning, Importing Data, Relational Data",
    "section": "Readings",
    "text": "Readings\n\nImporting data: “Chapter 7 Data import” from “R for Data Science” 2nd Edition and readr Documentation\nMissing data: “Chapter 18 Missing values” from “R for Data Science” 2nd Edition\nRelational data: “Chapter 19 Joins” from “R for Data Science” 2nd Edition"
  },
  {
    "objectID": "lectures/06-home.html",
    "href": "lectures/06-home.html",
    "title": "Lecture 6: More dplyr, Factors",
    "section": "",
    "text": "Date: October 15, 2025\nTopics: Deep Dive into dplyr, Using Factors in R\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/factors-more-dplyr\")"
  },
  {
    "objectID": "lectures/06-home.html#info-and-materials",
    "href": "lectures/06-home.html#info-and-materials",
    "title": "Lecture 6: More dplyr, Factors",
    "section": "",
    "text": "Date: October 15, 2025\nTopics: Deep Dive into dplyr, Using Factors in R\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/factors-more-dplyr\")"
  },
  {
    "objectID": "lectures/06-home.html#learning-objectives",
    "href": "lectures/06-home.html#learning-objectives",
    "title": "Lecture 6: More dplyr, Factors",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand what factors are in R and how to use them effectively\nStrengthen and expand your ability to manipulate data using dplyr functions (“verbs”)"
  },
  {
    "objectID": "lectures/06-home.html#readings",
    "href": "lectures/06-home.html#readings",
    "title": "Lecture 6: More dplyr, Factors",
    "section": "Readings",
    "text": "Readings\n\n“Chapter 16 Factors” from “R for Data Science” 2nd Edition\n“Chapter 3 Data Transformation” from “R for Data Science” 2nd Edition (This is the same Chapter from Lecture 4)"
  },
  {
    "objectID": "lectures/05-home.html",
    "href": "lectures/05-home.html",
    "title": "Lecture 5: Intro to dplyr, Pipes",
    "section": "",
    "text": "Date: October 13, 2025\nTopics: Wrangling Data with dplyr, Using R Pipes\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/dplyr-pipes\")"
  },
  {
    "objectID": "lectures/05-home.html#info-and-materials",
    "href": "lectures/05-home.html#info-and-materials",
    "title": "Lecture 5: Intro to dplyr, Pipes",
    "section": "",
    "text": "Date: October 13, 2025\nTopics: Wrangling Data with dplyr, Using R Pipes\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/dplyr-pipes\")"
  },
  {
    "objectID": "lectures/05-home.html#learning-objectives",
    "href": "lectures/05-home.html#learning-objectives",
    "title": "Lecture 5: Intro to dplyr, Pipes",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nApproach coding tasks as problem-solving by thinking through the steps before writing code\nUnderstand R logical operators\nApply key dplyr functions such as filter(), group_by(), and summarize()\nChain commands using the pipe |&gt; and recognize mistakes to avoid"
  },
  {
    "objectID": "lectures/05-home.html#readings",
    "href": "lectures/05-home.html#readings",
    "title": "Lecture 5: Intro to dplyr, Pipes",
    "section": "Readings",
    "text": "Readings\n\n“Chapter 3 Data transformation” from “R for Data Science” 2nd Edition\n\nAdditional Resources:\n\ndplyr Cheat Sheet\ndplyr Official Documentation"
  },
  {
    "objectID": "lectures/04-home.html",
    "href": "lectures/04-home.html",
    "title": "Lecture 4: Graphs for Data Analysis",
    "section": "",
    "text": "Date: October 8, 2025\nTopics: Data Analysis and Graphs\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/eda\")"
  },
  {
    "objectID": "lectures/04-home.html#info-and-materials",
    "href": "lectures/04-home.html#info-and-materials",
    "title": "Lecture 4: Graphs for Data Analysis",
    "section": "",
    "text": "Date: October 8, 2025\nTopics: Data Analysis and Graphs\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/eda\")"
  },
  {
    "objectID": "lectures/04-home.html#learning-objectives",
    "href": "lectures/04-home.html#learning-objectives",
    "title": "Lecture 4: Graphs for Data Analysis",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nPractice using ggplot2 to explore (see Ch.10 below) and communicate data (see Ch.11 below) with graphs\nIdentify best graph types (e.g., bar chart vs. histogram) based on variable types (e.g., categorical vs. numeric)\nInterpret what a graph shows about the data"
  },
  {
    "objectID": "lectures/04-home.html#readings",
    "href": "lectures/04-home.html#readings",
    "title": "Lecture 4: Graphs for Data Analysis",
    "section": "Readings",
    "text": "Readings\n\n“Chapter 10 Exploratory Data Analysis” from “R for Data Science” 2nd Edition\n“Chapter 11 Communication” from “R for Data Science” 2nd Edition\n\nFor additional resources and intro to ggplot2 readings, see Lecture 3"
  },
  {
    "objectID": "lectures/03-home.html",
    "href": "lectures/03-home.html",
    "title": "Lecture 3: Intro to ggplot2, Coding Style",
    "section": "",
    "text": "Date: October 6, 2025\nTopics: Visualizing Data with ggplot2, Coding Style in R\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/ggplot2\")"
  },
  {
    "objectID": "lectures/03-home.html#info-and-materials",
    "href": "lectures/03-home.html#info-and-materials",
    "title": "Lecture 3: Intro to ggplot2, Coding Style",
    "section": "",
    "text": "Date: October 6, 2025\nTopics: Visualizing Data with ggplot2, Coding Style in R\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/ggplot2\")"
  },
  {
    "objectID": "lectures/03-home.html#learning-objectives",
    "href": "lectures/03-home.html#learning-objectives",
    "title": "Lecture 3: Intro to ggplot2, Coding Style",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nRecognize the role of visualization in exploring and communicating data\nUnderstand the basic principles of the “Layered Grammar of Graphics”\nCreate simple layered plots using ggplot2\nApply correct coding style practices when writing R code"
  },
  {
    "objectID": "lectures/03-home.html#readings",
    "href": "lectures/03-home.html#readings",
    "title": "Lecture 3: Intro to ggplot2, Coding Style",
    "section": "Readings",
    "text": "Readings\n\nChapter 1 “Data Visualization” from “R for Data Science” 2nd Edition\nChapter 9 “Layers” from “R for Data Science” 2nd Edition\nChapter 4 “Workflow: Code Style” from “R for Data Science” 2nd Edition\n\nAdditional Resources:\n\nggplot2 Cheat Sheet\nggplot2 Official Documentation\nggplot2: Elegant Graphics for Data Analysis, 2nd Edition by Hadley Wickham, for more on ggplot2\nA Layered Grammar of Graphics by Hadley Wickham, for a theoretical introduction to the grammar of graphics\nR Graphics Cookbook, 2nd edition by Winston Chang, for practical guide with 150 examples to generate graphs\n“The tidyverse style guide”"
  },
  {
    "objectID": "lectures/02-home.html",
    "href": "lectures/02-home.html",
    "title": "Lecture 2: Git and GitHub",
    "section": "",
    "text": "Date: October 1, 2025\nTopics: Intro to Git and GitHub with RStudio\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/02-home.html#info-and-materials",
    "href": "lectures/02-home.html#info-and-materials",
    "title": "Lecture 2: Git and GitHub",
    "section": "",
    "text": "Date: October 1, 2025\nTopics: Intro to Git and GitHub with RStudio\nSlides: View Slides\nCode: No in-class code to download"
  },
  {
    "objectID": "lectures/02-home.html#learning-objectives",
    "href": "lectures/02-home.html#learning-objectives",
    "title": "Lecture 2: Git and GitHub",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nUnderstand what Git is and why it’s useful\nCreate a Git repository in RStudio\nConnect your Git repository to GitHub\nPractice staging, committing, and pushing changes"
  },
  {
    "objectID": "lectures/02-home.html#before-class",
    "href": "lectures/02-home.html#before-class",
    "title": "Lecture 2: Git and GitHub",
    "section": "Before Class",
    "text": "Before Class\n\nComplete the Lecture 1 “Before Class” activities, if you haven’t already\nReview Lecture 1 materials\nOptional: Read the Software Setup page. We’ll go through this together in class today"
  },
  {
    "objectID": "lectures/02-home.html#readings",
    "href": "lectures/02-home.html#readings",
    "title": "Lecture 2: Git and GitHub",
    "section": "Readings",
    "text": "Readings\n\nChapter 1 of Happy Git and GitHub for the useR"
  },
  {
    "objectID": "lectures/01-home.html",
    "href": "lectures/01-home.html",
    "title": "Lecture 1: Course Logistics, R, Markdown",
    "section": "",
    "text": "Date: September 29, 2025\nTopics: Course Logistics, R, Markdown\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/r-markdown\")"
  },
  {
    "objectID": "lectures/01-home.html#info-and-materials",
    "href": "lectures/01-home.html#info-and-materials",
    "title": "Lecture 1: Course Logistics, R, Markdown",
    "section": "",
    "text": "Date: September 29, 2025\nTopics: Course Logistics, R, Markdown\nSlides: View Slides\nCode: usethis::use_course(\"css-materials/r-markdown\")"
  },
  {
    "objectID": "lectures/01-home.html#learning-objectives",
    "href": "lectures/01-home.html#learning-objectives",
    "title": "Lecture 1: Course Logistics, R, Markdown",
    "section": "Learning Objectives",
    "text": "Learning Objectives\n\nRecognize the basic features of the R programming language and RStudio\nWrite and run simple R code\nDescribe what R Markdown is and why it’s useful\nCreate and edit an R Markdown document"
  },
  {
    "objectID": "lectures/01-home.html#before-class",
    "href": "lectures/01-home.html#before-class",
    "title": "Lecture 1: Course Logistics, R, Markdown",
    "section": "Before Class",
    "text": "Before Class\n\nGo to https://github.com and follow the instructions to create a free GitHub account. Choose a professional username (see these tips for guidance)\nOnce you have created a GitHub account submit your GitHub username here\nComplete this short survey\nBring your laptop to every class"
  },
  {
    "objectID": "lectures/01-home.html#readings",
    "href": "lectures/01-home.html#readings",
    "title": "Lecture 1: Course Logistics, R, Markdown",
    "section": "Readings",
    "text": "Readings\nSkim the readings before or after class to get the big picture, review them for the assignments and exams:\n\nR Markdown, R4DS\nR Markdown Cheatsheet"
  },
  {
    "objectID": "hw/index.html",
    "href": "hw/index.html",
    "title": "Computing for the Social Sciences",
    "section": "",
    "text": "Homework Assignments Fall 2025\n\n\n\nHomework assignments (four in total) and the final project will be accessible from here once the assignment is released — check our Course Schedule for release and due dates.\n\nHomework 1\nHomework 2\nHomework 3\n\n\nRefer to the Syllabus for assessment policies, including guidelines on late or missing submissions, grading rubric, AI policies, and more."
  },
  {
    "objectID": "hw/hw02.html",
    "href": "hw/hw02.html",
    "title": "HW02: Mass Shootings in America",
    "section": "",
    "text": "Overview\n\nDue: Thursday, October 23 Friday, October 24 by 11:59 PM (Chicago Time)\n\nIn the first assignment you have demonstrated knowledge of your software setup, Git/GitHub via RStudio, and R Markdown. The goal of this second assignment is to practice transforming and exploring data with dplyr and ggplot2.\n\n\nAccessing and Cloning Your hw02 Repository\n\n\n\n\n\n\nImportant\n\n\n\nThis will work only if you have submitted your GitHub username (see Lecture 1) and accepted the email invitation to join our GitHub organization (check the email linked to your GitHub account). Make sure you’ve completed the setup under Software Setup and confirmed everything is working properly.\n\n\nAccessing the repo:\n\nGo at this link to accept the invitation and create your private hw02 repository on GitHub. Your repository will be named hw02-&lt;USERNAME&gt; and will be ready within a few seconds. If this does not work, see the note in red above.\nOnce the repository has been created, click the link provided to access it.\n\nCloning the repo into your Workbench:\n\nLog into Workbench and start a new project:\nFile &gt; New Project &gt; Version Control &gt; Git\nIn the Repository URL field:\n\nPaste the URL of your GitHub repository. To find the URL, go to your hw02 repo on GitHub, click the green Code button, and copy the SSH or HTTPS link (use the method you configured during setup: Workbench users must select SSH).\nThe project name should auto-fill. If not, type hw02-&lt;USERNAME&gt; manually.\n\nChoose where to save the project directory locally. Tip: Avoid moving folders after cloning them.\nCheck the box “Open in new session” (recommended for keeping projects separate and organized)\nClick Create Project. This will:\n\nCreate a new folder on your machine\n\nInitialize a Git repository linked to GitHub\n\nOpen an RStudio Project in a new session\n\n\n\n\nGeneral Homework Workflow\nSee Homework 1 for details. The workflow is the same for all assignments (e.g., accept the repo, edit the files, save, then Pull – Stage – Commit – Push).\n\n\nAssignment Description\n\nThe mass shooting dataset\nThe United States experiences far more mass shooting events than any other developed country in the world. Policymakers, politicians, the media, activists, and the general public acknowledge the widespread prevalence of these events. However, effective policies to prevent such incidents should be grounded in empirical data.\nIn July 2012, in the aftermath of a mass shooting in a movie theater in Aurora, Colorado, Mother Jones published a report on mass shootings in the United States since 1982. Importantly, they provided the underlying data set as an open-source database for anyone interested in studying and understanding the topic.\nThis dataset is already installed on Workbench.\n\n\n\nAnswer the questions\nYour repository includes specific and open-ended questions. Answer all of them.\n\n\n\n\n\n\nNote\n\n\n\n\nThe questions—especially the open-ended ones—are designed to help you think like a programmer and data analyst. They won’t walk you through every step but encourage you to apply what you’ve learned and work independently. Translating what a question asks into code by breaking it down in smaller pieces is one important learning goal of this exercise\nThis homework is designed to be completed over multiple sessions. Start early, and remember to save, commit, and push your work regularly.\nDo not use AI tools to generate R code from scratch or think for you. You may use it to debug (after trying on your own) or look up how functions work (check course materials first). Only submit code you fully understand. Reach out if you have questions, we are here to help!\n\n\n\n\n\n\nFormatting Guide\n\nFormatting graphs\nYour final graphs should be appropriate for sharing with outsiders. That means your graphs should have:\n\nA title\nLabels on the axes (type ?labs in your Console for details)\nConsider adopting your own color scales, taking control of your legends (if any), playing around with themes, and generally customizing your graphs to improve their visual appeal and clarity.\n\n\n\nFormatting tables\nWhen presenting tabular data, consider using the kable() function from the knitr package to format the table for the final document. Here is how you use this function.\nThe code below displays a basic table summarizing where gun deaths occurred:\n\n# calculate total gun deaths by location\ncount(mass_shootings, location_type)\n\n# A tibble: 6 × 2\n  location_type     n\n  &lt;chr&gt;         &lt;int&gt;\n1 Airport           1\n2 Military          6\n3 Other            49\n4 Religious         6\n5 School           18\n6 Workplace        45\n\n\nThis is the same code but we added kable() to format the table, add a caption, and label the columns. Observe what it does:\n\ncount(mass_shootings, location_type) %&gt;%\n  kable(\n    caption = \"Mass shootings in the United States by location\",\n    col.names = c(\"Location\", \"Number of incidents\")\n  )\n\n\nMass shootings in the United States by location\n\n\nLocation\nNumber of incidents\n\n\n\n\nAirport\n1\n\n\nMilitary\n6\n\n\nOther\n49\n\n\nReligious\n6\n\n\nSchool\n18\n\n\nWorkplace\n45\n\n\n\n\n\nRun ?kable in your Console for additional options\n\n\n\n\nSubmit the Assignment\nTo submit your assignment on Canvas, follow these steps:\n\nBefore the deadline, push the final version of your work to your GitHub repository. Tip: don’t wait until the end to make your first commit—commit; stage, and push your work regularly as you go.\nYour GitHub repository should include (make sure to stage-commit-push all these files):\n\nmass-shootings.Rmd: main file you will work on\nmass-shootings.md: you will generate this file from the .Rmd by simply knitting it, like you did for HW01. The output format is already set to github_document keep it that way unless you encounter problems, in which case you can switch to md_document (this is rarely needed)\nmass-shootings_files/: this folder contains all the graphs that you generated in your .Rmd\n\nWhen you’re ready to submit:\n\nCopy the URL of your GitHub repository. It will look something like: https://github.com/css-fall25/hw02-yourusername\nSubmit that URL on Canvas under HW02. Do not upload any files to Canvas. We only need the repository link.\n\n\n\n\nAssessment\nAll homework assignments are evaluated using this rubric. For more, see the Assessment section of the Syllabus.\nBelow are further guidelines for this specific homework to help you assess your work before submitting it. In the past, “Excellent” or “Very Good” work included submissions that:\n\nCompleted all parts of the assignment correctly and accurately.\nIncluded code that:\n\nRan without errors\nFollowed good style (clean, readable, well-organized)\nWas well-documented but not over-commented\nUsed appropriate complexity that matched the prompt and course content\nDemonstrated understanding of key concepts and functions\nDemonstrated use of class resources\nFollowed the course AI policies\n\nIncluded graphs and tables that were:\n\nWell-chosen for the variable types\nClearly labeled, visually polished, and customized beyond defaults\nInterpreted in a clear analysis\nCritically interpreted, using the data to back up the points made\n\nShowed strong use of:\n\nRequired packages, showing curiosity to use them beyond the basics\nR Markdown syntax (e.g., no rendering errors, appropriate use of syntax, etc.)\n\nFollowed good GitHub practices:\n\nMultiple informative commits showing progress over time\nAll required files present and displaying correctly, including rendered graphs"
  },
  {
    "objectID": "hw/hw01.html",
    "href": "hw/hw01.html",
    "title": "HW01: Test software setup and practice editing files",
    "section": "",
    "text": "Overview\nDue: Tuesday, October 7 by 11:59 PM (Chicago Time)\nThis first homework assignment has two main goals: to verify your computer setup and to practice basic R syntax, Markdown, and R Markdown.\n\n\nAccessing and Cloning Your hw01 Repository\n\n\n\n\n\n\nImportant\n\n\n\nThis will work only if you have submitted your GitHub username (see Lecture 1) and accepted the email invitation to join our GitHub organization (check the email linked to your GitHub account). Make sure you’ve completed the setup under Software Setup and confirmed everything is working properly.\n\n\nAccessing the repo:\n\nGo at this link to accept the invitation and create your private hw01 repository on GitHub. Your repository will be named hw01-&lt;USERNAME&gt; and will be ready within a few seconds. If this does not work, see the note in red above.\nOnce the repository has been created, click the link provided to access it.\n\nCloning the repo into your Workbench:\n\nLog into Workbench and start a new project:\nFile &gt; New Project &gt; Version Control &gt; Git\nIn the Repository URL field:\n\nPaste the URL of your GitHub repository. To find the URL, go to your hw01 repo on GitHub, click the green Code button, and copy the SSH or HTTPS link (use the method you configured during setup: Workbench users must select SSH).\nThe project name should auto-fill. If not, type hw01-&lt;USERNAME&gt; manually.\n\nChoose where to save the project directory locally. Tip: Avoid moving folders after cloning them.\nCheck the box “Open in new session” (recommended for keeping projects separate and organized)\nClick Create Project. This will:\n\nCreate a new folder on your machine\n\nInitialize a Git repository linked to GitHub\n\nOpen an RStudio Project in a new session\n\n\nYou’ll use this same process to access and set up each homework assignment throughout the course.\n\n\nGeneral Homework Workflow\nYour workflow for all homework assignments will follow these steps:\n\nAccept the GitHub repo invitation and clone the repo (see above)\nEdit the files included in the repo\nSave your changes locally in RStudio Workbench\nPull – Stage – Commit – Push:\n\nPull from GitHub: this should not change anything if you’re the only one working on the repo, but it’s a good habit to always pull first\nStage and commit your changes to your local Git repository\nPush your committed changes to your GitHub repository online\n\n\nFor this course, I assume you’ll be using the Git interface built into RStudio. If you haven’t yet, complete the Using Git within RStudio tutorial to get comfortable with the process.\n\n\n\n\n\n\nTip\n\n\n\n\nCommit and push your work often—multiple times per session if possible. Don’t wait until you’ve finished the entire assignment.\n\nNever edit files directly on GitHub. Always work in your local Git repository (e.g., on Workbench) and then push changes to GitHub. Think of your GitHub repo as a live online backup of your local project.\n\n\n\n\n\nFile Types Used for Homework Assigments\nAll assignments in this course will be completed and submitted using Markdown and R Markdown files:\n\nMarkdown (.md) is a lightweight formatting language used to structure text.\n\nGitHub README files are typically written in Markdown (.md) or plain text (.txt).\nIn this course, we use Markdown files only for writing README files because GitHub renders them directly in the browser.\nYou can reference R code in Markdown, but you cannot run and execute it.\n\nR Markdown (.Rmd) is a format that allows you to combine R code, output, and text in one file.\n\nIt’s an extension of Markdown designed for dynamic analysis and reproducible reports specifically for R.\nYou’ll use R Markdown to complete most homework assignments.\n\n\nIn short, for this course:\n\nUse Markdown (.md) only for writing a short summary in the README.md file\nUse R Markdown (.Rmd) for completing the bulk of your assignment, e.g., analysis and code-based work\n\n\n\nAssignment Description\nFor this first assignment, you’ll edit and push the following two files to your GitHub repo: README.md and code.rmd\n\nEdit the README.md file\nYou will see a file named README.md in your repository.\nA README is usually a plain text (.txt) or Markdown (.md) file that provides important information about a project—such as a summary, installation steps, or example output. In this course, you’ll use it to document your work and reflect on your process.\nYour Task: edit the README.md file by replacing the placeholder text with a short biography of yourself. To achieve a “pass”, your biography must include the following elements:\n\nAt least one header\nSome emphasis (italic or bold text)\nAt least one list\nAn image (e.g., a photo of yourself or something meaningful to you)\n\nUpload the image into your repo by importing it in Workbench\n\nEmbed it in the Markdown file using the correct syntax\n\nAt least one link (e.g., to a website or profile)\n\nAt the end of your README, add a short reflection that includes:\n\nA brief summary of your Git/GitHub workflow for this homework\n(Bullet points or a short narrative are both fine.)\nYour evaluation of the homework experience\n(E.g., something new you learned, what went well, what confused you, etc.)\nA list of resources you consulted and an AI narrative if you used AI to debug (see Syllabus for details)\nInclude links, tools, names of any collaborators, and AI statement\n\n\n\nEdit the code.rmd file\nYou will see a file named code.rmd in your repository.\nYour task: edit the code.rmd file by making the following changes (all must be included for a “pass”):\n\nAdd at least two new YAML header options:\n\nDo not delete or modify the existing ones\nExample additions: author:, subtitle:, toc: true, etc\n\nFeel free to experiment, see readings and slides from Lecture 1 for ideas\n\nAdd at least two R code chunks with a short explanation in plain text (not as code comment):\n\nYour code can be simple (think at the examples from lecture 1), but it must run and produce the correct output\nYour final knitted .html .md file should show both code and output (we want the md as Github cannot read html, but if you submit both that’s fine)\nIf your code generates plots (not required, but possible), make sure the output images are also pushed to GitHub\n\n\n\n\n\nSubmit the Assignment\nTo submit your assignment on Canvas, follow these steps:\n\nBefore the deadline, push the final version of your work to your GitHub repository. Tip: don’t wait until the end to make your first commit—commit, stage, and push your work regularly as you go.\nYour GitHub repository should include:\n\nThe updated README.md\nThe edited code.rmd\nA knitted output file generated from code.rmd (this must be a .md document, not anything else)\n\nWhen you’re ready to submit:\n\nCopy the URL of your GitHub repository. It will look something like: https://github.com/css-fall25/hw01-yourusername\nSubmit that URL on Canvas under HW01. Do not upload any files to Canvas. We only need the repository link.\n\n\n\n\nAssessment\nThis assignment is evaluated on a Pass/Fail basis. To earn a Pass:\nYour README.md should include a clear introduction that meets all specified requirements. It should demonstrate your ability to use Markdown syntax, such as headers, emphasis, lists, links, and images. You should also include a short description of how you edited and committed your changes, along with reflections on your experience using Git/GitHub, Markdown, and R Markdown.\nYour code.rmd file must knit successfully. It should contain at least two new YAML header fields and two R code chunks, each introduced with a brief explanation written as plain text (not as code comments).\nAll required files must be pushed to your GitHub repository.\nFor more details, see the Assessment section of the Syllabus."
  },
  {
    "objectID": "hw/hw03.html",
    "href": "hw/hw03.html",
    "title": "HW03: Wrangling Data",
    "section": "",
    "text": "Overview\nDue: Thursday, November 6th by 11:59 PM (Chicago Time)\nIn the previous assignment, you practiced working with dplyr and ggplot2 using a clean and relatively small dataset. This assignment builds and expands on the previous assignment by introducing a more realistic research context in computational social science: you’ll practice cleaning, wrangling, and exploring a larger and more messy dataset.\n\n\nAccessing and Cloning Your hw03 Repository\nAccessing the repo:\n\nGo at this link to accept the invitation and create your private hw03 repository on GitHub. Your repository will be named hw03-&lt;USERNAME&gt; and will be ready within a few seconds.\nOnce the repository has been created, click the link provided to access it.\n\nCloning the repo into your Workbench:\n\nLog into Workbench and start a new project:\nFile &gt; New Project &gt; Version Control &gt; Git\nIn the Repository URL field:\n\nPaste the URL of your GitHub repository. To find the URL, go to your hw03 repo on GitHub, click the green Code button, and copy the SSH or HTTPS link (use the method you configured during setup: Workbench users must select SSH).\nThe project name should auto-fill. If not, type hw03-&lt;USERNAME&gt; manually.\n\nChoose where to save the project directory locally. Tip: Avoid moving folders after cloning them.\nCheck the box “Open in new session” (recommended for keeping projects separate and organized)\nClick Create Project. This will:\n\nCreate a new folder on your machine\n\nInitialize a Git repository linked to GitHub\n\nOpen an RStudio Project in a new session\n\n\n\n\nGeneral Homework Workflow\nSee Homework 1 for details. The workflow is the same for all assignments (e.g., accept the repo, edit the files, save, then Pull – Stage – Commit – Push).\n\n\nAssignment Description\n\nThe U.S. Supreme Court dataset\nFor this assignment you will work with two large datasets from the U.S. Supreme Court.\nThe Supreme Court Database contains information on every published decision of the U.S. Supreme Court since its creation in 1791. It is one of the most widely used databases in the study of judicial politics.\n\n\nAnswer the questions\nYour repository includes specific and open-ended questions. Answer all of them.\n\n\n\n\n\n\nNote\n\n\n\n\nThe questions—especially the open-ended ones—are designed to help you think like a programmer and data analyst. They won’t walk you through every step but encourage you to apply what you’ve learned and work independently. Translating what a question asks into code by breaking it down in smaller pieces is one important learning goal of this exercise\nThis homework is designed to be completed over multiple sessions—it will feel overwhelming otherwise. Start early, and remember to save, commit, and push your work regularly.\nDo not use AI tools to generate R code from scratch or to think for you; that defeats the purpose of the assignment and violates our class policy on plagiarism. You may use AI to debug (after trying on your own) or look up how functions work (check course materials first). Only submit code you fully understand. Reach out if you have questions, we are here to help!\n\n\n\n\n\n\nFormatting Guide\nSee Homework 2 for details. The formatting expectations are the same for all assignments.\n\n\nSubmit the Assignment\nTo submit your assignment on Canvas, follow these steps:\n\nBefore the deadline, push the final version of your work to your GitHub repository. Tip: don’t wait until the end to make your first commit—commit, stage, and push your work regularly as you go.\nYour GitHub repository should include (make sure to stage-commit-push all these files):\n\ncourt.Rmd: main file you will work on\ncourt.md: you will generate this file from the .Rmd by simply knitting it\nthe folder that contains all the graphs that you generated in your .Rmd (we need this to be able to see your graphs and grade your homework)\n\nWhen you’re ready to submit:\n\nCopy the URL of your GitHub repository. It will look something like: https://github.com/css-fall25/hw03-yourusername\nSubmit that URL on Canvas under HW03. Do not upload any files to Canvas. We only need the repository link.\n\n\n\n\nAssessment\nAll homework assignments are evaluated using this rubric.\nRefer to it to assess your work before submitting. For more, see the Assessment section of the Syllabus."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Computing for the Social Sciences",
    "section": "",
    "text": "Course Information Fall 2025\n\n\n\nLectures: Mondays & Wednesdays, 1:30–3:20 PM, 1155 Building E. 60th St, Room 295\n\n\n\nTeaching Team:\n\nInstructor: Sabrina Nardin (she/her) – nardin@uchicago.edu\n\nTA: Zach Meyer (he/him) – zmeyer@uchicago.edu\nTA: Zixuan Zhou (she/her) – zixuanzhou@uchicago.edu\n\n\n\n\nOffice Hours (all in-person):\n\n\n\nDay & Time\nType\nLocation\nPerson\n\n\n\n\nMon 3:20–3:30 PM (after class)\nDrop-in (short questions)\nSame as classroom\nSabrina\n\n\nTue 2:00–4:00 PM\nBy appointment\n1155 Bldg, Room 221A\nSabrina\n\n\nWed 11:00 AM–12:40 PM\nBy appointment\n1155 Bldg, Room 222\nZach\n\n\nWed 12:40–1:10 PM\nDrop-in (short questions)\n1155 Bldg, Room 222\nZach\n\n\nWed 3:20–3:30 PM (after class)\nDrop-in (short questions)\nSame as classroom\nSabrina\n\n\nThu 1:30–3:10 PM\nBy appointment\n1155 Bldg, Room 222\nZixuan\n\n\nThu 3:10–3:40 PM\nDrop-in (short questions)\n1155 Bldg, Room 222\nZixuan\n\n\n\n\n\n\nQuick Links:\n\nR Workbench\n\nCanvas\n\nEd Discussion\nUChicago GenAI"
  },
  {
    "objectID": "lectures/01-slides.html#teaching-team",
    "href": "lectures/01-slides.html#teaching-team",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\nRole\nName\nEmail\n\n\n\n\nInstructor\nSabrina Nardin (she/her)\nsnardin@uchicago.edu\n\n\nTA\nZach Meyer (he/him)\nzmeyer@uchicago.edu\n\n\nTA\nZixuan Zhou (she/her)\nzixuanzhou@uchicago.edu\n\n\n\n\n\nHow to Reach Out\n\nAsk questions during or after class\nAttend Office Hours (see website)\nPost on Ed Discussion course-related questions"
  },
  {
    "objectID": "lectures/01-slides.html#course-objectives",
    "href": "lectures/01-slides.html#course-objectives",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Course Objectives",
    "text": "Course Objectives\nThe goal of this course is to acquire basic computational skills. Specifically:\n\nLearning R, especially the “tidyverse”\nLearning best practices for reproducible research\n\n\nYou won’t become an R expert in a few weeks, BUT you will learn a lot:\n\nlearn the basics and gain confidence to explore new techniques beyond this course\nuse R as a tool for analyzing social science data"
  },
  {
    "objectID": "lectures/01-slides.html#course-topics",
    "href": "lectures/01-slides.html#course-topics",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Course Topics",
    "text": "Course Topics\nMain topics of this course:\n\nGit/GitHub via RStudio\nR Markdown\nData Visualization\nData Cleaning and Transformation\nExploratory Data Analysis\nWeb-Scraping\nReproducible Research\nR Programming: Control Structures, Data Structures, etc."
  },
  {
    "objectID": "lectures/01-slides.html#how-well-do-this",
    "href": "lectures/01-slides.html#how-well-do-this",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "How We’ll Do This",
    "text": "How We’ll Do This\nWe start simple and build toward more complex code\n\n# create a variable and print it\nx &lt;- \"Hello!\"\nprint(x)\n\n[1] \"Hello!\"\n\n\n\nWe use a mix of lectures and in-class activities, and we rely on several platforms (e.g., course website, Canvas, Ed Discussion, Workbench, Git/GitHub, and Markdown).\nAll course materials are free and accessible from our website.\nIs this course for you?"
  },
  {
    "objectID": "lectures/01-slides.html#software-setup",
    "href": "lectures/01-slides.html#software-setup",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Software Setup",
    "text": "Software Setup\nIn this course we use RStudio Workbench, which is cloud-based version of RStudio that runs in your browser.\nNext lecture we will learn the basics of Git and GitHub and complete the Software Setup with Workbench for the course.\nCheck our website under “Software Setup” for details."
  },
  {
    "objectID": "lectures/01-slides.html#assessment",
    "href": "lectures/01-slides.html#assessment",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Assessment",
    "text": "Assessment\nSee “Assessment” section of our Syllabus and the Course Schedule:\n\nAssessment and Evaluation: There will be four take-home assignments, one final project, and two short in-class exams. Check the syllabus for details.\nSubmission Policies: See Syllabus, especially for late or missed assignments.\nEvaluation Philosophy and Rubric: See Syllabus.\n\nTips:\n\ndo the readings before class, even if you do not understand everything\nstart early to work on the take-home assignments; (starting from the 2nd) they will be a bit challenging, especially if you have never programmed before: they won’t tell you exactly what to do to solve the problem\nAI is cool but read our AI policy in the Syllabus\nform a study group, and ask for help if you get stuck"
  },
  {
    "objectID": "lectures/01-slides.html#course-expectations",
    "href": "lectures/01-slides.html#course-expectations",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Course Expectations",
    "text": "Course Expectations\nSee How to Succeed in this Course from the Syllabus"
  },
  {
    "objectID": "lectures/01-slides.html#tips-from-former-students",
    "href": "lectures/01-slides.html#tips-from-former-students",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Tips from former students…",
    "text": "Tips from former students…\n\n\n“One of the hardest things for me was remembering where I saw a concept or piece of code.”Advice: Stay organized (e.g., customize slides and notes, and create your own system to retrieve info)!\n\n\n\n\n“Homework took more time and effort than I expected.” Advice: Start early! You don’t need to know everything before you begin: just get started and review the materials as needed. Use pen and paper to write pseudo-code before you start.\n\n\n\n\n“I’m in week 4, and I feel lost.”Advice: Reach out to us! Concepts build over time. The big picture will click IF you stay consistent with your efforts every week.\n\n\n\n\n“I found code that worked but wasn’t covered in class, so I wasn’t sure whether to use it.”Advice: Stick to class syntax and functions — they’re chosen for a reason. But you can show both approaches by comparing the function(s) covered in class with your own."
  },
  {
    "objectID": "lectures/01-slides.html#yes-to-collaboration-no-to-copying",
    "href": "lectures/01-slides.html#yes-to-collaboration-no-to-copying",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Yes to Collaboration, No to Copying",
    "text": "Yes to Collaboration, No to Copying\nResearchers collaborate on projects. Developers work in teams to write programs. AI is becoming part of our daily and academic lives.\n\n→ Collaboration is good and encouraged, but in this course you are also expected to:\n\nComplete your own work individually\nWrite your code and fully understand it\nBe ready to explain your code line-by-line to someone else"
  },
  {
    "objectID": "lectures/01-slides.html#collaboration-vs.-plagiarism",
    "href": "lectures/01-slides.html#collaboration-vs.-plagiarism",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Collaboration vs. Plagiarism",
    "text": "Collaboration vs. Plagiarism\n\n\n✅ DO:\n\nDiscuss and debug with peers\nRewrite code found online in your own style and cite the source\nUse AI to debug or clarify concepts after you try\nSubmit code you wrote\nSubmit code you fully understand\nAlways, prioritize methods from class materials and readings\n\n\n🚫 DON’T:\n\nCopy code from your classmates or others\nSimply copy and paste chunks of code from the internet\nUse AI beyond the AI-Policy of this course\nSubmit code you didn’t write\nSubmit code you can’t explain\nWrite code not taught in class or reading (even if it works) as primary solution"
  },
  {
    "objectID": "lectures/01-slides.html#my-take-on-ai-for-this-course",
    "href": "lectures/01-slides.html#my-take-on-ai-for-this-course",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "My take on AI for this course",
    "text": "My take on AI for this course\n\n\nIt is my responsibility to\n- Set expectations & boundaries\n- Enforce them (via grading & AI statements)\n\nIt is your responsibility to\n- Respect the AI policy\n- Ask questions if something is unclear\n\nIn this course, AI is:\n\nNOT allowed to brainstorm, write code for you, or replace course materials\nallowed to debug and learn more (e.g., clarify class materials, ask for more explanations about a specific function, ask for examples, etc.).\n\nMake sure to read the Academic Integrity & Use of AI Policies"
  },
  {
    "objectID": "lectures/01-slides.html#activity-meet-share-goals",
    "href": "lectures/01-slides.html#activity-meet-share-goals",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Activity: Meet & Share Goals",
    "text": "Activity: Meet & Share Goals\nIn groups of 3-5 people, please share:\n\nYour name, plus something about yourself that you’re comfortable sharing (e.g., a hobby, your experience with programming, etc.)\nWhat you hope to learn or achieve in this course\nAny questions you have, and strategies you plan to use to stay on track (we’ll go around the room and answer questions)\n\n\n\n\n\n\n\n\nDone early?\n\n\nIf your group finishes early, please complete this short survey if you haven’t already. It only takes a minute and helps us better understand your background and what you’re hoping to learn in this course."
  },
  {
    "objectID": "lectures/01-slides.html#what-are-these-tools",
    "href": "lectures/01-slides.html#what-are-these-tools",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "What Are These Tools?",
    "text": "What Are These Tools?\n\n\n\n\n\n\n\nTool\nWhat It Is\n\n\n\n\nR\nA programming language for data analysis, statistics, and visualization.\n\n\nRStudio\nA user-friendly interface (IDE) for using R.\n\n\nWorkbench\nA cloud-based version of R/RStudio with everything pre-installed. We will use it in this course to minimize setup issues."
  },
  {
    "objectID": "lectures/01-slides.html#lets-start-by-exploring-our-software",
    "href": "lectures/01-slides.html#lets-start-by-exploring-our-software",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Let’s start by exploring our Software",
    "text": "Let’s start by exploring our Software\nWorkbench: https://macss-r.uchicago.edu/\n\nLog in\nLook at panels\nHow to export/import files between Workbench and your machine\nCreate an empty R Script"
  },
  {
    "objectID": "lectures/01-slides.html#getting-started-with-r",
    "href": "lectures/01-slides.html#getting-started-with-r",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Getting Started with R",
    "text": "Getting Started with R\nToday we learn how to:\n\nCreate and use variables\n\nUnderstand variable types (e.g., number, text, logical, etc.)\n\nWrite comments and organize your code\n\nUse scripts (vs. console) for reproducibility\n\nClear your environment\n\nGroup values using vectors"
  },
  {
    "objectID": "lectures/01-slides.html#live-coding-activity-to-get-started-with-r",
    "href": "lectures/01-slides.html#live-coding-activity-to-get-started-with-r",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "💻 Live Coding Activity to get Started with R",
    "text": "💻 Live Coding Activity to get Started with R\nWe learn all of this via a live coding activity:\n\nLog into Workbench https://macss-r.uchicago.edu/\nType along with me as we write and run code together\nStop me anytime if you have questions"
  },
  {
    "objectID": "lectures/01-slides.html#deep-dive-on-r-markown",
    "href": "lectures/01-slides.html#deep-dive-on-r-markown",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Deep Dive on R Markown",
    "text": "Deep Dive on R Markown\nR Markdown is a file format (with extension .Rmd) that combines R code, using code chunks, and text in a single document. It’s very popular because it makes it easy to create reproducible reports, analyses, and presentations.\nYou might hear about Quarto (with extension .qmd), which is a newer alternative to R Markdown. We won’t cover Quarto in this course, but if you learn R Markdown, you can quickly adjust to Quarto."
  },
  {
    "objectID": "lectures/01-slides.html#comparing-r-scripts-r-markdown-and-markdown",
    "href": "lectures/01-slides.html#comparing-r-scripts-r-markdown-and-markdown",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Comparing R Scripts, R Markdown, and Markdown",
    "text": "Comparing R Scripts, R Markdown, and Markdown\n\n\n\nFile Type\nExtension\nKey Differences\n\n\n\n\nR Script\n.R\nSupports code\n\n\nR Markdown\n.Rmd\nSupports code and formatted text\n\n\nMarkdown\n.md\nSupports formatted text\n\n\n\nWe use all three, but mainly .Rmd for assignments and .md for Git/GitHub documentation."
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-three-main-components",
    "href": "lectures/01-slides.html#r-markdown-three-main-components",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Three Main Components",
    "text": "R Markdown: Three Main Components\n\nYAML header for document title, author, output format, etc. Insert it at the top between ---\nText regular Markdown for headers, lists, links, etc.\nCode chunks for code. Insert it with triple backticks ```\n\n\n\n\n\n\n\n\nCode Chunk Tips\n\n\nThree ways to insert a code chunk in your R Markdown:\n\nUse the RStudio toolbar\n\nType manually ```{r} and ```\nUse a shortcut\n\nMac: ⌘ + ⌥ + I\n\nWindows: Ctrl + Alt + I"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-example",
    "href": "lectures/01-slides.html#r-markdown-example",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Example",
    "text": "R Markdown: Example\nThis is what we type (YAML, text, code):\n---\ntitle: \"Homework 1\"\nauthor: \"Sabrina Nardin\"\noutput: html_document\n---\n\nI write my homework description here. \nI can format the text in many ways, for example, by bolding **key concepts**.\n\n```{r}\n# create a variable\nx &lt;- 5\n```"
  },
  {
    "objectID": "lectures/01-slides.html#yaml-yet-another-markup-language",
    "href": "lectures/01-slides.html#yaml-yet-another-markup-language",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "YAML: Yet Another Markup Language",
    "text": "YAML: Yet Another Markup Language\nThe YAML header sits at the top of your .Rmd and tells R what the document is about and how to display it (e.g., as a html, PDF, Word, etc.). Spacing, indentation, and --- all matters!\nThe example below shows three fields but many more can be added:\n---\ntitle: \"Homework 1\"\nauthor: \"Sabrina Nardin\"\noutput: html_document\n---"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-formatting-text",
    "href": "lectures/01-slides.html#r-markdown-formatting-text",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Formatting Text",
    "text": "R Markdown: Formatting Text\n\n\nSyntax\n*Italics*  \n**Bold**  \n~~Strikethrough~~  \n`inline code`\n\nOutput\nItalics\nBold\nStrikethrough\ninline code"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-unordered-lists",
    "href": "lectures/01-slides.html#r-markdown-unordered-lists",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Unordered Lists",
    "text": "R Markdown: Unordered Lists\n\n\nSyntax\n+ item 1  \n  + sub  \n  + sub  \n- item 2  \n  - sub  \n  - sub  \n+ item 3  \n  - sub  \n  * sub  \n\nOutput\n\nitem 1\n\nsub\nsub\n\nitem 2\n\nsub\nsub\n\nitem 3\n\nsub\nsub"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-ordered-lists",
    "href": "lectures/01-slides.html#r-markdown-ordered-lists",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Ordered Lists",
    "text": "R Markdown: Ordered Lists\n\n\nSyntax\n1. item 1  \n    + sub  \n      + sub  \n    + sub  \n\n1. item 2  \n    * sub  \n      * sub  \n    * sub  \n\n1. item 3  \n    - sub  \n\nOutput\n\nitem 1\n\nsub\n\nsub\n\n\nsub\n\nitem 2\n\nsub\n\nsub\n\n\nsub\n\nitem 3\n\nsub"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-formatting-headers",
    "href": "lectures/01-slides.html#r-markdown-formatting-headers",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Formatting Headers",
    "text": "R Markdown: Formatting Headers\n# Heading 1  \n## Heading 2  \n### Heading 3  \n\nHeading 1\n\n\nHeading 2\n\n\nHeading 3"
  },
  {
    "objectID": "lectures/01-slides.html#using-in-code-vs.-markdown-text",
    "href": "lectures/01-slides.html#using-in-code-vs.-markdown-text",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Using # in Code vs. Markdown Text",
    "text": "Using # in Code vs. Markdown Text\n\n\nIn Code\n# Assign number to variable\nx &lt;- 5 \n# Assign text to variable\nname &lt;- \"Sabrina\"\n\n# starts a COMMENT in R Scripts and R Markdown Code Chunks\nComments are ignored when the code runs\nUse one single # for code explanations or debugging, space doesn’t matter\n\n\nIn R Markdown Text\n# Title (h1)\n## Section (h2)\n### Subsection (h3)\n#### More Subsections (h4)\n\n# creates a HEADER in Markdown or R Markdown Text\nThe number of # signs = heading level\nUse as many # as needed for organizing document sections, space matters"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-insert-links-images-and-tables",
    "href": "lectures/01-slides.html#r-markdown-insert-links-images-and-tables",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Insert Links, Images, and Tables",
    "text": "R Markdown: Insert Links, Images, and Tables\n\n\n\nElement\nSyntax Example\nNotes\nPreview\n\n\n\n\nLink\n[RStudio](https://www.rstudio.com/)\nText in [], URL in ()\nLink\n\n\nImage\n![Logo](images/logo.png \"Optional title\")\nStart with !, include optional \"title\"\nImage\n\n\nTable\n| Tool    | Use     ||---------|---------|| R       | Stats   |\nUse | for columns and --- for header\nTable\n\n\n\nNote:\n\nSpacing always matters\nFor images to display, the file (e.g., .png, .jpg) must be saved in your current working dir or project folder"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-handy-code-chunk-options",
    "href": "lectures/01-slides.html#r-markdown-handy-code-chunk-options",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Handy Code Chunk Options",
    "text": "R Markdown: Handy Code Chunk Options\n\n\n\n\n\n\n\n\n\nOption\nWhat it does\nDefault\n\n\n\n\neval = FALSE\nCode is not run, only shown; results do not appear. Useful for code examples or showing code with errors.\neval = TRUE\n\n\ninclude = FALSE\nCode is run, but both code and results are hidden. Useful for setup code you don’t want to display.\ninclude = TRUE\n\n\necho = FALSE\nCode is run, results are shown, but code is hidden. Good when readers only need the output.\necho = TRUE\n\n\nerror = TRUE\nCode is run and shown, even if it throws an error. Useful when demonstrating broken code.\nerror = FALSE\n\n\nmessage = FALSE / warning = FALSE\nCode is run, but messages and warnings are hidden from the output.\nmessage = TRUE / warning = TRUE\n\n\n\n\nCheck this table and options for more."
  },
  {
    "objectID": "lectures/01-slides.html#rendering-r-markdown-documents",
    "href": "lectures/01-slides.html#rendering-r-markdown-documents",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Rendering R Markdown Documents",
    "text": "Rendering R Markdown Documents\nR Markdown lets you create documents that combine text, code, and output, and “render” or “knit” them in formats like html, pdf, word, and more.\n\n\n\n\n\n\n\nRendering Tips\n\n\nThree ways to render your R Markdown document:\n\nClick “Knit” in RStudio and choose an output\nSet the format in the YAML header such as html_document,word_document, pdf_document, github_document, etc.\nUse render() in your console by typing rmarkdown::render(\"my-document.Rmd\", output_format: html_document). More info here"
  },
  {
    "objectID": "lectures/01-slides.html#r-markdown-knitting-process",
    "href": "lectures/01-slides.html#r-markdown-knitting-process",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "R Markdown: Knitting process",
    "text": "R Markdown: Knitting process\nWhen you “knit” your document, the following sequential things happen:\n\nR Markdown sends the .Rmd file to knitr http://yihui.name/knitr/\nKnitr executes all of the code chunks and creates a new plain Markdown .md file which includes the code and its output\nThis plain Markdown file is then converted by pandoc into any number of output types including html, PDF, Word document, etc.: http://pandoc.org/"
  },
  {
    "objectID": "lectures/01-slides.html#practice-r-markdown-syntax",
    "href": "lectures/01-slides.html#practice-r-markdown-syntax",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "💻 Practice R Markdown Syntax",
    "text": "💻 Practice R Markdown Syntax\n\nLog into Workbench https://macss-r.uchicago.edu/\nDownload today’s code from Lecture 1 on our website\nComplete the R Markdown in-class practice\nWant more? Try this interactive tutorial"
  },
  {
    "objectID": "lectures/01-slides.html#recap-what-we-learned-today",
    "href": "lectures/01-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nFamiliarized with Workbench\nWrote simple R code\nKey components of R Markdown\nHow to run and render R Markdown Documents"
  },
  {
    "objectID": "lectures/01-slides.html#reminders",
    "href": "lectures/01-slides.html#reminders",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "Reminders",
    "text": "Reminders\n\nRegister for a GitHub account and share your GitHub username with us (see Lecture 1 on our website for details)\nReview today’s materials to prep for the short quiz at the beginning of next class\nCheck Lecture 2 homepage"
  },
  {
    "objectID": "lectures/01-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/01-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 1",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/02-slides.html#two-different-approaches",
    "href": "lectures/02-slides.html#two-different-approaches",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Two Different Approaches",
    "text": "Two Different Approaches\nTASK: Write a report on the relationship between income and crime rates in Chicago.\nAPPROACH: Jane and Sally approach this task differently…\n\n\n\nJane: GUI Workflow\n\nSearches for data files online\n\nCleans the data using Excel\n\nAnalyzes the data in Excel (or similar)\n\nWrites her report in Google Docs\nSaves different versions of her work manually\n\n\nSally: Programmatic Workflow\n\nSearches for data files online\n\nCleans the data using R\n\nAnalyzes the data in R\n\nWrites her report in R Markdown\nTracks changes automatically using Git"
  },
  {
    "objectID": "lectures/02-slides.html#two-main-advantages-of-a-programmatic-workflow",
    "href": "lectures/02-slides.html#two-main-advantages-of-a-programmatic-workflow",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Two Main Advantages of a Programmatic Workflow",
    "text": "Two Main Advantages of a Programmatic Workflow\n1. Automation\n\nUses programs (e.g., R) to perform tasks systematically\n\nIn the long run, reduces manual effort and human errors\n\nEnables fast and consistent repetition of analyses\n\n\n2. Reproducibility\n\nScientific research should share both data and code used for analysis\n\nAllows verification and reuse by others\n\nEnables exact replication of results, even years later"
  },
  {
    "objectID": "lectures/02-slides.html#often-used-together-but-they-are-different-tools",
    "href": "lectures/02-slides.html#often-used-together-but-they-are-different-tools",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Often used together, but they are different tools",
    "text": "Often used together, but they are different tools\n\n\n\nGit\n\nVersion control software\n\nRuns locally on your computer\nNote locally = your Workbench for this course\n\n\n\nGitHub\n\nCloud-based platform\n\nRuns online at https://github.com"
  },
  {
    "objectID": "lectures/02-slides.html#what-is-version-control-e.g.-git",
    "href": "lectures/02-slides.html#what-is-version-control-e.g.-git",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "What is Version Control (e.g., Git)?",
    "text": "What is Version Control (e.g., Git)?\nVersion Control\nVersion Control is a system that records every change you make to your files in a folder and lets you restore previous versions of your files in that folder.\nThe folder lives on your computer (e.g., Workbench for this course) and becomes your local repository or local repo.\n\nGit\nGit is a specific software for version control: Git will record and save changes you make to the files in that folder.\nEvery change is saved by Git with a time stamp, author info, and a message (that you type in); you can restore them, if needed."
  },
  {
    "objectID": "lectures/02-slides.html#why-using-version-control-e.g.-git",
    "href": "lectures/02-slides.html#why-using-version-control-e.g.-git",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Why using Version Control (e.g., Git)?",
    "text": "Why using Version Control (e.g., Git)?\nWithout Version Control you have to track changes manually, and rename the file every time, which can be messy and hard to manage, like:\n\nanalysis-1.R\nanalysis-2.R\nanalysis-final.R\nanalysis-final-FINAL.R"
  },
  {
    "objectID": "lectures/02-slides.html#how-version-control-e.g.-git-github-work-togheter",
    "href": "lectures/02-slides.html#how-version-control-e.g.-git-github-work-togheter",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "How Version Control (e.g., Git) + GitHub Work Togheter",
    "text": "How Version Control (e.g., Git) + GitHub Work Togheter\nYou could only use Git and keep everything to your local computer. Often though, like in this class, people use Git + GitHub (e.g., you can link your local Git repository to an online GitHub repository).\nWith Git + GitHub you can:\n\nPush your local changes to GitHub (think at this as having an online back up of your local files)\nShare your work with others"
  },
  {
    "objectID": "lectures/02-slides.html#git-github-comparison",
    "href": "lectures/02-slides.html#git-github-comparison",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Git & GitHub Comparison",
    "text": "Git & GitHub Comparison\n\n\n\n\n\n\n\n\nFeature\nGit\nGitHub\n\n\n\n\nWhat it is\nVersion control software\nCloud platform for Git repos\n\n\nWhere it runs\nLocally (your computer)\nOnline (web-based)\n\n\nWhat it does\nTracks changes in your local repo\nStores & shares remote copies\n\n\nCollaboration\nNot built-in\nPull, issues, code reviews\n\n\nUse in RStudio\nGit Tab\nConnect via setup or terminal\n\n\nRepo\nLocal repo = your folder\nRemote repo = copy on GitHub\n\n\n\n\nNote: In this course, we use Git + GitHub via RStudio only, but other tools (vs. RStudio) exists like GitHub Desktop, terminal, etc."
  },
  {
    "objectID": "lectures/02-slides.html#lets-put-this-into-practice",
    "href": "lectures/02-slides.html#lets-put-this-into-practice",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Let’s put this into practice!",
    "text": "Let’s put this into practice!\nWe’ll practice in two steps:\nStep 1: Configure your Setup: Set up Git, GitHub, and RStudio so everything works well together\nStep 2: Use Git and GitHub in RStudio Tutorial: Complete tutorial to practice using version control in RStudio"
  },
  {
    "objectID": "lectures/02-slides.html#step-1-configure-your-setup",
    "href": "lectures/02-slides.html#step-1-configure-your-setup",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "💻 Step 1: Configure your Setup",
    "text": "💻 Step 1: Configure your Setup\nComplete https://brinasab.github.io/css-website/setup/setup-workbench.html"
  },
  {
    "objectID": "lectures/02-slides.html#step-2-use-git-and-github-in-rstudio-tutorial",
    "href": "lectures/02-slides.html#step-2-use-git-and-github-in-rstudio-tutorial",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "💻 Step 2: Use Git and GitHub in RStudio Tutorial",
    "text": "💻 Step 2: Use Git and GitHub in RStudio Tutorial\nOnce Step 1 is done, complete https://brinasab.github.io/css-website/setup/setup-test.html\n\nInstructions:\n\nWork in pairs: one person (the most experienced with programming) read the instructions and guide the other, who executes the commands. Switch roles at the end so both persons have completed the set up.\nKeep track of your questions as you go and raise your hand if you need help!"
  },
  {
    "objectID": "lectures/02-slides.html#recap-beginner-friendly-git-github-workflow",
    "href": "lectures/02-slides.html#recap-beginner-friendly-git-github-workflow",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Recap: Beginner-Friendly Git & GitHub Workflow",
    "text": "Recap: Beginner-Friendly Git & GitHub Workflow\n\nMake & Save Changes Locally\nEdit your files locally (e.g., Workbench) and save them. \nPull from GitHub\nRefresh your local copy to get the latest changes (nothing should happen when you work alone, but this helps avoid conflicts).\nStage Changes\nSelect which files you want Git to track in the next snapshot.\nCommit with a Message\nSave a snapshot of your staged changes in your local Git repo. Add a short message.\nPush to GitHub\nUpload your committed changes to the online repository.\n\n\n\n\n\n\n\nImportant\n\n\nYou will complete this workflow for all homework assignments!"
  },
  {
    "objectID": "lectures/02-slides.html#git-reminders",
    "href": "lectures/02-slides.html#git-reminders",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Git Reminders",
    "text": "Git Reminders\n\nStage and commit often\nThink of commits as snapshots of your work. Save, stage, and commit regularly during your workflow.\nWrite clear, useful commit messages\nKeep messages concise but descriptive. They should explain what changed and why. Many tips online for “commit message best practices.”\nPush regularly, but not necessarily every time you commit Some people push every time they commit, while others push multiple commits at once. Experiment and find what works best for you.\nWork locally, and push on GitHub\nDo not do the other way around (e.g., do not modify your GitHub repository directly; work on your local copy, and push changes to GitHub)."
  },
  {
    "objectID": "lectures/02-slides.html#what-to-commit-not-to-commit",
    "href": "lectures/02-slides.html#what-to-commit-not-to-commit",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "What to Commit / Not to Commit",
    "text": "What to Commit / Not to Commit\n\n\n✅ What to Commit\n\nCode files\nMarkdown or Quarto files\nSmall data files\nREADME and documentation\n\n\n🚫 What Not to Commit\n\nTemporary files (e.g., .Rproj.user/)\nLog or output files\nFiles with private information\nFiles larger than 100 MB\n\n\n\n\nWhat Not to Commit goes in the “gitignore” file\n\nThe “gitignore” file tells Git what to ignore from your folder\nUse a template (search for R-specific template, which works well for most class projects)"
  },
  {
    "objectID": "lectures/02-slides.html#git-large-file-storage-git-lfs",
    "href": "lectures/02-slides.html#git-large-file-storage-git-lfs",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Git Large File Storage (Git LFS)",
    "text": "Git Large File Storage (Git LFS)\nWhat if you need to track a file larger than 100 MB? GitHub does not allow pushing files over 100 MB. If you have such a file, don’t try to push it directly.\nInstead:\n\nUse Git Large File Storage (Git LFS)\nA separate tool that integrates with Git\nDesigned specifically for large files (e.g., datasets, media)\nNote: Git LFS storage on GitHub often comes with usage limits and may require a paid plan"
  },
  {
    "objectID": "lectures/02-slides.html#git-conflicts",
    "href": "lectures/02-slides.html#git-conflicts",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Git Conflicts",
    "text": "Git Conflicts\nA Git conflict may happen when Git finds two competing versions of the same file: one in your local repo (Git, on your computer) VS. one in the remote repo (GitHub, online).\nThe local and remote repos are expected to match. If they don’t, Git tries to merge them automatically, with two possibile outcomes:\n✅ If the changes are in different parts of the file, Git merges automatically and no action is needed.\n❌ If the same part of the file was changed in both versions, Git cannot decide what to keep. You must manually review and resolve the conflict."
  },
  {
    "objectID": "lectures/02-slides.html#when-do-git-conflicts-happen",
    "href": "lectures/02-slides.html#when-do-git-conflicts-happen",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "When Do Git Conflicts Happen?",
    "text": "When Do Git Conflicts Happen?\nCollaborative Work\n- You and a teammate edit the same file (or even the same line)\n- You push changes without pulling the latest version from GitHub first - Conflict: Git can’t tell which version to keep\n- Tip: Always run git pull before git push\n\nWorking Solo\n- You make changes locally and also edit the same file directly on GitHub\n- Conflict: Git can’t tell which version to keep\n- Tip: Always work in your local repository first, then push to GitHub"
  },
  {
    "objectID": "lectures/02-slides.html#what-a-git-conflict-looks-like",
    "href": "lectures/02-slides.html#what-a-git-conflict-looks-like",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "What a Git Conflict Looks Like",
    "text": "What a Git Conflict Looks Like\nWhen a conflict happens, Git marks the file with special lines to show the two versions:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is your version (from your local repo)\n=======\nThis is the other version (from GitHub or your teammate)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; main\nUnfortunately, you cannot solve a Git Conflict using the integrated Git from RStudio. To solve it, you need to use Git from the terminal."
  },
  {
    "objectID": "lectures/02-slides.html#how-to-solve-a-git-conflict",
    "href": "lectures/02-slides.html#how-to-solve-a-git-conflict",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "How to solve a Git Conflict",
    "text": "How to solve a Git Conflict\n\nGo to R (Workbench) and open your terminal. Pull the latest changes from GitHub by typing git pull origin main and by following the message that shows up on Git (which will tell you what to type)\nOpen the file or files and look for the conflict markers such as &lt;&lt;&lt;&lt;&lt;&lt;&lt;, =======, &gt;&gt;&gt;&gt;&gt;&gt;&gt;\nDecide which version to keep or manually combine them\nDelete the conflict markers\nSave the file\nRun the following commands from your terminal:\ngit add &lt;filename&gt;\ngit commit -m \"solved conflict\"\ngit push origin main"
  },
  {
    "objectID": "lectures/02-slides.html#avoiding-most-git-conflicts",
    "href": "lectures/02-slides.html#avoiding-most-git-conflicts",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Avoiding (Most) Git Conflicts",
    "text": "Avoiding (Most) Git Conflicts\nRather than solving conflicts, we want to avoid them with good practices:\n\nMake changes locally, then stage and commit\nPush regularly to keep your GitHub repo in sync\n\nAlways pull before you push to avoid conflicts\n\nKey Sequence to Use:\ngit pull → make changes → git add → git commit → git push"
  },
  {
    "objectID": "lectures/02-slides.html#burn-it-all-down",
    "href": "lectures/02-slides.html#burn-it-all-down",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Burn it All Down",
    "text": "Burn it All Down"
  },
  {
    "objectID": "lectures/02-slides.html#recap-what-we-learned-today",
    "href": "lectures/02-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nFamiliarized with Git & GitHub\nHow to use Git & GitHub within RStudio"
  },
  {
    "objectID": "lectures/02-slides.html#accept-homework-1",
    "href": "lectures/02-slides.html#accept-homework-1",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "💻 Accept Homework 1",
    "text": "💻 Accept Homework 1\nAccept Homework 1 from the course site and follow the instructions.\nNote: this will only work if we have your GitHub username and you accepted the invite to our GitHub organization (which was sent to the email linked to your GitHub account)!"
  },
  {
    "objectID": "lectures/02-slides.html#reminders",
    "href": "lectures/02-slides.html#reminders",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "Reminders",
    "text": "Reminders\n\nAssignment 1 is now open and due next week. Check the Course Schedule on our website for the due date.\nIf you haven’t completed these yet, please do so ASAP, as you won’t be able to access and complete Assignment 1 otherwise:\n\nRegister a GitHub account and submit your username (see Lecture 1)\nSetup your computer (see Lecture 2)"
  },
  {
    "objectID": "lectures/02-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/02-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 2",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/03-slides.html#why-we-visualize-data",
    "href": "lectures/03-slides.html#why-we-visualize-data",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Why We Visualize Data",
    "text": "Why We Visualize Data\n\nGraphs help us identify patterns, relationships, and outliers\n\nGraphs make data more understandable and shareable\n\nGraphs allow us to explore questions more quickly (initial viz → data/models → more viz)"
  },
  {
    "objectID": "lectures/03-slides.html#example-mpg-dataset",
    "href": "lectures/03-slides.html#example-mpg-dataset",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Example: mpg dataset",
    "text": "Example: mpg dataset\nImagine you are a data analyst for a car company, and have information on ~200 cars.\nPaste this code into your R Console and run it to see the mpg dataset (use R version 4.5.1):\nlibrary(ggplot2)\ndata(mpg)\nhead(mpg)\n\nReminders:\n\nNote library(ggplot2) loads the package in our current R session: What’s a package? What’s the difference between loading and installing a package?\n\nCheck your R version on Workbench: use R 4.5.1 for data viz!\n\nCheck your working directory on Workbench (“Project:”) and switch project as needed"
  },
  {
    "objectID": "lectures/03-slides.html#example-mpg-dataset-1",
    "href": "lectures/03-slides.html#example-mpg-dataset-1",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Example: mpg dataset",
    "text": "Example: mpg dataset\n\n\n# A tibble: 6 × 11\n  manufacturer model displ  year   cyl trans      drv     cty   hwy fl    class \n  &lt;chr&gt;        &lt;chr&gt; &lt;dbl&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt;      &lt;chr&gt; &lt;int&gt; &lt;int&gt; &lt;chr&gt; &lt;chr&gt; \n1 audi         a4      1.8  1999     4 auto(l5)   f        18    29 p     compa…\n2 audi         a4      1.8  1999     4 manual(m5) f        21    29 p     compa…\n3 audi         a4      2    2008     4 manual(m6) f        20    31 p     compa…\n4 audi         a4      2    2008     4 auto(av)   f        21    30 p     compa…\n5 audi         a4      2.8  1999     6 auto(l5)   f        16    26 p     compa…\n6 audi         a4      2.8  1999     6 manual(m5) f        18    26 p     compa…"
  },
  {
    "objectID": "lectures/03-slides.html#key-dataset-terms",
    "href": "lectures/03-slides.html#key-dataset-terms",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Key Dataset Terms",
    "text": "Key Dataset Terms\nThe mpg dataset has 234 observations (cars, in rows) and 11 variables (properties, in columns)\n\nObservation = each row = one car\n\nVariable = each column = a car property\n\nhwy: fuel efficiency on the highway, in miles per gallon\n\ndispl: engine size or displacement, in liters\n\nclass: type of car (compact, SUV…)\netc."
  },
  {
    "objectID": "lectures/03-slides.html#our-first-plot",
    "href": "lectures/03-slides.html#our-first-plot",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Our First Plot",
    "text": "Our First Plot\nImagine you pick two pieces of information from this car dataset:\n\nvariable 1 hwy: car fuel efficiency on the highway (in miles per gallon)\nvariable 2 displ: car engine size or displacement (in liters)\n\nYou want to visually inspect their relationship, so you start by creating a simple scatter plot…"
  },
  {
    "objectID": "lectures/03-slides.html#our-first-plot-1",
    "href": "lectures/03-slides.html#our-first-plot-1",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Our First Plot",
    "text": "Our First Plot\n\n\nWhat’s on the x-axis? And on the y -axis?\nWhat does each dot in this scatterplot represent?\nYou want a car that combines high fuel efficiency on the highway and a large engine size. Can you find one?\nDo larger engines tend to have higher or lower highway fuel efficiency??"
  },
  {
    "objectID": "lectures/03-slides.html#code-for-our-first-plot-with-ggplot2",
    "href": "lectures/03-slides.html#code-for-our-first-plot-with-ggplot2",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Code for our First Plot with ggplot2",
    "text": "Code for our First Plot with ggplot2\nlibrary(ggplot2)\n\nggplot(data = mpg) +\n  geom_point(aes(x = displ, y = hwy)) +\n  labs(title = \"Car Fuel Efficiency on the Highway vs. Car Engine Size\",\n       x = \"Car Engine Size in Liters\",\n       y = \"Car Highway MPG (Fuel Efficiency)\")"
  },
  {
    "objectID": "lectures/03-slides.html#practice",
    "href": "lectures/03-slides.html#practice",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "💻 Practice",
    "text": "💻 Practice\nBelow is a slight variation of the original code:\nlibrary(ggplot2)\ndata(mpg)\n\nggplot(mpg) +\n  geom_point(aes(x = displ, y = hwy, color = class))\n\nTeam up with someone, run the code, and answer these questions:\n\nWhat do you see? How is this new plot different from the original one?\nWhat do the first two lines of code do?\nWhat does aes() do? And color = class?\nReplace the aesthetic color with shape and re-run the code. What happens?\nCheck the documentation for geom_point() to learn about its aesthetics (Google it or paste this prompt into AI)"
  },
  {
    "objectID": "lectures/03-slides.html#grammar-of-graphics-and-ggplot2",
    "href": "lectures/03-slides.html#grammar-of-graphics-and-ggplot2",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Grammar of Graphics and ggplot2",
    "text": "Grammar of Graphics and ggplot2\nWe’ve been creating our first plot intuitively. Let’s formally introduce the grammar of graphics and ggplot2:\n\nggplot2 is the main R package used for data visualization https://ggplot2.tidyverse.org/\nIt’s part of the tidyverse, a collection of packages for data analysis: https://www.tidyverse.org/\nCreated by Hadley Wickham, who also co-authored this course textbook\nBuilt using the theory called the Grammar of Graphics, a system for creating layered plots (see https://www.tandfonline.com/doi/pdf/10.1198/jcgs.2009.07098 for an intro to this theory)"
  },
  {
    "objectID": "lectures/03-slides.html#grammar-and-grammar-of-graphics",
    "href": "lectures/03-slides.html#grammar-and-grammar-of-graphics",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Grammar and “Grammar of Graphics”",
    "text": "Grammar and “Grammar of Graphics”\n\nA grammar is a set of rules for combining words (syntax, morphology, etc.), that helps us structure a language and communicate clearly.\n\nApplied to R and ggplot2…\n\nA Grammar of Graphics is a set of rules for combining visual elements (data, aesthetics, geometries, etc.) that helps us structure plots and communicate clearly."
  },
  {
    "objectID": "lectures/03-slides.html#main-components-of-the-grammar-of-graphics",
    "href": "lectures/03-slides.html#main-components-of-the-grammar-of-graphics",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Main Components of the Grammar of Graphics",
    "text": "Main Components of the Grammar of Graphics\nIn ggplot2, a plot is made up of layers, and each layer combines several components that describe what to draw and how to draw it.\nThe five main components are:\n\nDATA: the dataset you are using (e.g. mpg data)\nGEOM: the type of plot (e.g., points, bars, lines)\nMAPPING: maps variables to aesthetics like x, y, color, etc.\nSTAT: whether the data should be transformed (e.g., counted) or not (e.g., identity)\nPOSITION: how things are arranged on the plot (e.g., stacked or jittered)"
  },
  {
    "objectID": "lectures/03-slides.html#grammar-of-graphics-code-template",
    "href": "lectures/03-slides.html#grammar-of-graphics-code-template",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Grammar of Graphics: Code Template",
    "text": "Grammar of Graphics: Code Template\nLet’s look at how these five main components show up in ggplot2 code:\n# code template\n\nggplot(data = &lt;DATA&gt;) +\n  &lt;GEOM&gt;(\n    mapping = aes(&lt;MAPPING&gt;),\n    stat = &lt;STAT&gt;,\n    position = &lt;POSITION&gt;\n  )\nAt the plot level, you can also add more components, like:\n+ &lt;COORDINATE SYSTEM&gt;\n+ &lt;FACET&gt;"
  },
  {
    "objectID": "lectures/03-slides.html#grammar-of-graphics-code-template-with-the-mpg-dataset",
    "href": "lectures/03-slides.html#grammar-of-graphics-code-template-with-the-mpg-dataset",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Grammar of Graphics: Code Template with the mpg Dataset",
    "text": "Grammar of Graphics: Code Template with the mpg Dataset\nNow, fill in this code template using the mpg data and plot it:\n\n\n# code template\n\nggplot(data = &lt;DATA&gt;) +\n  &lt;GEOM&gt;(\n    mapping = aes(&lt;MAPPING&gt;),\n    stat = &lt;STAT&gt;,\n    position = &lt;POSITION&gt;\n  ) +\n  &lt;COORDINATE&gt; +\n  &lt;FACET&gt;\n\n# code template filled with mpg data\n\nggplot(data = mpg) +\n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)"
  },
  {
    "objectID": "lectures/03-slides.html#make-and-store-a-plot",
    "href": "lectures/03-slides.html#make-and-store-a-plot",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Make and Store a Plot",
    "text": "Make and Store a Plot\nThis code makes a plot and displays it, but does not store it\n ggplot(data = mpg) +\n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)\nThis code makes a plot and stores it to an object that I named fuel_plot\nfuel_plot &lt;- ggplot(data = mpg) +\n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)\nfuel_plot"
  },
  {
    "objectID": "lectures/03-slides.html#on-coding-style-in-r",
    "href": "lectures/03-slides.html#on-coding-style-in-r",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "On Coding Style in R",
    "text": "On Coding Style in R\nBefore continuing with the Grammar of Graphics, let’s take a moment to focus on coding style (parenthesis, signs, indentation, variable names, etc.)\n\n💻 Practice\nHere’s the code from the previous slide. This time, read it focusing on its style. What do you notice?\nfuel_plot &lt;- ggplot(data = mpg) +\n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\",\n    position = \"identity\"\n  ) +\n  coord_cartesian() +\n  facet_wrap(vars(class), nrow = 1)\nfuel_plot"
  },
  {
    "objectID": "lectures/03-slides.html#coding-style-checklist",
    "href": "lectures/03-slides.html#coding-style-checklist",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Coding Style Checklist",
    "text": "Coding Style Checklist\n\nUse &lt;- to assign values to variables\nUse = to assign values to function arguments\nUse descriptive, meaningful variable names (snake_case, lowercase)\nAdd spaces around operators (e.g., +, -, &lt;-) for readability\nAvoid spaces inside parentheses or brackets\nClose every opened parenthesis\nBreak long lines and use indentation\nUse comments, but do not abuse them"
  },
  {
    "objectID": "lectures/03-slides.html#coding-style-resources",
    "href": "lectures/03-slides.html#coding-style-resources",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Coding Style Resources",
    "text": "Coding Style Resources\nResources to guide you:\n\nR for Data Science, Chapter 4\nThe tidyverse style guide\nWhy does coding style matter?"
  },
  {
    "objectID": "lectures/03-slides.html#back-to-the-grammar-of-graphics",
    "href": "lectures/03-slides.html#back-to-the-grammar-of-graphics",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Back to the Grammar of Graphics",
    "text": "Back to the Grammar of Graphics\nWe have seen the code template with these main components:\n\nKey components of layers: data, geom, mapping, stat, position\nOther plot-components: coordinate system, facets, scales, themes\n\nIn the next slides, we’ll take a closer look at a few selected aspects of these components. For the big picture, see today’s readings.\n\n\n\n\n\n\nImportant\n\n\n💡 The following slides focus on the most common aspects you’ll encounter as a beginner — not an exhaustive list. Start from these. You’ll pick up the rest as you experiment and build more plots."
  },
  {
    "objectID": "lectures/03-slides.html#pick-the-right-geometric-object",
    "href": "lectures/03-slides.html#pick-the-right-geometric-object",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Pick the Right Geometric Object",
    "text": "Pick the Right Geometric Object\nGeom: is the type of plot you make, which depends on your variables type. Most common:\n\ngeom_point() → scatterplot\ngeom_line() → line chart\ngeom_bar() → bar chart\ngeom_histogram() → histogram\ngeom_boxplot() → boxplot\n\nEach geom accepts certain aesthetics. How do you know which ones? Read the documentation, for example geom_point reference"
  },
  {
    "objectID": "lectures/03-slides.html#statistical-transformations",
    "href": "lectures/03-slides.html#statistical-transformations",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Statistical Transformations",
    "text": "Statistical Transformations\nStat: transforms your data for plotting and depends on which geometric object you are using (e.g. type of graph).\nScatterplot: geom_point() uses stat = \"identity\" by default\nggplot(data = mpg) + \n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class))\nBar chart: geom_bar() uses stat = \"count\" by default\nggplot(data = mpg) + \n  geom_bar(mapping = aes(x = class)) # implicitly counts"
  },
  {
    "objectID": "lectures/03-slides.html#mapping-aesthetics",
    "href": "lectures/03-slides.html#mapping-aesthetics",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Mapping Aesthetics",
    "text": "Mapping Aesthetics\nAes: defines how data variables are mapped to visual properties of a plot (e.g., x, y, color, size, shape).\nggplot(data = mpg) +\n  geom_point(mapping = aes(x = displ, y = hwy, color = class))\nEspecially when using color small mistakes can make the difference, let’s practice…"
  },
  {
    "objectID": "lectures/03-slides.html#adding-titles-labels-and-captions",
    "href": "lectures/03-slides.html#adding-titles-labels-and-captions",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Adding Titles, Labels, and Captions",
    "text": "Adding Titles, Labels, and Captions\nTo add text elements to your plot, use labs():\nggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  labs(\n    title = \"Car Fuel Efficiency on the Highway vs. Car Engine Size\",\n    subtitle = \"Colored by car type\",\n    x = \"Car Engine Size in Liters\",\n    y = \"Car Highway MPG (Fuel Efficiency)\",\n    caption = \"Data: mpg dataset (n = 234)\")\nFor more control, combine it with theme():\nggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +\n  geom_point() +\n  labs(\n    title = \"Car Fuel Efficiency on the Highway vs. Car Engine Size\",\n    subtitle = \"Colored by car type\",\n    x = \"Car Engine Size in Liters\",\n    y = \"Car Highway MPG (Fuel Efficiency)\",\n    caption = \"Data: mpg dataset (n = 234)\") +\n  theme(plot.title = element_text(face = \"bold\", size = 18))"
  },
  {
    "objectID": "lectures/03-slides.html#layers-can-overlap",
    "href": "lectures/03-slides.html#layers-can-overlap",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Layers can Overlap",
    "text": "Layers can Overlap\nLayers create the visual elements on a plot. Each layer adds something new to the visualization and can inherit components as shown below:\nggplot(data = mpg) + \n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\", \n    position = \"identity\"\n  ) + \n  geom_smooth(\n    mapping = aes(x = displ, y = hwy),\n    method = \"lm\"\n  )"
  },
  {
    "objectID": "lectures/03-slides.html#example-1",
    "href": "lectures/03-slides.html#example-1",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Example 1",
    "text": "Example 1\nExample from the previous slide\nLong version:\nggplot(data = mpg) + \n  geom_point(\n    mapping = aes(x = displ, y = hwy, color = class),\n    stat = \"identity\", \n    position = \"identity\") + \n  geom_smooth(\n    mapping = aes(x = displ, y = hwy),\n    method = \"lm\")\n\nShort version:\nggplot(data = mpg, mapping = aes(x = displ, y = hwy)) + \n  geom_point(aes(color = class)) + \n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "lectures/03-slides.html#example-2",
    "href": "lectures/03-slides.html#example-2",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Example 2",
    "text": "Example 2\nScatterplot between cars’ engine size (displ) and highway fuel efficiency (hwy)\nLong version:\nggplot() +\n  layer(\n    data = mpg, \n    mapping = aes(x = displ, y = hwy),\n    geom = \"point\", \n    stat = \"identity\", \n    position = \"identity\"\n  ) +\n  coord_cartesian()\n\nShort version:\nggplot(data = mpg, aes(x = displ, y = hwy)) +\n  geom_point()"
  },
  {
    "objectID": "lectures/03-slides.html#quick-review",
    "href": "lectures/03-slides.html#quick-review",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Quick Review",
    "text": "Quick Review\n\nWhat does geom_point() do?\nWhat does stat = \"identity\" mean?\nWhen would you use facet_wrap()?\nWhat’s wrong with aes(color = \"blue\")?\nWhat does it mean that layers can inherit elements?\n\nTry answering these without peeking at the slides!"
  },
  {
    "objectID": "lectures/03-slides.html#practice-gapminder",
    "href": "lectures/03-slides.html#practice-gapminder",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "💻 Practice: Gapminder",
    "text": "💻 Practice: Gapminder\nDownload today’s in-class materials from the website!\nThe gapminder dataset:\n\nData on various socio-economic indicators (e.g., life expectancy, GDP per capita, and population) for countries around the world over multiple years (1957-2008)\nhttps://cran.r-project.org/web/packages/gapminder/readme/README.html\n\nhttps://www.gapminder.org/"
  },
  {
    "objectID": "lectures/03-slides.html#recap-what-we-learned-today",
    "href": "lectures/03-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nCore components of the Grammar of Graphics\nGenerate simple graphs with ggplot2\nUse the Grammar of Graphics template and simplify it with defaults\nR Coding Style Best Practices"
  },
  {
    "objectID": "lectures/03-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/03-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 3",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/04-slides.html#our-goal-today-using-graphs-for-exploratory-data-analysis",
    "href": "lectures/04-slides.html#our-goal-today-using-graphs-for-exploratory-data-analysis",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Our Goal Today: Using Graphs for Exploratory Data Analysis",
    "text": "Our Goal Today: Using Graphs for Exploratory Data Analysis\n\nDisplay variation and co-variation: Learn how to visualize the distribution of a single variable (cost to attend a school) and of two or more variables (cost and admrate).\nMatch graph type to variable type: Choose appropriate graph types depending on whether variables are categorical (school type), continuous (cost), or both.\nInterpret the graph: Practice describing what a graph reveals, such as trends, group differences, and outliers."
  },
  {
    "objectID": "lectures/04-slides.html#about-the-scorecard-dataset",
    "href": "lectures/04-slides.html#about-the-scorecard-dataset",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "About the scorecard dataset",
    "text": "About the scorecard dataset\nThe U.S. Department of Education collects annual statistics on colleges and universities in the United States: https://collegescorecard.ed.gov/data\nThis dataset includes variables such as:\n\nname: name of the school\nstate: state where the school is located\n\ntype: school type (e.g., Public, Private Nonprofit, Private For-Profit)\n\nadmrate: admission rate (e.g., 0.91 = 91%)\n\ncost: published cost of attendance\n\nnetcost: net cost of attendance after financial aid\n\nsatavg: average SAT score of admitted students\n\n...: many additional variables\n\nWe’ll focus on a subset of this data from the 2018–2019 academic year."
  },
  {
    "objectID": "lectures/04-slides.html#about-the-scorecard-dataset-1",
    "href": "lectures/04-slides.html#about-the-scorecard-dataset-1",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "About the scorecard dataset",
    "text": "About the scorecard dataset\nlibrary(tidyverse)\nlibrary(rcis)\ndata(scorecard)\nglimpse(scorecard)\n\n\nRows: 1,732\nColumns: 14\n$ unitid    &lt;dbl&gt; 100654, 100663, 100706, 100724, 100751, 100830, 100858, 1009…\n$ name      &lt;chr&gt; \"Alabama A & M University\", \"University of Alabama at Birmin…\n$ state     &lt;chr&gt; \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", …\n$ type      &lt;fct&gt; \"Public\", \"Public\", \"Public\", \"Public\", \"Public\", \"Public\", …\n$ admrate   &lt;dbl&gt; 0.9175, 0.7366, 0.8257, 0.9690, 0.8268, 0.9044, 0.8067, 0.53…\n$ satavg    &lt;dbl&gt; 939, 1234, 1319, 946, 1261, 1082, 1300, 1230, 1066, NA, 1076…\n$ cost      &lt;dbl&gt; 23053, 24495, 23917, 21866, 29872, 19849, 31590, 32095, 3431…\n$ netcost   &lt;dbl&gt; 14990, 16953, 15860, 13650, 22597, 13987, 24104, 22107, 2071…\n$ avgfacsal &lt;dbl&gt; 69381, 99441, 87192, 64989, 92619, 71343, 96642, 56646, 5400…\n$ pctpell   &lt;dbl&gt; 0.7019, 0.3512, 0.2536, 0.7627, 0.1772, 0.4644, 0.1455, 0.23…\n$ comprate  &lt;dbl&gt; 0.2974, 0.6340, 0.5768, 0.3276, 0.7110, 0.3401, 0.7911, 0.69…\n$ firstgen  &lt;dbl&gt; 0.3658281, 0.3412237, 0.3101322, 0.3434343, 0.2257127, 0.381…\n$ debt      &lt;dbl&gt; 15250, 15085, 14000, 17500, 17671, 12000, 17500, 16000, 1425…\n$ locale    &lt;fct&gt; City, City, City, City, City, City, City, City, City, Suburb…"
  },
  {
    "objectID": "lectures/04-slides.html#the-scorecard-dataset-making-a-plot",
    "href": "lectures/04-slides.html#the-scorecard-dataset-making-a-plot",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "The scorecard dataset: making a plot",
    "text": "The scorecard dataset: making a plot\nGiven this question “Which type of college has the highest average SAT score?”, and the task of answering it by creating a ggplot2 graph.\nHow would you approach this task?\n\nidentify the variable(s) you need\nfind them in the data\nidentify the variable(s) types (mainly: categorical or continuous)\nuse this info to select the most appropriate plot\nthink about the code\ngenerate the graph and interpret it"
  },
  {
    "objectID": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score",
    "href": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Which type of college has the highest average SAT score?",
    "text": "Which type of college has the highest average SAT score?\nAnswer using a boxplot\nggplot(data = scorecard, mapping = aes(x = type, y = satavg)) +\n  geom_boxplot()\n\nWhat’s a boxplot?"
  },
  {
    "objectID": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score-1",
    "href": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score-1",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Which type of college has the highest average SAT score?",
    "text": "Which type of college has the highest average SAT score?\nAnswer using a faceded histogram\nggplot(data = scorecard, mapping = aes(x = satavg)) +\n  geom_histogram() + \n  facet_wrap(facets = vars(type))\n\nWhat’s a histogram?"
  },
  {
    "objectID": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score-2",
    "href": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score-2",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Which type of college has the highest average SAT score?",
    "text": "Which type of college has the highest average SAT score?\nLet’s interpret these graphs:\nWhat do these graphs reveal about average SAT scores by type of college? Do they reveal the same info?"
  },
  {
    "objectID": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score-3",
    "href": "lectures/04-slides.html#which-type-of-college-has-the-highest-average-sat-score-3",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Which type of college has the highest average SAT score?",
    "text": "Which type of college has the highest average SAT score?\n\n\n\n\n\n\n\nInterpreting plots is as important as writing code\n\n\nGeneral interpretation:\nPrivate nonprofit schools have the highest average SAT scores, closely followed by public schools, and then private for-profit schools.\nMore refined interpretation:\nThe histogram shows that each school type has a different number of colleges: private for-profit schools are much fewer than the others. This difference in sample size isn’t visible in the boxplot, but it matters: averages from small groups may not reflect the broader category. Seeing the full distribution gives a more complete picture."
  },
  {
    "objectID": "lectures/04-slides.html#asking-more-questions-with-dplyr-sneak-peek-for-next-week",
    "href": "lectures/04-slides.html#asking-more-questions-with-dplyr-sneak-peek-for-next-week",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Asking More Questions with dplyr (sneak peek for next week!)",
    "text": "Asking More Questions with dplyr (sneak peek for next week!)\nHow many schools are in each type?\nscorecard %&gt;% count(type) \nWhich schools are categorized as private for-profit?\nscorecard %&gt;%\n  filter(type == \"Private, for-profit\") %&gt;%\n  select(name, state, type, satavg, cost)\nWhat about the University of Chicago?\nscorecard %&gt;% filter(name == \"University of Chicago\")\nEtc."
  },
  {
    "objectID": "lectures/04-slides.html#once-you-draw-a-plot-ask-yourself",
    "href": "lectures/04-slides.html#once-you-draw-a-plot-ask-yourself",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Once you draw a plot, ask yourself:",
    "text": "Once you draw a plot, ask yourself:\n\n\nSubstantive questions:\n\nWhat does this graph tell?\nAre there patterns? Outliers?\nWhat hypotheses can I generate?\nWhat else I want to know?\nShould I dig deeper with dplyr?\nShould I wrangle my data and plot again?\nEtc.\n\n\nStylistic questions:\n\nIs the chosen plot appropriate (matches variable type)?\nIs the plot clear and easy to understand?\nIs it too busy or too simple?\nCould it be improved? (titles, labels, colors, etc.)\nCan I make an additional plot with these variables?\nEtc."
  },
  {
    "objectID": "lectures/04-slides.html#types-of-visualizations-and-best-graph-types",
    "href": "lectures/04-slides.html#types-of-visualizations-and-best-graph-types",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Types of Visualizations and Best Graph Types",
    "text": "Types of Visualizations and Best Graph Types\n1. Which kind of variation do I want to represent?\n\nWithin single variable\nAmong Two variables\nAmong Three variables\n\n\n2. What type(s) are my variables?\n\nContinuous (e.g., satavg average SAT score, cost published cost)\nCategorical (e.g., type school type, state U.S. state)\nOther types (often treated as categorical): ordinal, nominal, binary\n\n\nTip: Ask yourself these two questions before jumping into the code!"
  },
  {
    "objectID": "lectures/04-slides.html#univariate-one-variable",
    "href": "lectures/04-slides.html#univariate-one-variable",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Univariate (One Variable)",
    "text": "Univariate (One Variable)\nTo show how values vary within a single variable:\n\nOne continuous variable → Histogram\nOne categorical variable → Bar Chart\n\n\n\n\n\n\n\n\n\n\n\nFunction\nWhat Gets Counted\nWhen to Use\n\n\n\n\ngeom_histogram()\nHow many values fall into each numeric bin\nWhen x is continuous\n\n\ngeom_bar()\nHow many observations are in each category\nWhen x is categorical"
  },
  {
    "objectID": "lectures/04-slides.html#bivariate-two-variables",
    "href": "lectures/04-slides.html#bivariate-two-variables",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Bivariate (Two Variables)",
    "text": "Bivariate (Two Variables)\nTo show how two variables co-vary:\n\nTwo continuous variables → Scatterplot\nOne categorical + one continuous → Box Plot\nTwo categorical variables → Grouped or Stacked Bar Chart"
  },
  {
    "objectID": "lectures/04-slides.html#multivariate-three-variables",
    "href": "lectures/04-slides.html#multivariate-three-variables",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Multivariate (Three Variables)",
    "text": "Multivariate (Three Variables)\nTo compare patterns across subgroups:\n\nOne categorical + two continuous → Faceted Scatterplot\nTwo categorical + one continuous → Grouped Box Plot"
  },
  {
    "objectID": "lectures/04-slides.html#main-graph-types-and-when-to-use-them",
    "href": "lectures/04-slides.html#main-graph-types-and-when-to-use-them",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Main Graph Types and When to Use Them",
    "text": "Main Graph Types and When to Use Them\n\n\n\nType of Graph\nggplot2 Function\nInput Variables\nGoal\n\n\n\n\nHistogram\ngeom_histogram()\nOne continuous (e.g., age, income)\nShow the distribution of values\n\n\nBar Chart\ngeom_bar()\nOne categorical (e.g., region, gender)\nShow frequencies or counts of categories\n\n\nStacked Bar Chart\ngeom_bar() + fill\nTwo categorical variables (e.g., region by gender)\nCompare parts of a whole across categories\n\n\nScatterplot\ngeom_point()\nTwo continuous variables (e.g., height vs. weight, price vs. rating)\nShow relationship or correlation\n\n\nBox Plot\ngeom_boxplot()\nOne continuous + one categorical (e.g., income by gender)\nCompare distributions, spot outliers\n\n\nFaceted Scatterplot\nfacet_wrap() + geom_point()\nTwo continuous + one categorical (e.g., by country or year)\nCompare patterns across groups\n\n\n\nThese are the most common combinations. There are more options as you explore deeper!"
  },
  {
    "objectID": "lectures/04-slides.html#practice-make-graphs",
    "href": "lectures/04-slides.html#practice-make-graphs",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "💻 Practice: Make Graphs!",
    "text": "💻 Practice: Make Graphs!\nOn the next slide, there are a list of graphs to create.\nIn small groups, use the scorecard dataset to create the most appropriate graph for each one.\n\nBefore plotting: Think about the variable types and the kind of variation you want to represent. (Use the reference slides as a guide.)\nWhile plotting: Keep it simple, as you would for an initial Exploratory Data Analysis (no need to add labels, legends, color, etc.). Look up the documentation for each graph: you do not need to remember all the code!\nAfter plotting: Stare at your graph… look for patterns, outliers, or any notable features, and interpret what graph tells about the data."
  },
  {
    "objectID": "lectures/04-slides.html#practice-1",
    "href": "lectures/04-slides.html#practice-1",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "💻 Practice",
    "text": "💻 Practice\n\nShare your solutions here https://codeshare.io/5z6PkW\nGraph 1: Plot the annual total cost of school attendance across the U.S. (cost)\nGraph 2: Plot the total number of schools in the U.S. by school type (type)\nGraph 3: Plot the annual total cost and net cost of attendance to schools in the U.S. (cost, netcost)\nGraph 4: Plot the annual total cost of attendance by school type (cost, type)\nGraph 5: Plot the annual total cost of attendance and net cost of attendance by school type (cost, netcost, type)"
  },
  {
    "objectID": "lectures/04-slides.html#download-today-materials",
    "href": "lectures/04-slides.html#download-today-materials",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "💻 Download Today Materials",
    "text": "💻 Download Today Materials\nDownload today’s class materials from our website for:\n\nfurther insights into these tasks\nadditional practice exercises (optional)"
  },
  {
    "objectID": "lectures/04-slides.html#takeaways-and-tips",
    "href": "lectures/04-slides.html#takeaways-and-tips",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Takeaways and Tips",
    "text": "Takeaways and Tips\nFollow this approach to move from quick exploration to polished, communicative plots:\n\n\nWhen exploring your data:\n\nStart with simple and plots to get a sense of the distribution and relationships\nFocus on interpretation first, not style\nAsk questions: What stands out? Are there outliers, trends, or surprises? What else do you want to know?\n\n\nOnce you settle on a plot:\n\nRefine the code to improve readability and aesthetics\nAdd styling elements (labels, scales, legends, and themes. etc. as needed)\nUse polished plots for assignments, reports, or presentations\n\n\nTypically, researchers create many exploratory plots and only a few make it to the final report."
  },
  {
    "objectID": "lectures/04-slides.html#recap-what-we-learned-today",
    "href": "lectures/04-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nPick graph types that match the types of variables in your data\nRead and interpret visualizations\nPracice using ggplot and dplyr"
  },
  {
    "objectID": "lectures/04-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/04-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 4",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/05-slides.html#meet-the-palmer-penguins",
    "href": "lectures/05-slides.html#meet-the-palmer-penguins",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Meet the Palmer Penguins!",
    "text": "Meet the Palmer Penguins!\nThe palmerpenguins package includes two datasets (already installed on our Workbench):\n\npenguins with clean data of 244 penguins — we use this today\n\npenguins_raw with uncleaned version the same data\n\n\nPenguins by Allison Horst"
  },
  {
    "objectID": "lectures/05-slides.html#meet-the-palmer-penguins-1",
    "href": "lectures/05-slides.html#meet-the-palmer-penguins-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Meet the Palmer Penguins!",
    "text": "Meet the Palmer Penguins!\n\n\nData (variables) we have about these 244 penguins:\n\nSpecies: Adelie, Chinstrap, Gentoo\n\nIsland: Biscoe, Dream, Torgersen\n\nBill length\n\nBill depth\n\nFlipper length\n\nBody mass\n\nSex\n\nYear\n\n\n\n\n\nBill Measurement"
  },
  {
    "objectID": "lectures/05-slides.html#penguins-dataset-overview",
    "href": "lectures/05-slides.html#penguins-dataset-overview",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Penguins Dataset Overview",
    "text": "Penguins Dataset Overview\n# load packages\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n# explore data\nbind_rows(head(penguins, 5), tail(penguins, 5))\n\n\n\n\n# A tibble: 10 × 8\n   species   island   bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   &lt;fct&gt;     &lt;fct&gt;             &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n 1 Adelie    Torgers…           39.1          18.7               181        3750\n 2 Adelie    Torgers…           39.5          17.4               186        3800\n 3 Adelie    Torgers…           40.3          18                 195        3250\n 4 Adelie    Torgers…           NA            NA                  NA          NA\n 5 Adelie    Torgers…           36.7          19.3               193        3450\n 6 Chinstrap Dream              55.8          19.8               207        4000\n 7 Chinstrap Dream              43.5          18.1               202        3400\n 8 Chinstrap Dream              49.6          18.2               193        3775\n 9 Chinstrap Dream              50.8          19                 210        4100\n10 Chinstrap Dream              50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "lectures/05-slides.html#scatterplot-flipper-length-vs.-body-mass",
    "href": "lectures/05-slides.html#scatterplot-flipper-length-vs.-body-mass",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Scatterplot: Flipper Length vs. Body Mass",
    "text": "Scatterplot: Flipper Length vs. Body Mass\nStart from what we know: scatter plot with two numeric variables\nCopy and paste this code in R (use R version 4.5.1):\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nhead(penguins)\n\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species)) +\n  labs(title = \"Penguins: Body Mass vs. Flipper Length\")\n\n\nInterpret: How does the relationship between flipper length and body mass differ across species?"
  },
  {
    "objectID": "lectures/05-slides.html#bar-plot-number-of-penguins-by-species",
    "href": "lectures/05-slides.html#bar-plot-number-of-penguins-by-species",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Bar Plot: Number of Penguins by Species",
    "text": "Bar Plot: Number of Penguins by Species\nTry a different plot: bar plot with counts for one categorical variable\nCopy and paste this code in R (use R version 4.5.1):\nggplot(data = penguins, aes(x = species)) +\n  geom_bar() +\n  labs(title = \"Count of Penguins by Species\")\n\n\nInterpret: What does this bar plot tell us about penguin species frequency?"
  },
  {
    "objectID": "lectures/05-slides.html#data-manipulation-with-dplyr",
    "href": "lectures/05-slides.html#data-manipulation-with-dplyr",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Data Manipulation with dplyr",
    "text": "Data Manipulation with dplyr\nToday we introduce a second package from the tidyverse: dplyr for data manipulation.\n\nDesigned for manipulating data frames and tibbles\nIncludes intuitive, clearly named functions for common tasks like:\n\nfilter() to keep rows based on conditions,\nsummarize() to calculate summaries (e.g., averages),\ngroup_by for grouped operations,\nand many more functions\n\n\nLet’s work together through two questions that require us to use these three dplyr functions!"
  },
  {
    "objectID": "lectures/05-slides.html#programming-is-problem-solving",
    "href": "lectures/05-slides.html#programming-is-problem-solving",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Programming is Problem-Solving",
    "text": "Programming is Problem-Solving\nPenguins Dataset:\n\n\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n\n\n\n\n\n\nFrom Question to Code: Practice Translating Logic into R\n\n\nQ1: What is the average body mass of an Adelie penguin?\nQ2: What is the average body mass for each penguin species (we have three species)?\nOur Goals\n1. Identify the logical/conceptual steps you’d give R to answer these questions\n2. Translate those steps into clear, executable code"
  },
  {
    "objectID": "lectures/05-slides.html#q1-what-is-the-average-body-mass-of-an-adelie-penguin",
    "href": "lectures/05-slides.html#q1-what-is-the-average-body-mass-of-an-adelie-penguin",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Q1: What is the average body mass of an Adelie penguin?",
    "text": "Q1: What is the average body mass of an Adelie penguin?\nPenguins Dataset:\n\n\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nInstructions to answer the first question:\n\nIdentify the data and variables you need\nFilter only the observations (rows) where species is Adelie\nCalculate the mean of the variable body_mass_g for this group\n\nOpen R: let’s turn to these steps into code using dplyr"
  },
  {
    "objectID": "lectures/05-slides.html#q2-what-is-the-average-body-mass-for-each-penguin-species",
    "href": "lectures/05-slides.html#q2-what-is-the-average-body-mass-for-each-penguin-species",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Q2: What is the average body mass for each penguin species?",
    "text": "Q2: What is the average body mass for each penguin species?\nPenguins Dataset:\n\n\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nInstructions to answer the second question:\n\nIdentify the data and variables you need\nGroup the observations (rows) by species\nCalculate the mean of the variable body_mass_g for all groups\n\nOpen R: let’s turn to these steps into code using dplyr"
  },
  {
    "objectID": "lectures/05-slides.html#assignment-operators",
    "href": "lectures/05-slides.html#assignment-operators",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Assignment Operators",
    "text": "Assignment Operators\nx &lt;- 5                # assign 5 to an object\nmean(x = c(1, 2, 3))  # use = to specify an argument inside a function\n \npenguins_species &lt;- group_by(penguins, species)\nsummarize(penguins_species, avg_mass = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/05-slides.html#logical-operators",
    "href": "lectures/05-slides.html#logical-operators",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Logical Operators",
    "text": "Logical Operators\nx == x    # is equal (TRUE or FALSE)\nx != y    # is not equal (TRUE or FALSE) \nx &lt; y     # less than\nx &lt;= y    # less than or equal to \ny &gt; x     # more than\ny &gt;=      # more than or equal to\n\n\nadelie &lt;- filter(penguins, species == \"Adelie\")\n\n\n\nno_adelie &lt;- filter(penguins, species != \"Adelie\")\n\n\n\nheavy &lt;- filter(penguins, body_mass_g &gt; 4500)"
  },
  {
    "objectID": "lectures/05-slides.html#more-logical-operators",
    "href": "lectures/05-slides.html#more-logical-operators",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "More Logical Operators",
    "text": "More Logical Operators\nx | y     # EITHER x OR y has to be true\nx & y     # BOTH x AND y have to be true\nx &! y    # x AND NOT y (x is true AND y is false)\n\n\nExample use of | operator. What does this code return?\nfilter(penguins, species == \"Adelie\" | species == \"Chinstrap\")\n\n\n\nExample use of & operator. What does this code return?\nfilter(penguins, species == \"Adelie\" & species == \"Chinstrap\")"
  },
  {
    "objectID": "lectures/05-slides.html#the-or-operator-can-be-used-in-two-ways",
    "href": "lectures/05-slides.html#the-or-operator-can-be-used-in-two-ways",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "The OR operator can be used in two ways",
    "text": "The OR operator can be used in two ways\nx | y     # EITHER x OR y has to be true\nx & y     # BOTH x AND y have to be true\nx &! y    # x AND NOT y (x is true AND y is false)\n\n\nExample use of | operator with the extended syntax:\npenguins_adelie_chin &lt;- filter(penguins, species == \"Adelie\" | species == \"Chinstrap\")\n\n\n\nSame code with the shorter syntax using %in%:\npenguins_adelie_chin &lt;- filter(penguins, species %in% c(\"Adelie\", \"Chinstrap\"))"
  },
  {
    "objectID": "lectures/05-slides.html#practice-logical-operators-with-filter",
    "href": "lectures/05-slides.html#practice-logical-operators-with-filter",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "💻 Practice: Logical Operators with filter()",
    "text": "💻 Practice: Logical Operators with filter()\nLogical operators are often used together with the filter() function from dplyr\nPractice using them with the penguins dataset:\n\nTask 1: Get all Adelie penguins with flipper length greater than or equal to 180 mm\nTask 2: Get all penguins on Dream and Torgersen islands that are not female\n\nShare your code here: https://codeshare.io/5zlNLE"
  },
  {
    "objectID": "lectures/05-slides.html#recap-of-what-learned-so-far",
    "href": "lectures/05-slides.html#recap-of-what-learned-so-far",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Recap of What Learned so Far",
    "text": "Recap of What Learned so Far\nConceptually, any data transformation using dplyr requires us to:\n\nIdentify the data frame and the variables we need\nUse dplyr functions to tell R what action to take on which variable(s). These functions:\n\nAct like verbs in a sentence: they express what to do with the data\nCan be combined to perform complex operations\n\nSave the result, usually into a new object (a new dataframe)"
  },
  {
    "objectID": "lectures/05-slides.html#key-dplyr-functions",
    "href": "lectures/05-slides.html#key-dplyr-functions",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Key dplyr Functions",
    "text": "Key dplyr Functions\nThe package dplyr has many functions, but you don’t need to memorize them all!\nOur Goals: Memorize the key functions + Look up the rest dplyr.tidyverse.org"
  },
  {
    "objectID": "lectures/05-slides.html#key-dplyr-functions-1",
    "href": "lectures/05-slides.html#key-dplyr-functions-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Key dplyr Functions",
    "text": "Key dplyr Functions\n\n\n\n\n\n\n\nfunction()\nWhat it does\n\n\n\n\nfilter()\nSelects rows based on values in one or more columns\n\n\narrange()\nReorders rows based on the values in specified columns\n\n\nselect()\nChooses specific columns by name\n\n\nrename()\nRenames one or more columns\n\n\nmutate()\nAdds new columns or modifies existing ones\n\n\ngroup_by()\nGroups the data by one or more variables for grouped operations\n\n\nsummarize()\nReduces each group to a single row using summary statistics (e.g., mean, sum, n)\n\n\n\n\n\n\n\n\n\n\n\nTip for Remembering These Functions\n\n\nEach row is an observation (e.g., one penguin) and each column is a variable (e.g., species, body mass). Some functions works on rows like filter(), arrange() others on columns like select(), mutate()."
  },
  {
    "objectID": "lectures/05-slides.html#unpacking-group_by",
    "href": "lectures/05-slides.html#unpacking-group_by",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Unpacking group_by()",
    "text": "Unpacking group_by()\nThis function tells R to temporarily group the data by one or more variables, so the next function runs within each group. For example, this code groups the data by species, so whatever runs next (here summarize) happens for each species separately:\ngrouped &lt;- group_by(penguins, species)\nsummarize(grouped, avg_mass = mean(body_mass_g, na.rm = TRUE))\n\n\n\n\n\n\n\n\ngroup_by() does not change the data\n\n\ngroup_by() doesn’t change your data: it changes how the next function treats the data. Typically, it is used before summarize(), fiter(), mutate(), or arrange() to make those functions run once per group, not across the whole dataset."
  },
  {
    "objectID": "lectures/05-slides.html#practice",
    "href": "lectures/05-slides.html#practice",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "💻 Practice",
    "text": "💻 Practice\nWhat is the average body mass for Adelie penguins by sex?\n\nFirst, think: How would you approach this question conceptually? Break it down into clear steps before coding.\nThen, code: Translate those steps into R using the appropriate dplyr functions.\nHint: You’ll need to use three dplyr functions here\nShare your code here: https://codeshare.io/5zlNLE"
  },
  {
    "objectID": "lectures/05-slides.html#filter-or-group-first",
    "href": "lectures/05-slides.html#filter-or-group-first",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "🧠 Filter or Group First?",
    "text": "🧠 Filter or Group First?\nTask: Calculate the average body mass for Adelie penguins by sex.\n\n\n✅ Filter for Adelie, then group by sex, then summarize\nGroup by sex, then filter for Adelie, then summarize\n\nGroup by species, filter for Adelie, then group by sex, then summarize\n\nFilter by both species and sex, then group, then summarize\n\nGroup by both species and sex, then summarize, then filter\n\nThe first is the best approach in this case. The other approaches are all correct (try them out!), but are less readable or do more work than needed.\nThe next slide compares the first two, which are the most common."
  },
  {
    "objectID": "lectures/05-slides.html#filter-or-group-first-1",
    "href": "lectures/05-slides.html#filter-or-group-first-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "🧠 Filter or Group First?",
    "text": "🧠 Filter or Group First?\nTask: Calculate the average body mass for Adelie penguins by sex.\n\n\n\nFilter → Group (Best Practice here)\n\nFilter first to keep only Adelie penguins\n→ reduces rows right away\nGroup the filtered data by sex\n→ only relevant data is grouped\n\nSummarize to get average\n\n\n\nGroup → Filter (Works but Not Ideal here)\n\nGroup all penguins by sex\n→ includes extra, unneeded data\n\nFilter to keep only Adelie penguins\n→ discards part of what was grouped\n\nSummarize to get average"
  },
  {
    "objectID": "lectures/05-slides.html#filter-or-group-first-2",
    "href": "lectures/05-slides.html#filter-or-group-first-2",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "🧠 Filter or Group First?",
    "text": "🧠 Filter or Group First?\nThe best order depends on the task (think first!) but here’s a rule of thumb:\n\nFilter first when you can reduce the data before grouping. Example: Calculate the average body mass for Adelie penguins by sex.\nadelie &lt;- filter(penguins, species == \"Adelie\")\nadelie_by_sex &lt;- group_by(adelie, sex)\nresult &lt;- summarize(adelie_by_sex, \n                    avg_mass = mean(body_mass_g, na.rm = TRUE))\n\nGroup first only when your filter depends on group-level summaries. Example: Calculate the average body mass only for species whose average bill length is over 40 mm.\nby_species &lt;- group_by(penguins, species)\navg_bill_high &lt;- filter(by_species, mean(bill_length_mm, na.rm = TRUE) &gt; 40)\nresult &lt;- summarize(avg_bill_high, \n                    avg_mass = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/05-slides.html#in-class-code-debugging-note",
    "href": "lectures/05-slides.html#in-class-code-debugging-note",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "In-class Code: Debugging Note",
    "text": "In-class Code: Debugging Note\nSlide based on the code we debugged in class!\nThe code group_by(penguins, species == \"Adelie\") runs, but gives unexpected results. Why? group_by expects a variable (column), not a logical condition. Writing group_by(penguins, species == \"Adelie\") creates a logical vector (TRUE/FALSE), and groups by these values. You could make it work by cleaning or reshaping the data afterward, but it’s not good practice.\nTherefore:\n\nUse group_by() with variable names only (columns), not filtering conditions\n\nUse filter() with logical conditions to keep only selected rows"
  },
  {
    "objectID": "lectures/05-slides.html#pipes-to-chain-commands",
    "href": "lectures/05-slides.html#pipes-to-chain-commands",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Pipes to Chain Commands",
    "text": "Pipes to Chain Commands\nPipes allow you to write a sequence of operations by passing the result of one function into the next making your code more readable and logical. Compare these two versions of the same code to calculate the average body mass for Adelie penguins by island.\nWithout pipes:\nadelie &lt;- filter(penguins, species == \"Adelie\")\nadelie_island &lt;- group_by(adelie, island)\nadelie_avg_mass_island &lt;- summarize(adelie_island, body_mass = mean(body_mass_g, na.rm = TRUE))\nWith pipes %&gt;% or |&gt;:\nadelie_avg_mass_island &lt;- penguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  group_by(island) |&gt;\n  summarize(body_mass = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/05-slides.html#multiple-ways-to-write-r-code-pipes-are-often-the-best-choice",
    "href": "lectures/05-slides.html#multiple-ways-to-write-r-code-pipes-are-often-the-best-choice",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Multiple Ways to Write R Code — Pipes Are Often the Best Choice",
    "text": "Multiple Ways to Write R Code — Pipes Are Often the Best Choice\nPipes are great and our ultimate goal. But there are several ways to write the same R code.\nIn fact, R didn’t have pipes for a long time!\nLet’s compare different ways to write the same code…"
  },
  {
    "objectID": "lectures/05-slides.html#four-different-options-to-code-this-task",
    "href": "lectures/05-slides.html#four-different-options-to-code-this-task",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Four Different Options to Code This Task",
    "text": "Four Different Options to Code This Task\nTask: Calculate the average body mass for Adelie penguins by island.\n\n\n\n\n\n\n\n\nStrategy: Break Down the Task Before You Code it!\n\n\n\nIdentify data and variable needed\n\nFilter the data for rows where species is Adelie\n\nGroup the filtered data by island\n\nCalculate the average body mass for each group"
  },
  {
    "objectID": "lectures/05-slides.html#option-1-save-each-step-in-a-new-data-frame",
    "href": "lectures/05-slides.html#option-1-save-each-step-in-a-new-data-frame",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Option 1: Save each step in a new data frame",
    "text": "Option 1: Save each step in a new data frame\n\npenguins_adelie &lt;- filter(penguins, species == \"Adelie\")\npenguins_adelie_island &lt;- group_by(penguins_adelie, island)\npenguins_final &lt;- summarize(penguins_adelie_island, \n                            body_mass = mean(body_mass_g, na.rm = TRUE))\nprint(penguins_final)\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This is valid code.\n⚠️ Drawback: You must save each intermediate object. This can clutter your environment, increase R memory usage with large datasets, and make your code more prone to typos. Shorter names for each step might reduce typos but sacrifice clarity, which is not good for self-documentation."
  },
  {
    "objectID": "lectures/05-slides.html#option-2-replace-the-original-data-frame",
    "href": "lectures/05-slides.html#option-2-replace-the-original-data-frame",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Option 2: Replace the original data frame",
    "text": "Option 2: Replace the original data frame\n\npenguins &lt;- filter(penguins, species == \"Adelie\")\npenguins &lt;- group_by(penguins, island)\npenguins &lt;- summarize(penguins, body_mass = mean(body_mass_g, na.rm = TRUE))\nprint(penguins)\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This also works, but it’s not good practice.\n⚠️ Drawback: It overwrites the original dataset. If something goes wrong midway, you need to re-run everything.\n\n\n\n\n\n\nWarning\n\n\nThis approach is risky — especially when working with important datasets. Always keep a copy of your original data before modifying it."
  },
  {
    "objectID": "lectures/05-slides.html#option-3-function-composition",
    "href": "lectures/05-slides.html#option-3-function-composition",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Option 3: Function composition",
    "text": "Option 3: Function composition\n\ndata(penguins)\nsummarize(group_by(filter(penguins, species == \"Adelie\"), island), \n          body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This also works, and some people like this style.\n⚠️ Drawback: It’s harder to read and debug. You must follow it from the inside out, which makes it harder to read for humans. If something breaks, it’s difficult to isolate where the error is happening as you can’t easily inspect intermediate results."
  },
  {
    "objectID": "lectures/05-slides.html#option-4-pipes-the-winner",
    "href": "lectures/05-slides.html#option-4-pipes-the-winner",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Option 4: Pipes (The Winner!)",
    "text": "Option 4: Pipes (The Winner!)\n\npenguins |&gt;\n  filter(species == \"Adelie\") |&gt;\n  group_by(island) |&gt;\n  summarize(body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This is valid and readable code — without the drawbacks of the previous options.\n💡 Why pipes? The pipe operator passes the result of one function to the next, making your code easier to read. Pipes emphasize actions, not object names and you can read the code like a recipe:\n\nStart with the dataset\nFilter for Adelie penguins\nGroup by island\nSummarize body mass"
  },
  {
    "objectID": "lectures/05-slides.html#common-errors-with-pipes-examples-using-flights-data",
    "href": "lectures/05-slides.html#common-errors-with-pipes-examples-using-flights-data",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Errors with Pipes: Examples using flights data",
    "text": "Common Errors with Pipes: Examples using flights data\nWe use a built-in dataset of all flights (n = 336,776) that departed from NYC in 2013.\nlibrary(nycflights13)\ndata(flights)\nhead(flights)\n\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "lectures/05-slides.html#common-errors-with-pipes-examples-using-flights-data-1",
    "href": "lectures/05-slides.html#common-errors-with-pipes-examples-using-flights-data-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Errors with Pipes: Examples using flights data",
    "text": "Common Errors with Pipes: Examples using flights data\nlibrary(nycflights13)\ndata(flights)\nglimpse(flights)\n\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…"
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-1",
    "href": "lectures/05-slides.html#common-pipe-errors-example-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 1",
    "text": "Common Pipe Errors: Example 1\nWhat’s wrong with this code?\nBefore we debug it, let’s first think through what the code is trying to do conceptually.\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  by_dest &lt;- group_by(dest) %&gt;% \n  delay &lt;- summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  d &lt;- filter(count &gt; 20)"
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-1-1",
    "href": "lectures/05-slides.html#common-pipe-errors-example-1-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 1",
    "text": "Common Pipe Errors: Example 1\nWhat’s wrong with this code?\nBefore we debug it, let’s first think through what the code is trying to do conceptually.\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  by_dest &lt;- group_by(dest) %&gt;% \n  delay &lt;- summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  d &lt;- filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nTake the flights dataset\n\nGroup flights by destination, using the variable dest\n\nCount the delayed flights and store the result in a new variable called count\n\nCalculate the average arrival delay, using arr_delay, and store the result in a new variable called delay\n\nRemove destinations with less than 20 flights. Question: Why filter(count &gt; 20) to remove destinations with fewer than 20 flights?"
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-1-2",
    "href": "lectures/05-slides.html#common-pipe-errors-example-1-2",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 1",
    "text": "Common Pipe Errors: Example 1\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  by_dest &lt;- group_by(dest) %&gt;% \n  delay &lt;- summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  d &lt;- filter(count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nDon’t assign anything inside a pipe. Use &lt;- only at the start, if you want to save the final result. Do not use it between steps."
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-2",
    "href": "lectures/05-slides.html#common-pipe-errors-example-2",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 2",
    "text": "Common Pipe Errors: Example 2\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest)\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE))\n  filter(count &gt; 20)"
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-2-1",
    "href": "lectures/05-slides.html#common-pipe-errors-example-2-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 2",
    "text": "Common Pipe Errors: Example 2\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest)\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE))\n  filter(count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nEach function in a pipe chain must be connected with %&gt;% to keep the chain going."
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-3",
    "href": "lectures/05-slides.html#common-pipe-errors-example-3",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 3",
    "text": "Common Pipe Errors: Example 3\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  group_by(.data = flights, dest) %&gt;% \n  summarize(.data = flights,\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  filter(.data = flights, count &gt; 20)"
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-3-1",
    "href": "lectures/05-slides.html#common-pipe-errors-example-3-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 3",
    "text": "Common Pipe Errors: Example 3\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  group_by(.data = flights, dest) %&gt;% \n  summarize(.data = flights,\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  filter(.data = flights, count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nWhen using pipes, only reference the data frame at the start of the chain. Do not repeat .data = flights in every function as %&gt;% automatically passes the data along."
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-4",
    "href": "lectures/05-slides.html#common-pipe-errors-example-4",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 4",
    "text": "Common Pipe Errors: Example 4\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights +\n  group_by(dest) +\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) +\n  filter(count &gt; 20)"
  },
  {
    "objectID": "lectures/05-slides.html#common-pipe-errors-example-4-1",
    "href": "lectures/05-slides.html#common-pipe-errors-example-4-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Common Pipe Errors: Example 4",
    "text": "Common Pipe Errors: Example 4\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights +\n  group_by(dest) +\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) +\n  filter(count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nThe + sign is only for adding layers in ggplot2! Don’t use it to chain dplyr functions: use %&gt;% to pipe data through a sequence of transformations."
  },
  {
    "objectID": "lectures/05-slides.html#practice-1",
    "href": "lectures/05-slides.html#practice-1",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "💻 Practice",
    "text": "💻 Practice\nDownload today’s in-class exercises from the website for more practice on operator, dplyr, and pipes."
  },
  {
    "objectID": "lectures/05-slides.html#recap-what-we-learned-today",
    "href": "lectures/05-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nPracticed programming as problem-solving: think through tasks before coding\nLearned R operators\nKey dplyr functions like filter(), group_by(), summarize(), and more\nChained commands with pipes\nReviewed common mistakes when using pipes and how to avoid them"
  },
  {
    "objectID": "lectures/05-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/05-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 5",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/06-slides.html#most-important-dplyr-functions-definitions",
    "href": "lectures/06-slides.html#most-important-dplyr-functions-definitions",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Most Important dplyr Functions: Definitions",
    "text": "Most Important dplyr Functions: Definitions\n\n\n\n\n\n\n\nfunction()\nWhat it does\n\n\n\n\nselect()\nChooses specific columns\n\n\nrename()\nRenames columns\n\n\nrelocate()\nReorders columns\n\n\nfilter()\nSelects rows based on values on columns\n\n\narrange()\nReorders rows based on values in specified columns\n\n\nmutate()\nAdds new columns or modifies existing ones\n\n\ndistinct()\nReturns unique rows based on columns\n\n\ngroup_by()\nGroups the data by one or more variables for grouped operations\n\n\ncount()\nCounts observations by group\n\n\nsummarize()\nReduces each group to a single row using summary statistics (e.g., mean, sum, n)\n\n\nacross()\nApplies the same operation to multiple columns at once"
  },
  {
    "objectID": "lectures/06-slides.html#most-important-dplyr-functions-tips-to-rememeber-and-examples",
    "href": "lectures/06-slides.html#most-important-dplyr-functions-tips-to-rememeber-and-examples",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Most important dplyr Functions: Tips to Rememeber and Examples",
    "text": "Most important dplyr Functions: Tips to Rememeber and Examples\n\n\n\n\n\n\n\n\nFocus\nConcept\nFunction\n\n\n\n\nColumns\nStructure\nselect() chooses specific columns — select(penguins, species, island)rename() renames columns — rename(penguins, flip_mm = flipper_length_mm)relocate() reorders columns — relocate(penguins, island, .before = species)\n\n\nRows\nFiltering & sorting\nfilter() selects rows by values — filter(penguins, species == \"Adelie\")arrange() orders rows by column values — arrange(penguins, desc(body_mass_g))\n\n\nValues\nTransformation\nmutate() adds or changes columns — mutate(penguins, flip_cm = flipper_length_mm / 10)distinct() keeps unique rows — distinct(penguins, species, island)\n\n\nGroups\nAggregation\ngroup_by() defines groups — group_by(penguins, species)count() counts rows per group — count(penguins, island)  summarize() creates summaries per group — summarize(penguins, avg_flip = mean(flipper_length_mm, na.rm = TRUE))\n\n\nAcross columns\nAutomation\nacross() applies an operation to multiple columns — summarize(across(ends_with(\"_mm\"), mean, na.rm = TRUE))\n\n\n\n\n\nData flows top → bottom just like in a pipeline: penguins |&gt; select() |&gt; filter() |&gt; group_by() |&gt; summarize()"
  },
  {
    "objectID": "lectures/06-slides.html#penguins-data",
    "href": "lectures/06-slides.html#penguins-data",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Penguins data",
    "text": "Penguins data\nLoad libraries and data:\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\nExplore data (pick one of these):\nrbind(head(penguins, 5), tail(penguins, 5))\nglimpse(penguins)\nstr(penguins)\nsummary(penguins)"
  },
  {
    "objectID": "lectures/06-slides.html#select-extracts-variables-operates-on-columns",
    "href": "lectures/06-slides.html#select-extracts-variables-operates-on-columns",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "select() extracts variables, operates on columns",
    "text": "select() extracts variables, operates on columns\n# select two specific variables using their names\nselect(penguins, species, body_mass_g)\n\n# select all variables except two using the minus sign\nselect(penguins, -year, -island)\n\n# select a range of contiguous/adjacent variables\nselect(penguins, species:bill_length_mm)\n\n# select all variables except a range of contiguous ones\nselect(penguins, -(species:island))\n\n# select all variables that start with\nselect(penguins, starts_with(\"bill\"))\n\n# select all variables that end with\nselect(penguins, ends_with(\"mm\"))"
  },
  {
    "objectID": "lectures/06-slides.html#filter-extract-observations-operates-on-rows",
    "href": "lectures/06-slides.html#filter-extract-observations-operates-on-rows",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "filter() extract observations, operates on rows",
    "text": "filter() extract observations, operates on rows\n# check variable values\nlevels(penguins$species) \nunique(penguins$species)\ncount(penguins, species)\npenguins |&gt; count(species)\n\n# filter by island and species\nfilter(penguins, island == \"Biscoe\", species == \"Gentoo\")\nfilter(penguins, (island == \"Biscoe\" & species == \"Gentoo\"))\n\n# filter by multiple conditions\nfilter(penguins, species %in% c(\"Adelie\", \"Gentoo\"), island != \"Biscoe\")"
  },
  {
    "objectID": "lectures/06-slides.html#select-plus-filter",
    "href": "lectures/06-slides.html#select-plus-filter",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "select() plus filter()",
    "text": "select() plus filter()\npenguins |&gt; \n  select(species, sex, year, island) |&gt; \n  filter(island == \"Torgersen\")"
  },
  {
    "objectID": "lectures/06-slides.html#arrange-changes-order-of-observations",
    "href": "lectures/06-slides.html#arrange-changes-order-of-observations",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "arrange() changes order of observations",
    "text": "arrange() changes order of observations\npenguins |&gt; arrange(desc(bill_length_mm))\n\npenguins |&gt;\n  select(species, contains(\"bill\")) |&gt;\n  filter(!species == \"Adelie\") |&gt;\n  arrange(desc(bill_length_mm)) \n\npenguins |&gt;\n  select(species, contains(\"bill\")) |&gt;\n  filter(!species == \"Adelie\") |&gt; \n  arrange(desc(species), bill_length_mm)"
  },
  {
    "objectID": "lectures/06-slides.html#relocate-changes-order-of-variable",
    "href": "lectures/06-slides.html#relocate-changes-order-of-variable",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "relocate() changes order of variable",
    "text": "relocate() changes order of variable\npenguins |&gt; relocate(year, sex)\n\npenguins |&gt; relocate(year, .after = island)"
  },
  {
    "objectID": "lectures/06-slides.html#mutate-modify-or-create-new-columns",
    "href": "lectures/06-slides.html#mutate-modify-or-create-new-columns",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "mutate() modify or create new columns",
    "text": "mutate() modify or create new columns\npenguins |&gt; mutate(bill_ratio = bill_length_mm / bill_depth_mm)\nNote: it does not reduce the dimensions of the original data https://dplyr.tidyverse.org/reference/mutate.html"
  },
  {
    "objectID": "lectures/06-slides.html#summarize-summary-of-data",
    "href": "lectures/06-slides.html#summarize-summary-of-data",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "summarize() summary of data",
    "text": "summarize() summary of data\npenguins |&gt; \n  summarize(body_mass_mean = mean(body_mass_g, na.rm = TRUE),\n            body_mass_sd = sd(body_mass_g, na.rm = TRUE),\n            n = n())  # n = nrow(penguins)\n\npenguins | \n  filter(species == \"Gentoo\") |&gt; \n  summarize(body_mass_mean = mean(body_mass_g, na.rm = TRUE),\n            body_mass_sd = sd(body_mass_g, na.rm = TRUE),\n            n = n())\nNote: collapses the original data to a smaller number of rows, you can use summarize to create all sort of summary statistics https://dplyr.tidyverse.org/reference/summarise.html"
  },
  {
    "objectID": "lectures/06-slides.html#group_by-aggregates-data-for-next-function",
    "href": "lectures/06-slides.html#group_by-aggregates-data-for-next-function",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "group_by() aggregates data for next function",
    "text": "group_by() aggregates data for next function\n# group by alone? not that useful\npenguins |&gt; \n  group_by(island, sex)\n\n# group by and count\npenguins |&gt; \n  group_by(island, sex) |&gt; \n  count()\n\n# group by and calculate mean body mass\npenguins |&gt; \n  group_by(island, sex) |&gt;\n  summarize(body_mass_mean = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/06-slides.html#count-counts-tot-obs.-by-group",
    "href": "lectures/06-slides.html#count-counts-tot-obs.-by-group",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "count() counts tot obs. by group",
    "text": "count() counts tot obs. by group\n# total penguins by sex without count\npenguins |&gt; \n  group_by(sex) |&gt; \n  summarize(total = n())\n\n# with count\npenguins |&gt;\n  count(sex)"
  },
  {
    "objectID": "lectures/06-slides.html#distinct-returns-unique-rows-based-on-given-columns",
    "href": "lectures/06-slides.html#distinct-returns-unique-rows-based-on-given-columns",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "distinct() returns unique rows based on given columns",
    "text": "distinct() returns unique rows based on given columns\n# not too handy alone\npenguins |&gt;\n  distinct()\n\n# better with specific columns\npenguins |&gt;\n  distinct(species, island)\n\n# keep all columns in the resulting data frame\npenguins |&gt;\n  distinct(species, island, .keep_all = TRUE)\nNote: gives back a dataframe with only unique combinations of those columns https://dplyr.tidyverse.org/reference/distinct.html"
  },
  {
    "objectID": "lectures/06-slides.html#across",
    "href": "lectures/06-slides.html#across",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "across()",
    "text": "across()\nExamples with and without across() with numerical variables:\n# mean for a bunch of variables without across\npenguins |&gt;\n  summarize(\n    mean_bill_length_mm = mean(bill_length_mm, na.rm = TRUE),\n    mean_bill_depth_mm = mean(bill_depth_mm, na.rm = TRUE),\n    mean_flipper_length_mm = mean(flipper_length_mm, na.rm = TRUE),\n    mean_body_mass_g = mean(body_mass_g, na.rm = TRUE)\n  )\n\n# same operation with across\npenguins |&gt;\n  summarize(\n    across(\n      c(bill_length_mm, bill_depth_mm, flipper_length_mm, body_mass_g), \n      ~ mean(.x, na.rm = TRUE)  # function(x) mean(x, na.rm = TRUE)\n    ))"
  },
  {
    "objectID": "lectures/06-slides.html#across-1",
    "href": "lectures/06-slides.html#across-1",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "across()",
    "text": "across()\nExamples with and without across() with categorical variables:\n# number of distinct entries for columns without across\npenguins |&gt;\n  summarise(distinct_species = n_distinct(species),\n            distinct_island = n_distinct(island),\n            distinct_year = n_distinct(year))\n\n# number of distinct entries for columns with across\npenguins |&gt;\n  summarise(across(c(species, island, year), \n                   n_distinct))\n\n# the opposite\npenguins |&gt;\n  summarise(across(-c(species, island, year), \n                   n_distinct))\n\n# everything\npenguins |&gt;\n  summarise(across(everything(), \n                   n_distinct))"
  },
  {
    "objectID": "lectures/06-slides.html#what-are-factors-in-r",
    "href": "lectures/06-slides.html#what-are-factors-in-r",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "What are Factors in R?",
    "text": "What are Factors in R?\nA factor is a specific data structure in R.\nTo understand factors, and why we use them, we need to start from categorical data or variables: variables with a fixed set of possible values. For example, the variable species in the penguins data can only take one of three values (“Adelie”, “Chinstrap”, or “Gentoo”)."
  },
  {
    "objectID": "lectures/06-slides.html#what-are-factors-in-r-1",
    "href": "lectures/06-slides.html#what-are-factors-in-r-1",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "What are Factors in R?",
    "text": "What are Factors in R?\n\n\n\n\n\n\n\nR Data Structures to Store Categorical Data\n\n\n\nCharacter vector (default): Data type for storing categorical data as plain strings (e.g., variable months with “Jan”, “Feb”, “Mar”, etc.). Values have no built-in order or grouping.\nNumeric vector (occasionally): Sometimes these are used to store categorical data as numbers (e.g., variable months with 1, 2, 3), but lacks category labels or order.\nFactor (preferred when order matters): Data type for storing categorical data with defined levels. Values can be ordered according to the researcher needs."
  },
  {
    "objectID": "lectures/06-slides.html#real-world-examples-of-categorical-data",
    "href": "lectures/06-slides.html#real-world-examples-of-categorical-data",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Real-world examples of categorical data",
    "text": "Real-world examples of categorical data\nYou often need factors in R. Why? They let you sort categorical variables in your desired order whether that order reflects a natural sequence or you define it for analytic purposes. Examples:\n\nMonths of the year (January → December)\nLikert scales (Strongly Agree → Strongly Disagree)\nEducational attainment levels (High School → Graduate)\nPolitical parties\nRace/ethnicity categories\nInstitution type\nMovies categories\nEtc."
  },
  {
    "objectID": "lectures/06-slides.html#why-use-factors",
    "href": "lectures/06-slides.html#why-use-factors",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Why use Factors?",
    "text": "Why use Factors?\nLet’s define a character vector with four months and sort it.\nCopy and paste this code in R and run it. What do you notice?\n# Define\nx1 &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n\n# Check\nx1\nclass(x1)\n\n# Sort\nsort(x1)"
  },
  {
    "objectID": "lectures/06-slides.html#why-use-factors-1",
    "href": "lectures/06-slides.html#why-use-factors-1",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Why use Factors?",
    "text": "Why use Factors?\nFrom the previous example we observe that by default, R sorts character vectors alphabetically!\nHowever, alphabetical order isn’t ideal to sort months. We usually want them sorted in chronological order. To do that in R, we need factors.\n\n\n\nIn the next slides, we learn two cases that you will likely encounter when working with factors:\n\nConverting a Character Vector to a Factor (most common)\nConverting a Numeric Vector to a Factor (sometimes needed when categories are stored as numbers)"
  },
  {
    "objectID": "lectures/06-slides.html#converting-a-character-vector-to-a-factor",
    "href": "lectures/06-slides.html#converting-a-character-vector-to-a-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "1. Converting a Character Vector to a Factor",
    "text": "1. Converting a Character Vector to a Factor\nOften categorical data is stored in character vectors. Character vectors sort alphabetically by default. To change the order, convert them to a factor using factor() and assign the desired levels.\n# Character vector with month names\nx1 &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\nclass(x1)\n\n# Define all set of possibile levels in desired order\nmonth_levels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\n# Convert to factor using those levels\ny1 &lt;- factor(x1, levels = month_levels)\n\n# Check\ny1\nclass(y1)\nlevels(y1)\n\n# Compare sorting\nsort(x1)  # Alphabetical\nsort(y1)  # Chronological (by factor levels)"
  },
  {
    "objectID": "lectures/06-slides.html#converting-a-numeric-vector-to-a-factor",
    "href": "lectures/06-slides.html#converting-a-numeric-vector-to-a-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "2. Converting a Numeric Vector to a Factor",
    "text": "2. Converting a Numeric Vector to a Factor\nSometimes categorical data is stored as numbers (e.g., months as 1, 2, 12) in numeric vectors. To convert them to a factor with factor(), you need to specify both levels and labels.\n# Numeric vector with values representing months\nx2 &lt;- c(12, 4, 1, 3)\nclass(x2)\n\n# Define all set of possibile numeric values we expect\nmonth_levels &lt;- 1:12\n\n# Define all labels we want to show for each value\nmonth_labels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\") \n\n# Convert to factor using levels and labels\ny2 &lt;- factor(x2, \n            levels = month_levels,\n            labels = month_labels)\n\n# Check\ny2\nclass(y2)\nlevels(y2)\n\n# Compare sorting\nsort(x2)  # Numeric\nsort(y2)  # Chronological (by factor levels)"
  },
  {
    "objectID": "lectures/06-slides.html#levels-and-labels-in-factors",
    "href": "lectures/06-slides.html#levels-and-labels-in-factors",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Levels and Labels in Factors",
    "text": "Levels and Labels in Factors\n\n\nLevels\n\nDefine the set of distinct categories a factor can take\n\nUse to tell R the order of each category\nUse only levels when your input data is already human readable, as in our first example (e.g., \"Jan\", \"Feb\", etc.)\n\n\nLabels\n\nDefine optional names for each distinct category\nUse to tell R what to display for each category\n\nUse labels and levels when your input data uses codes, as in our second example (e.g., 1 to mean \"Jan\"), and you want to display more human readable labels. Labels are matched to levels, not to raw values"
  },
  {
    "objectID": "lectures/06-slides.html#levels-and-labels-in-factors-1",
    "href": "lectures/06-slides.html#levels-and-labels-in-factors-1",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Levels and Labels in Factors",
    "text": "Levels and Labels in Factors\n\n\nWhen you input is a Character Vector\nExample values: \"Jan\", \"May\", \"Oct\"\n\nAlready human-readable\n(Often) only want to control the order\n\nConvert to factor using only levels to order and label\nExample: \"May\" stays \"May\"\n\n\nWhen you input is a Numeric Vector\nExample values: 1, 7, 12\n\nNot already human-readable\nWant to control the order & add readable labels\nConvert to factor using levels to order & labels to label\nExample: 1 becomes \"Jan\", 2 becomes \"Feb\", etc."
  },
  {
    "objectID": "lectures/06-slides.html#levels-and-labels-in-factors-examples",
    "href": "lectures/06-slides.html#levels-and-labels-in-factors-examples",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Levels and Labels in Factors: Examples",
    "text": "Levels and Labels in Factors: Examples\nBefore you run the code below in R, take a moment to predict the output. What do you expect each code chunk to return, and why?\n# Example 1 with Input as Character Vector\na &lt;- c(\"Low\", \"High\", \"Medium\", \"Low\")\nb &lt;- factor(a, levels = c(\"Low\", \"Medium\", \"High\"))\nb\nsort(b)\n\n# Example 2 with Input as Numeric vector\ni &lt;- c(1, 3, 2, 1)\nj &lt;- factor(i, levels = c(1, 2, 3),\n               labels = c(\"Low\", \"Medium\", \"High\"))\nj\nsort(j)"
  },
  {
    "objectID": "lectures/06-slides.html#practice-character-vector-factor",
    "href": "lectures/06-slides.html#practice-character-vector-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "💻 Practice: Character Vector → Factor",
    "text": "💻 Practice: Character Vector → Factor\nYou are working with a character vector. Your goal is to convert it into a factor so, when you sort it, months follow their chronological order rather than alphabetical order.\nThe code below is not correct. Run it in R, identify the problem, and fix it.\n# Define a character vector representing months\nm &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\nclass(m)\n\n# Attempt\nmf &lt;- factor(m, \n            levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12),\n            labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                       \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\nmf\n\n# Compare sorting\nsort(m)  \nsort(mf)"
  },
  {
    "objectID": "lectures/06-slides.html#solution-character-vector-factor",
    "href": "lectures/06-slides.html#solution-character-vector-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Solution: Character Vector → Factor",
    "text": "Solution: Character Vector → Factor\nThe input vector is made of characters (“Jan”, “Feb”…) but the levels provided are numbers (1–12). R can’t match them: levels must match the type of your input data.\nmf &lt;- factor(m, \n             levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\",\n                        \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\nmf\nsort(mf)"
  },
  {
    "objectID": "lectures/06-slides.html#practice-numeric-vector-factor",
    "href": "lectures/06-slides.html#practice-numeric-vector-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "💻 Practice: Numeric Vector → Factor",
    "text": "💻 Practice: Numeric Vector → Factor\nYou are working with a numeric vector representing months as numbers. Your goal is the same: convert it into a factor, so when you sort it, months are in chronological order.\nNone of the attempts below is correct. Run each in R, explain why each does not work, and write one solution that works.\n# Define a numeric vector representing months\nx &lt;- c(12, 4, 1, 3, 1)\nclass(x)\n\n# Attempt 1\ny1 &lt;- factor(x, levels = x,\n                labels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\"))\n                \n# Attempt 2\ny2 &lt;- factor(x, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), \n                labels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\"))\n              \n# Attempt 3\ny3 &lt;- factor(x, levels = c(1, 2, 3, 4),\n                labels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\"))"
  },
  {
    "objectID": "lectures/06-slides.html#solution-numeric-vector-factor",
    "href": "lectures/06-slides.html#solution-numeric-vector-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Solution: Numeric Vector → Factor",
    "text": "Solution: Numeric Vector → Factor\n\nAttempts 1 and 2: mismatch between the number of labels and the levels. R throws an error.\nAttempt 3: R doesn’t throw an error, but the code is incorrect because it forces levels 1 to 4, even though the input vector has values like 12. Since 12 isn’t among the defined levels, it becomes NA, leading to incorrect matches.\n\nYou can fix the code from the previous slide in the following ways:\n# Numeric vector representing months\nx &lt;- c(12, 4, 1, 3, 1)\nclass(x)\n\n# Option 1 (reccomended)\nmonth_labels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\nmonth_levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\ny1 &lt;- factor(x, levels = month_levels,  \n                labels = month_labels)\nclass(y1)\n\n# Option 2 (works but not reccomended, why?)\ny2 &lt;- factor(x, levels = c(1, 3, 4, 12),\n                labels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\"))"
  },
  {
    "objectID": "lectures/06-slides.html#apply-these-concpets-to-a-dataframe-scorecard-example",
    "href": "lectures/06-slides.html#apply-these-concpets-to-a-dataframe-scorecard-example",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Apply these concpets to a dataframe: scorecard example",
    "text": "Apply these concpets to a dataframe: scorecard example\nIn most of your work, you deal with dataframes. Last week we worked with the scorecard data to practice ggplot2. Now we use the same data to see how we can use factors in a dataframe.\nLoad libraries and data:\nlibrary(tidyverse)\nlibrary(rcis)\ndata(scorecard)\nExplore data:\nglimpse(scorecard)"
  },
  {
    "objectID": "lectures/06-slides.html#example-plot-the-total-number-of-schools-in-the-u.s.-by-school-type",
    "href": "lectures/06-slides.html#example-plot-the-total-number-of-schools-in-the-u.s.-by-school-type",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Example: Plot the total number of schools in the U.S. by school type",
    "text": "Example: Plot the total number of schools in the U.S. by school type\nThis is the same question we did in class (see in-class tutorial, lecture 4).\nSince type is a categorical varialbe, we use bar chart, which takes each category \"Public\", \"Private nonprofit\", \"Private for profit\" and automatically applies a frequency count to aggregate the data.\nggplot(scorecard, mapping = aes(x = type)) +\n  geom_bar() \n\nOur goal: reorder the bars!"
  },
  {
    "objectID": "lectures/06-slides.html#method-1-reorder-bars-manually-with-factor",
    "href": "lectures/06-slides.html#method-1-reorder-bars-manually-with-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Method 1: Reorder bars manually with factor()",
    "text": "Method 1: Reorder bars manually with factor()\ns &lt;- scorecard |&gt;\n  mutate(type = factor(type,\n                       levels = c(\"Private, nonprofit\", \"Public\", \"Private, for-profit\")))\n\nggplot(s, aes(x = type)) +\n  geom_bar()\nThis method gives you full control of the order by manually defining factor levels.\nRemember to check the column type (character or numeric) before transforming to factor. Use mutate since we are working on column of a dataframe (and not a standalone vector like in the previous examples)."
  },
  {
    "objectID": "lectures/06-slides.html#method-2-reorder-the-bars-using-tidyverse-fct_relevel",
    "href": "lectures/06-slides.html#method-2-reorder-the-bars-using-tidyverse-fct_relevel",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Method 2: Reorder the bars using tidyverse fct_relevel()",
    "text": "Method 2: Reorder the bars using tidyverse fct_relevel()\nfct_relevel(): allows to reorder factor levels by hand; this function behave similarly to factor()\nscorecard |&gt; \n  mutate(type = fct_relevel(type, \n                           \"Private, nonprofit\", \"Public\", \"Private, for-profit\")) |&gt;\nggplot(mapping = aes(x = type)) +\n  geom_bar()\nNote: you can write code also by “piping” the results of the dplyr code into ggplot2 code, as illustrated here."
  },
  {
    "objectID": "lectures/06-slides.html#method-3-reorder-the-bars-using-tidyverse-fct_infreq",
    "href": "lectures/06-slides.html#method-3-reorder-the-bars-using-tidyverse-fct_infreq",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Method 3: Reorder the bars using tidyverse fct_infreq()",
    "text": "Method 3: Reorder the bars using tidyverse fct_infreq()\nfct_infreq() sorts bars automatically by how common each category is (most to least frequent)\nscorecard |&gt;\n  mutate(type = fct_infreq(type)) |&gt;\nggplot(aes(x = type)) +\n  geom_bar()"
  },
  {
    "objectID": "lectures/06-slides.html#the-forcats-package",
    "href": "lectures/06-slides.html#the-forcats-package",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "The “forcats” Package",
    "text": "The “forcats” Package\n\n\n\n\n\n\n\nUsing factor() or a function from forcats?\n\n\nThe function factor() is the base R way to create and manage factors. It’s a foundational tool: worth understanding because many R functions depend on it!\nSince working with factors is key in R, people developed a specific package called forcats (part of the tidyverse) provides a set of simpler but powerful functions for working with categorical data.\nYou can use these, but knowing factor() helps you understand what’s happening behind the scenes."
  },
  {
    "objectID": "lectures/06-slides.html#the-forcats-package-1",
    "href": "lectures/06-slides.html#the-forcats-package-1",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "The “forcats” Package",
    "text": "The “forcats” Package\n\n\n\n\n\n\n\n\nFunction\nWhat it does\nWhen to use\n\n\n\n\nfct_relevel()\nManually sets the order of levels\nWhen you need full manual control (similar to factor(..., levels = ...) in base R)\n\n\nfct_infreq()\nReorders factor levels by frequency (most to least common)\nWhen you want categories ordered by how often they appear\n\n\nfct_reorder()\nReorders levels based on another variable (e.g., a numeric value)\nIdeal for ordering bars by a summary statistic in ggplot2\n\n\n\nFor more functions, see the forcats documentation"
  },
  {
    "objectID": "lectures/06-slides.html#challenge-exercise-plot-tips-by-weekday",
    "href": "lectures/06-slides.html#challenge-exercise-plot-tips-by-weekday",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "💻 Challenge Exercise: Plot Tips by Weekday",
    "text": "💻 Challenge Exercise: Plot Tips by Weekday\nIn this exercise, you learn two things:\n\nto correctly use stat = identity with bar plots\nto control the order of categories in bar plots, using both factor() and the forcats function called fct_relevel()"
  },
  {
    "objectID": "lectures/06-slides.html#create-the-data",
    "href": "lectures/06-slides.html#create-the-data",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Create the Data",
    "text": "Create the Data\nCopy and run the code below to create this dataset:\nlibrary(tidyverse)\n\ndf &lt;- tibble(\n  week = c(\"Mon\", \"Wed\", \"Fri\", \"Wed\", \"Thu\", \"Sat\", \"Sat\"),\n  tip = c(10, 12, 20, 8, 25, 25, 30)\n)\n\ndf\nOur Goal: Create a bar plot with days of the week on the x-axis and the total tip amount on the y-axis (e.g., Saturday should display a bar with a height of $55, etc.)."
  },
  {
    "objectID": "lectures/06-slides.html#whats-wrong-with-this-plot",
    "href": "lectures/06-slides.html#whats-wrong-with-this-plot",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "What’s Wrong With This Plot?",
    "text": "What’s Wrong With This Plot?\nTry this code. What does the height of each bar represent?\nggplot(df, aes(x = week)) +\n  geom_bar()\n\n\n\n\n\n\n\nWarning\n\n\nWhy aren’t the bars showing the actual tip amounts?\n- Because by default, geom_bar() uses stat = \"count\" to counts row and plot them on the y-axis\n- To plot the actual values (not counts), use stat = \"identity\" with both a x and y"
  },
  {
    "objectID": "lectures/06-slides.html#fix-the-y-axis-on-this-bar-plot",
    "href": "lectures/06-slides.html#fix-the-y-axis-on-this-bar-plot",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Fix the y-axis on this bar plot",
    "text": "Fix the y-axis on this bar plot\nTo fix this plot, we need to change the default stat from count to identity and manually specify both the x and y aesthetics. See the documentation or type ?geom_bar in your R Console.\nggplot(df, aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")\nThis is much better, but we still do not have the bars nicely ordered…."
  },
  {
    "objectID": "lectures/06-slides.html#fix-the-order-of-the-bars-using-factor",
    "href": "lectures/06-slides.html#fix-the-order-of-the-bars-using-factor",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Fix the order of the bars using factor()",
    "text": "Fix the order of the bars using factor()\nWe use base R’s factor() to control the order of weekdays.\nReplace the blank with the correct weekday order in the code below:\ndf |&gt;\n  mutate(week = factor(week, levels = _____ )) |&gt;\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")"
  },
  {
    "objectID": "lectures/06-slides.html#do-the-same-but-using-fct_relevel",
    "href": "lectures/06-slides.html#do-the-same-but-using-fct_relevel",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Do the same but using fct_relevel()",
    "text": "Do the same but using fct_relevel()\nNow we make the same plot using fct_relevel()\nReplace the correct weekday order in the code below:\ndf |&gt;\n  mutate(week = fct_relevel(week, ______ )) |&gt;\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")"
  },
  {
    "objectID": "lectures/06-slides.html#solutions",
    "href": "lectures/06-slides.html#solutions",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Solutions",
    "text": "Solutions\n# With factor\ndays &lt;- c(\"Mon\", \"Wed\", \"Thu\", \"Fri\", \"Sat\")\ndf |&gt;\n  mutate(week = factor(week, levels = c(\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\", \"Sat\", \"Sun\"))) |&gt;\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")\n\n# With fct_relevel\ndays &lt;- c(\"Mon\", \"Wed\", \"Thu\", \"Fri\", \"Sat\")\ndf |&gt;\n  mutate(week = fct_relevel(week, days)) |&gt;\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")\n\n\n\nQ: Why don’t we use labels in factor()? Because the values (\"Mon\", etc.) are already readable. You don’t need to change them, unless you want different names (e.g., \"Monday\", etc.).\nQ: Why doesn’t days include all 7 days of the week? We should include all possible levels when using factor(). But fct_relevel() behave differently and may not add missing levels if those values aren’t present in the input data."
  },
  {
    "objectID": "lectures/06-slides.html#reflections",
    "href": "lectures/06-slides.html#reflections",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Reflections",
    "text": "Reflections\n\n\n\n\n\n\nTip\n\n\n\nWhat happens when you don’t set the factor order?\nWhich method (factor() or fct_relevel()) do you prefer and why? Check the forcats package documentation for more functions, especially fct_reorder() which is straightforward to use\nWhy is stat = \"identity\" necessary for this kind of plot?\nAlways match the number of provided levels and labels inside `factor()``\n\n\n\n\nWant more practice? Download today’s in-class materials for more practice exercises on working with factors!"
  },
  {
    "objectID": "lectures/06-slides.html#recap-what-we-learned-today",
    "href": "lectures/06-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nWhat factors are and how to convert character or numeric vectors to factors\n\nHow to control the order of categories using levels and labels\n\nHow to fix common geom_bar() plotting issues (e.g., bar heights and order)\nReviewed and expanded dplyr functions for data manipulation"
  },
  {
    "objectID": "lectures/06-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/06-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 6",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/07-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/07-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/08-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/08-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "",
    "text": "Add slide with prep for exam tips 1. Review class materials: slides, in-class code, readings 2. Complete HW2 (no AI) 3. Review the in-class prep questions 4. Ask AI to generate more questions for you (but do it only after previous points, starting from this will backfire)"
  },
  {
    "objectID": "lectures/09-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/09-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/10-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/10-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/11-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/11-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 11",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/12-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/12-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 12",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/13-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/13-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 13",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/14-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/14-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 14",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/15-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/15-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 15",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/16-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/16-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 16",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/17-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/17-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 17",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/18-slides.html#check-back-hereslides-will-be-posted-before-class",
    "href": "lectures/18-slides.html#check-back-hereslides-will-be-posted-before-class",
    "title": "Computing for the Social Sciences: Lecture 18",
    "section": "Check back here—slides will be posted before class!",
    "text": "Check back here—slides will be posted before class!"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#two-different-approaches",
    "href": "lectures/drafts/02-slides.html#two-different-approaches",
    "title": "Introduction to R: Lecture 2",
    "section": "Two Different Approaches",
    "text": "Two Different Approaches\nTASK: Write a report on the relationship between income and crime rates in Chicago.\nAPPROACH: Jane and Sally approach this task differently…\n\n\n\nJane: GUI Workflow\n\nSearches for data files online\n\nCleans the data using Excel\n\nAnalyzes the data in Excel (or similar)\n\nWrites her report in Google Docs\nSaves different versions of her work manually\n\n\nSally: Programmatic Workflow\n\nSearches for data files online\n\nCleans the data using R\n\nAnalyzes the data in R\n\nWrites her report in R Markdown\nTracks changes automatically using Git"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#two-main-advantages-of-a-programmatic-workflow",
    "href": "lectures/drafts/02-slides.html#two-main-advantages-of-a-programmatic-workflow",
    "title": "Introduction to R: Lecture 2",
    "section": "Two Main Advantages of a Programmatic Workflow",
    "text": "Two Main Advantages of a Programmatic Workflow\n1. Automation\n\nUses programs (e.g., R) to perform tasks systematically\n\nReduces manual effort and human error\n\nEnables fast and consistent repetition of analyses\n\n\n2. Reproducibility\n\nScientific research should share both data and code used for analysis\n\nAllows verification and reuse by others\n\nEnables exact replication of results, even years later"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#often-used-together-but-they-are-different-tools",
    "href": "lectures/drafts/02-slides.html#often-used-together-but-they-are-different-tools",
    "title": "Introduction to R: Lecture 2",
    "section": "Often used together, but they are different tools",
    "text": "Often used together, but they are different tools\n\n\n\nGit\n\nVersion control software\n\nRuns locally on your computer\nTracks changes you make to files in a specific folder (that you decide), called local repository or repo\n\n\n\nGitHub\n\nCloud-based platform\n\nRuns online\nStores copies of your local Git repository online, and enables backup and collaboration, you push to and pull from GitHub\n\n\n\nLet’s unpack all of this…"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#what-is-version-control",
    "href": "lectures/drafts/02-slides.html#what-is-version-control",
    "title": "Introduction to R: Lecture 2",
    "section": "What is Version Control?",
    "text": "What is Version Control?\nVersion Control\nIs a system that records every change you make to your files in a folder (what changed, who made it, and when) and lets you undo mistakes or restore previous versions of your files.\nGit is a software that does version control.\n\nWithout Version Control\nYou have to track changes manually which be messy and hard to manage, like:\n\nanalysis-1.R\nanalysis-2.R\nanalysis-final.R\nanalysis-final-FINAL.R"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#how-version-control-git-works",
    "href": "lectures/drafts/02-slides.html#how-version-control-git-works",
    "title": "Introduction to R: Lecture 2",
    "section": "How Version Control (Git) Works",
    "text": "How Version Control (Git) Works\n\nYou choose a folder on your computer: this becomes your local repository or local repo\nA Version Control tool, like Git, records and saves changes you make to the files in that folder\nEvery change is saved with a time stamp, author info, and a message (that you type in)\n\nYou can revisit your project’s history and restore earlier versions of a file if needed!\n\n\nHow Version Control (Git) + GitHub Works\n\nYou can link your local Git repository to an online GitHub repository\nSo you can push your local changes to GitHub\nAnd share your work with others"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#git-github-comparison",
    "href": "lectures/drafts/02-slides.html#git-github-comparison",
    "title": "Introduction to R: Lecture 2",
    "section": "Git & GitHub Comparison",
    "text": "Git & GitHub Comparison\n\n\n\n\n\n\n\n\nFeature\nGit\nGitHub\n\n\n\n\nWhat it is\nVersion control software\nCloud platform for Git repos\n\n\nWhere it runs\nLocally (your computer)\nOnline (web-based)\n\n\nWhat it does\nTracks changes in your local repo\nStores & shares remote copies\n\n\nCollaboration\nNot built-in\nPull, issues, code reviews\n\n\nUse in RStudio\nGit Tab\nConnect via setup or terminal\n\n\nRepo\nLocal repo = your folder\nRemote repo = copy on GitHub\n\n\n\n\nNote: we use Git and GitHub via RStudio only. They are also used with other tools like GitHub Desktop, terminal, etc."
  },
  {
    "objectID": "lectures/drafts/02-slides.html#okay-that-was-a-lot-of-info.-lets-put-it-into-practice",
    "href": "lectures/drafts/02-slides.html#okay-that-was-a-lot-of-info.-lets-put-it-into-practice",
    "title": "Introduction to R: Lecture 2",
    "section": "Okay, that was a lot of info. Let’s put it into practice!",
    "text": "Okay, that was a lot of info. Let’s put it into practice!\nWe’ll go through it in two steps:\n1. Configure your Setup: Set up Git, GitHub, and RStudio so everything works together\n2. Try It Out in RStudio: Git & GitHub tutorial to practice using version control in RStudio"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#step-1-configure-your-setup",
    "href": "lectures/drafts/02-slides.html#step-1-configure-your-setup",
    "title": "Introduction to R: Lecture 2",
    "section": "💻 Step 1: Configure your Setup",
    "text": "💻 Step 1: Configure your Setup\nComplete\nhttps://brinasab.github.io/csp-website/setup/setup-workbench.html"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#step-2-use-git-and-github-in-rstudio-tutorial",
    "href": "lectures/drafts/02-slides.html#step-2-use-git-and-github-in-rstudio-tutorial",
    "title": "Introduction to R: Lecture 2",
    "section": "💻 Step 2: Use Git and GitHub in RStudio Tutorial",
    "text": "💻 Step 2: Use Git and GitHub in RStudio Tutorial\nOnce Step 1 is done, complete:\nhttps://brinasab.github.io/csp-website/setup/setup-test.html\n\nInstructions:\n\nWork in pairs: one person (the most experienced with programming) read the instructions and guide the other, who executes the commands.\nKeep track of your questions as you go and post them in this Google doc\nRaise your hand if you need help!"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#recap-beginner-friendly-git-github-workflow",
    "href": "lectures/drafts/02-slides.html#recap-beginner-friendly-git-github-workflow",
    "title": "Introduction to R: Lecture 2",
    "section": "Recap: Beginner-Friendly Git & GitHub Workflow",
    "text": "Recap: Beginner-Friendly Git & GitHub Workflow\n\nMake & Save Changes Locally\nEdit your files locally (e.g., in RStudio or Workbench) and save them.\nPull from GitHub\nRefresh your local copy to get the latest changes—helps avoid conflicts when collaborating.\nStage Changes\nSelect which files you want Git to track in the next snapshot.\nCommit with a Message\nSave a snapshot of your staged changes in your local Git repo. Add a short, meaningful message.\nPush to GitHub\nUpload your committed changes to the online repository.\n\n\n\n\n\n\n\nImportant\n\n\nYou will complete this workflow for all homework assignments!"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#git-reminders",
    "href": "lectures/drafts/02-slides.html#git-reminders",
    "title": "Introduction to R: Lecture 2",
    "section": "Git Reminders",
    "text": "Git Reminders\n\nStage and commit often\nThink of commits as snapshots of your work. Save, stage, and commit regularly during your workflow.\nWrite clear, useful commit messages\nKeep messages concise but descriptive. They should explain what changed and why. Many tips online for “commit message best practices.”\nPush regularly, but not necessarily every time you commit Some people push every time they commit, while others push multiple commits at once. Experiment and find what works best for you.\nWork locally, and push on GitHub\nDo not do the other way around (e.g., do not modify your GitHub repository directly; work on your local copy, and push changes to GitHub)."
  },
  {
    "objectID": "lectures/drafts/02-slides.html#accept-homework-1",
    "href": "lectures/drafts/02-slides.html#accept-homework-1",
    "title": "Introduction to R: Lecture 2",
    "section": "💻 Accept Homework 1",
    "text": "💻 Accept Homework 1\nAccept Homework 1 from the course site and follow the instructions.\nNote: this will only work if we have your GitHub username and you accepted the invite to our GitHub organization (which was sent to the email linked to your GitHub account)!"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#what-to-commit-not-to-commit",
    "href": "lectures/drafts/02-slides.html#what-to-commit-not-to-commit",
    "title": "Introduction to R: Lecture 2",
    "section": "What to Commit / Not to Commit",
    "text": "What to Commit / Not to Commit\n\n\n✅ What to Commit\n\nCode files\nMarkdown or Quarto files\nSmall data files\nREADME and documentation\n\n\n🚫 What Not to Commit\n\nTemporary files (e.g., .Rproj.user/)\nLog or output files\nFiles with private information\nFiles larger than 100 MB\n\n\n\n\nWhat Not to Commit goes in the “.gitignore” file\n\nTells Git what to ignore from your folder\nUse a template (search for R-specific template, which works well for most class projects)"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#git-conflicts",
    "href": "lectures/drafts/02-slides.html#git-conflicts",
    "title": "Introduction to R: Lecture 2",
    "section": "Git Conflicts",
    "text": "Git Conflicts\nA Git conflict happens when Git doesn’t know which version of a file to keep.\nGit gets confused because the same file was changed in two places.\nGit conflicts are more common when working in shared repositories, and they shouldn’t occur when you’re working alone in your own repository (as you will in this course), but they still can happen…"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#when-do-conflicts-happen",
    "href": "lectures/drafts/02-slides.html#when-do-conflicts-happen",
    "title": "Introduction to R: Lecture 2",
    "section": "When Do Conflicts Happen?",
    "text": "When Do Conflicts Happen?\nCollaborative Work\n- You and a teammate edit the same file (or even the same line)\n- You push changes without pulling the latest version from GitHub first\n- Tip: Always run git pull before git push\n\nWorking Solo\n- You make changes locally and also edit the same file directly on GitHub\n- Git can’t tell which version to keep\n- Tip: Always work in your local repository and use the workflow from the previous slide to push to Github"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#what-causes-a-conflict",
    "href": "lectures/drafts/02-slides.html#what-causes-a-conflict",
    "title": "Introduction to R: Lecture 2",
    "section": "What Causes a Conflict?",
    "text": "What Causes a Conflict?\nA Git conflict may happen when Git finds two competing versions of the same file: one in your local repo (Git, on your computer) VS. one in the remote repo (GitHub, online)\nThe local and remote repos are expected to match. If they don’t, Git tries to merge them automatically.\nTwo Possible Outcomes\n✅ No conflict:\nIf the changes are in different parts of the file, Git merges automatically and no action is needed.\n❌ Conflict:\nIf the same part of the file was changed in both versions, Git cannot decide what to keep.\n→ You must manually review and resolve the conflict."
  },
  {
    "objectID": "lectures/drafts/02-slides.html#what-a-git-conflict-looks-like",
    "href": "lectures/drafts/02-slides.html#what-a-git-conflict-looks-like",
    "title": "Introduction to R: Lecture 2",
    "section": "What a Git Conflict Looks Like",
    "text": "What a Git Conflict Looks Like\nWhen a conflict happens, Git marks the file with special lines to show the two versions:\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\nThis is your version (from your local repo)\n=======\nThis is the other version (from GitHub or your teammate)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; main\nTo solve it, you need to use Git with the terminal (ask us for help if that occurs!)"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#avoiding-most-git-conflicts",
    "href": "lectures/drafts/02-slides.html#avoiding-most-git-conflicts",
    "title": "Introduction to R: Lecture 2",
    "section": "Avoiding (Most) Git Conflicts",
    "text": "Avoiding (Most) Git Conflicts\nRather than solving conflicts, we want to avoid them as much as possibile with good practices:\n\nMake changes locally, then stage and commit (early and often)\n\nPush regularly to keep your GitHub repo in sync\n\nAlways pull before you push to avoid conflicts\n\nKey Sequence to Use:\ngit pull → make changes → git add + git commit → git push"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#burn-it-all-down",
    "href": "lectures/drafts/02-slides.html#burn-it-all-down",
    "title": "Introduction to R: Lecture 2",
    "section": "Burn it All Down",
    "text": "Burn it All Down"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/02-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 2",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nFamiliarized with Git & GitHub\nHow to use Git & GitHub within RStudio"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#reminders",
    "href": "lectures/drafts/02-slides.html#reminders",
    "title": "Introduction to R: Lecture 2",
    "section": "Reminders",
    "text": "Reminders\n\nHomework 1 is now open and due next week. Check the Course Schedule on our website for the exact due date.\nIf you haven’t completed these yet, please do so ASAP, as you won’t be able to access and complete Homework 1 otherwise:\n\nRegister a GitHub account and submit your username (see Lecture 1)\nSetup your computer (see today’s lecture)"
  },
  {
    "objectID": "lectures/drafts/02-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/02-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 2",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#homework-1-feedback-great-work",
    "href": "lectures/drafts/04-slides.html#homework-1-feedback-great-work",
    "title": "Introduction to R: Lecture 4",
    "section": "Homework 1 Feedback: Great Work!",
    "text": "Homework 1 Feedback: Great Work!\n✅ Achieved Goals\n\nGot familiar with Git and GitHub and R Markdown syntax (they take patience and repetition)\nShared interesting bios, links, and images… thanks!\n\n💡 Tips for Success\n\nPush all required files to GitHub\n\nCommit frequently: from 5 to 20 commits per assignment\n\nEmbrace learning-by-doing (e.g., adding images), but post on Ed Discussion if you run into issues\nCheck our feedback on this homework: we’ll be stricter on the next ones (harder, point-based)\nAI and Plagiarism: see Syllabus and Lecture 1 Slides"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#meet-the-palmer-penguins",
    "href": "lectures/drafts/04-slides.html#meet-the-palmer-penguins",
    "title": "Introduction to R: Lecture 4",
    "section": "Meet the Palmer Penguins!",
    "text": "Meet the Palmer Penguins!\nThe palmerpenguins package includes two datasets (already installed on our Workbench):\n\npenguins with clean data of 244 penguins — we use this today\n\npenguins_raw with uncleaned version the same data\n\n\nPenguins by Allison Horst"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#meet-the-palmer-penguins-1",
    "href": "lectures/drafts/04-slides.html#meet-the-palmer-penguins-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Meet the Palmer Penguins!",
    "text": "Meet the Palmer Penguins!\n\n\nWhat we know about each of the 244 penguins:\n\nSpecies: Adelie, Chinstrap, Gentoo\n\nIsland: Biscoe, Dream, Torgersen\n\nBill length\n\nBill depth\n\nFlipper length\n\nBody mass\n\nSex\n\nYear\n\n\n\n\n\nBill Measurement"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#penguins-dataset-overview",
    "href": "lectures/drafts/04-slides.html#penguins-dataset-overview",
    "title": "Introduction to R: Lecture 4",
    "section": "Penguins Dataset Overview",
    "text": "Penguins Dataset Overview\n# load packages\nlibrary(tidyverse)\nlibrary(palmerpenguins)\n\n# explore data\nhead(penguins)\n\n\n\n\n# A tibble: 8 × 8\n  species   island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;     &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie    Torgersen           39.1          18.7               181        3750\n2 Adelie    Torgersen           39.5          17.4               186        3800\n3 Adelie    Torgersen           40.3          18                 195        3250\n4 Adelie    Torgersen           NA            NA                  NA          NA\n5 Chinstrap Dream               43.5          18.1               202        3400\n6 Chinstrap Dream               49.6          18.2               193        3775\n7 Chinstrap Dream               50.8          19                 210        4100\n8 Chinstrap Dream               50.2          18.7               198        3775\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#scatterplot-flipper-length-vs.-body-mass",
    "href": "lectures/drafts/04-slides.html#scatterplot-flipper-length-vs.-body-mass",
    "title": "Introduction to R: Lecture 4",
    "section": "Scatterplot: Flipper Length vs. Body Mass",
    "text": "Scatterplot: Flipper Length vs. Body Mass\nStart from what we know: scatter plot with two numeric variables\nCopy/paste this code in R (note we use ggplot2 with defaults to keep the code short, color by species, add a title):\nlibrary(tidyverse)\nlibrary(palmerpenguins)\nhead(penguins)\n\nggplot(data = penguins, aes(x = flipper_length_mm, y = body_mass_g)) +\n  geom_point(aes(color = species)) +\n  labs(title = \"Penguins: Body Mass vs. Flipper Length\")\n\n\n💡 How does the relationship between flipper length and body mass differ across species?"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#bar-plot-number-of-penguins-by-species",
    "href": "lectures/drafts/04-slides.html#bar-plot-number-of-penguins-by-species",
    "title": "Introduction to R: Lecture 4",
    "section": "Bar Plot: Number of Penguins by Species",
    "text": "Bar Plot: Number of Penguins by Species\nTry a different plot: bar plot with counts for one categorical variable\nCopy/paste this code in R:\nggplot(data = penguins, aes(x = species)) +\n  geom_bar() +\n  labs(title = \"Count of Penguins by Species\")\n\n\n💡 What does this bar plot tell us about penguin species frequency?"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#make-store-save-a-plot",
    "href": "lectures/drafts/04-slides.html#make-store-save-a-plot",
    "title": "Introduction to R: Lecture 4",
    "section": "Make, Store, Save a Plot",
    "text": "Make, Store, Save a Plot\nOnly make a plot\nggplot(data = penguins, aes(x = species)) +\n  geom_bar() +\n  labs(title = \"Count of Penguins by Species\")\nMake a plot and store it to an object\nspecies_count &lt;- ggplot(data = penguins, aes(x = species)) +\n  geom_bar() +\n  labs(title = \"Count of Penguins by Species\")\nspecies_count\nMake a plot, store it, and save it in your current working directory\nspecies_count &lt;- ggplot(data = penguins, aes(x = species)) +\n  geom_bar() +\n  labs(title = \"Count of Penguins by Species\")\nspecies_count\nggsave(\"penguins-species-count.png\", plot = species_count)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#data-manipulation-with-dplyr",
    "href": "lectures/drafts/04-slides.html#data-manipulation-with-dplyr",
    "title": "Introduction to R: Lecture 4",
    "section": "Data Manipulation with dplyr",
    "text": "Data Manipulation with dplyr\nToday we introduce a second package from the tidyverse: dplyr for data manipulation.\n\n\n\nDesigned for manipulating data frames and tibbles\n\nIncludes intuitive, clearly named functions for common tasks like filter() to filter rows based on conditions, summarize() to calculate summaries (e.g., averages), group_by for grouped operations, etc.\n\nLet’s work through two questions that require us to use these three dplyr functions!"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#programming-is-problem-solving",
    "href": "lectures/drafts/04-slides.html#programming-is-problem-solving",
    "title": "Introduction to R: Lecture 4",
    "section": "Programming is Problem-Solving",
    "text": "Programming is Problem-Solving\nPenguins Dataset:\n\n\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\n💡 Q1: What is the average body mass of an Adelie penguin?\n💡 Q2: What is the average body mass for each penguin species (three species)?\nDo not write code! Think about the logical/conceptual steps you’d give R. We’ll translate them into code together."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#q1-what-is-the-average-body-mass-of-an-adelie-penguin",
    "href": "lectures/drafts/04-slides.html#q1-what-is-the-average-body-mass-of-an-adelie-penguin",
    "title": "Introduction to R: Lecture 4",
    "section": "Q1: What is the average body mass of an Adelie penguin?",
    "text": "Q1: What is the average body mass of an Adelie penguin?\nPenguins Dataset:\n\n\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nInstructions to answer the first question:\n\nIdentify the data and variables you need\nFilter only the observations (rows) where species is Adelie\nCalculate the mean of the variable body_mass_g for this group\n\nOpen R: let’s turn to these steps into code using dplyr"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#q2-what-is-the-average-body-mass-for-each-penguin-species",
    "href": "lectures/drafts/04-slides.html#q2-what-is-the-average-body-mass-for-each-penguin-species",
    "title": "Introduction to R: Lecture 4",
    "section": "Q2: What is the average body mass for each penguin species?",
    "text": "Q2: What is the average body mass for each penguin species?\nPenguins Dataset:\n\n\n\n# A tibble: 4 × 8\n  species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n  &lt;fct&gt;   &lt;fct&gt;              &lt;dbl&gt;         &lt;dbl&gt;             &lt;int&gt;       &lt;int&gt;\n1 Adelie  Torgersen           39.1          18.7               181        3750\n2 Adelie  Torgersen           39.5          17.4               186        3800\n3 Adelie  Torgersen           40.3          18                 195        3250\n4 Adelie  Torgersen           NA            NA                  NA          NA\n# ℹ 2 more variables: sex &lt;fct&gt;, year &lt;int&gt;\n\n\n\n\nInstructions to answer the second question:\n\nIdentify the data and variables you need\nGroup the observations (rows) by species\nCalculate the mean of the variable body_mass_g for all groups\n\nOpen R: let’s turn to these steps into code using dplyr"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#assignment-operators",
    "href": "lectures/drafts/04-slides.html#assignment-operators",
    "title": "Introduction to R: Lecture 4",
    "section": "Assignment Operators",
    "text": "Assignment Operators\nx &lt;- 5                # assign 5 to an object\nmean(x = c(1, 2, 3))  # use = to specify an argument inside a function\n \npenguins_species &lt;- group_by(.data = penguins, species)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#logical-operators",
    "href": "lectures/drafts/04-slides.html#logical-operators",
    "title": "Introduction to R: Lecture 4",
    "section": "Logical Operators",
    "text": "Logical Operators\nx == x    # is equal (TRUE or FALSE)\nx != y    # is not equal (TRUE or FALSE) \nx &lt; y     # less than\nx &lt;= y    # less than or equal to \ny &gt; x     # more than\ny &gt;=      # more than or equal to\n\n\nadelie &lt;- filter(penguins, species == \"Adelie\")\n\n\n\nno_adelie &lt;- filter(penguins, species != \"Adelie\")\n\n\n\nheavy &lt;- filter(penguins, body_mass_g &gt; 4500)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#more-logical-operators",
    "href": "lectures/drafts/04-slides.html#more-logical-operators",
    "title": "Introduction to R: Lecture 4",
    "section": "More Logical Operators",
    "text": "More Logical Operators\nx | y     # EITHER x OR y has to be true\nx & y     # BOTH x AND y have to be true\nx &! y    # x AND NOT y (x is true AND y is false)\n\n\nExample use of | operator. What does this code return?\nfilter(.data = penguins, species == \"Adelie\" & species == \"Chinstrap\")\n\n\n\nExample use of & operator. What does this code return?\nfilter(.data = penguins, species == \"Adelie\" | species == \"Chinstrap\")"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#the-or-operator-can-be-used-with-long-or-short-syntax",
    "href": "lectures/drafts/04-slides.html#the-or-operator-can-be-used-with-long-or-short-syntax",
    "title": "Introduction to R: Lecture 4",
    "section": "The OR operator can be used with long or short syntax",
    "text": "The OR operator can be used with long or short syntax\nx | y     # EITHER x OR y has to be true\nx & y     # BOTH x AND y have to be true\nx &! y    # x AND NOT y (x is true AND y is false)\n\n\nExample use of | operator with extended syntax:\npenguins_adelie_chin &lt;- filter(.data = penguins, \n                                species == \"Adelie\" | species == \"Chinstrap\")\n\n\n\nSame code with shorter syntax:\npenguins_adelie_chin &lt;- filter(.data = penguins, \n                                species %in% c(\"Adelie\", \"Chinstrap\"))"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#practice-logical-operators-with-filter",
    "href": "lectures/drafts/04-slides.html#practice-logical-operators-with-filter",
    "title": "Introduction to R: Lecture 4",
    "section": "💻 Practice: Logical Operators with filter()",
    "text": "💻 Practice: Logical Operators with filter()\nLogical operators are often used together with the filter() function from dplyr\nPractice using them with the penguins dataset:\n\nTask 1: Get all Adelie penguins with flipper length greater than or equal to 180 mm\nTask 2: Get all penguins on Dream and Torgersen islands that are not female\n\nShare your code here: https://codeshare.io/5zlNLE"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#recap-of-what-learned-so-far",
    "href": "lectures/drafts/04-slides.html#recap-of-what-learned-so-far",
    "title": "Introduction to R: Lecture 4",
    "section": "Recap of What Learned so Far",
    "text": "Recap of What Learned so Far\nConceptually, any data transformation using dplyr requires us to:\n\nIdentify the data frame and the variables we need\nUse dplyr functions to tell R what action to take on which variable(s). These functions:\n\nAct like verbs in a sentence: they express what to do with the data\nCan be combined to perform complex operations\n\nSave the result, usually into a new object (a new dataframe)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#key-dplyr-functions",
    "href": "lectures/drafts/04-slides.html#key-dplyr-functions",
    "title": "Introduction to R: Lecture 4",
    "section": "Key dplyr Functions",
    "text": "Key dplyr Functions\nThe package dplyr has many functions, but you don’t need to memorize them all!\nOUR GOALS: Memorize the key functions + Know where to look up the rest dplyr.tidyverse.org\nThe next slide summarizes the most common dplyr functions to memorize."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#key-dplyr-functions-1",
    "href": "lectures/drafts/04-slides.html#key-dplyr-functions-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Key dplyr Functions",
    "text": "Key dplyr Functions\n\n\n\n\n\n\n\nfunction()\nWhat it does\n\n\n\n\nfilter()\nSelects rows based on values in one or more columns\n\n\narrange()\nReorders rows based on the values in specified columns\n\n\nselect()\nChooses specific columns by name\n\n\nrename()\nRenames one or more columns\n\n\nmutate()\nAdds new columns or modifies existing ones\n\n\ngroup_by()\nGroups the data by one or more variables for grouped operations\n\n\nsummarize()\nReduces each group to a single row using summary statistics (e.g., mean, sum, n)\n\n\n\n\n\n\n\n\n\n\n\nTip for Remembering These Functions\n\n\nEach row is an observation (e.g., one penguin) and each column is a variable (e.g., species, body mass). Some functions works on rows like filter(), arrange() others on columns like select(), mutate(). Think before coding!"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#unpacking-group_by",
    "href": "lectures/drafts/04-slides.html#unpacking-group_by",
    "title": "Introduction to R: Lecture 4",
    "section": "Unpacking group_by()",
    "text": "Unpacking group_by()\nThis function tells R to temporarily group the data by one or more variables, so the next function runs within each group. For example, this code groups the data by species, so whatever runs next (here summarize) happens for each species separately:\ngrouped &lt;- group_by(penguins, species)\nsummarize(grouped, avg_mass = mean(body_mass_g, na.rm = TRUE))\n\n\n\n\n\n\n\n\nWhat group_by() Does\n\n\ngroup_by() doesn’t change your data: it changes how the next function treats the data. It’s usually used right before summarize(), fiter(), mutate(), or arrange() to make those functions run once per group, not across the whole dataset."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#practice",
    "href": "lectures/drafts/04-slides.html#practice",
    "title": "Introduction to R: Lecture 4",
    "section": "💻 Practice",
    "text": "💻 Practice\nWhat is the average body mass for Adelie penguins by sex?\n\nFirst, THINK: How would you approach this question conceptually? Break it down into clear and simple steps before coding.\nThen, CODE: Translate those steps into R using the appropriate dplyr functions.\nHint: You’ll need to use three dplyr functions and in the best order\nShare your code here: https://codeshare.io/5zlNLE"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#filter-or-group-first",
    "href": "lectures/drafts/04-slides.html#filter-or-group-first",
    "title": "Introduction to R: Lecture 4",
    "section": "🧠 Filter or Group First?",
    "text": "🧠 Filter or Group First?\nTask: Calculate the average body mass for Adelie penguins by sex.\n\n\n✅ Filter for Adelie, then group by sex, then summarize\nGroup by sex, then filter for Adelie, then summarize\n\nGroup by species, filter for Adelie, then group by sex, then summarize\n\nFilter by both species and sex, then group, then summarize\n\nGroup by both species and sex, then summarize, then filter\n\nThe first is the best approach in this case. The other approaches are all correct (try them out!), but are less readable or do more work than needed.\nThe next slide compares the first two, which are the most common."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#filter-or-group-first-1",
    "href": "lectures/drafts/04-slides.html#filter-or-group-first-1",
    "title": "Introduction to R: Lecture 4",
    "section": "🧠 Filter or Group First?",
    "text": "🧠 Filter or Group First?\nTask: Calculate the average body mass for Adelie penguins by sex.\n\n\n\nFilter → Group (Best Practice here)\n\nFilter first to keep only Adelie penguins\n→ reduces rows right away\nGroup the filtered data by sex\n→ only relevant data is grouped\n\nSummarize to get average\n\n\n\nGroup → Filter (Works but Not Ideal here)\n\nGroup all penguins by sex\n→ includes extra, unneeded data\n\nFilter to keep only Adelie penguins\n→ discards part of what was grouped\n\nSummarize to get average"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#filter-or-group-first-2",
    "href": "lectures/drafts/04-slides.html#filter-or-group-first-2",
    "title": "Introduction to R: Lecture 4",
    "section": "🧠 Filter or Group First?",
    "text": "🧠 Filter or Group First?\nThe best order depends on the task (think first!) but here’s a rule of thumb:\n\nFilter first when you can reduce the data before grouping. Example: Calculate the average body mass for Adelie penguins by sex.\nadelie &lt;- filter(penguins, species == \"Adelie\")\nadelie_by_sex &lt;- group_by(adelie, sex)\nresult &lt;- summarize(adelie_by_sex, \n                    avg_mass = mean(body_mass_g, na.rm = TRUE))\n\nGroup first only when your filter depends on group-level summaries. Example: Calculate the average body mass only for species whose average bill length is over 40 mm.\nby_species &lt;- group_by(penguins, species)\navg_bill_high &lt;- filter(by_species, mean(bill_length_mm, na.rm = TRUE) &gt; 40)\nresult &lt;- summarize(avg_bill_high, \n                    avg_mass = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#pipes-to-chain-commands",
    "href": "lectures/drafts/04-slides.html#pipes-to-chain-commands",
    "title": "Introduction to R: Lecture 4",
    "section": "Pipes to Chain Commands",
    "text": "Pipes to Chain Commands\nPipes allow you to write a sequence of operations by passing the result of one function into the next making your code more readable and logical. Compare these two versions of the same code to calculate the average body mass for Adelie penguins by island.\nWithout pipes:\nadelie &lt;- filter(penguins, species == \"Adelie\")\nadelie_island &lt;- group_by(adelie, island)\nadelie_avg_mass_island &lt;- summarize(adelie_island, body_mass = mean(body_mass_g, na.rm = TRUE))\nWith pipes (%&gt;% or |&gt;):\nadelie_avg_mass_island &lt;- penguins %&gt;%\n  filter(species == \"Adelie\") %&gt;%\n  group_by(island) %&gt;%\n  summarize(body_mass = mean(body_mass_g, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#multiple-ways-to-write-r-code-pipes-are-often-the-best-choice",
    "href": "lectures/drafts/04-slides.html#multiple-ways-to-write-r-code-pipes-are-often-the-best-choice",
    "title": "Introduction to R: Lecture 4",
    "section": "Multiple Ways to Write R Code — Pipes Are Often the Best Choice",
    "text": "Multiple Ways to Write R Code — Pipes Are Often the Best Choice\nPipes are great and our ultimate goal. But there are several ways to write the same R code.\nIn fact, R didn’t have pipes for a long time!\nLet’s compare different ways to write the same code…"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#four-different-options-to-code-this-task",
    "href": "lectures/drafts/04-slides.html#four-different-options-to-code-this-task",
    "title": "Introduction to R: Lecture 4",
    "section": "Four Different Options to Code This Task",
    "text": "Four Different Options to Code This Task\nTask: Calculate the average body mass for Adelie penguins by island.\n\n\n\n\n\n\n\n\nStrategy: Break Down the Task Before You Code it!\n\n\n\nIdentify data and variable needed\n\nFilter the data for rows where species is Adelie\n\nGroup the filtered data by island\n\nCalculate the average body mass for each group"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#option-1-save-each-step-in-a-new-data-frame",
    "href": "lectures/drafts/04-slides.html#option-1-save-each-step-in-a-new-data-frame",
    "title": "Introduction to R: Lecture 4",
    "section": "Option 1: Save each step in a new data frame",
    "text": "Option 1: Save each step in a new data frame\n\npenguins_adelie &lt;- filter(penguins, species == \"Adelie\")\npenguins_adelie_island &lt;- group_by(penguins_adelie, island)\npenguins_final &lt;- summarize(penguins_adelie_island, \n                            body_mass = mean(body_mass_g, na.rm = TRUE))\nprint(penguins_final)\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This is valid code.\n⚠️ Drawback: You must save each intermediate object. This can clutter your environment, increase R memory usage with large datasets, and make your code more prone to typos. Shorter names for each step might reduce typos but sacrifice clarity, which is not good for self-documentation."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#option-2-replace-the-original-data-frame",
    "href": "lectures/drafts/04-slides.html#option-2-replace-the-original-data-frame",
    "title": "Introduction to R: Lecture 4",
    "section": "Option 2: Replace the original data frame",
    "text": "Option 2: Replace the original data frame\n\npenguins &lt;- filter(penguins, species == \"Adelie\")\npenguins &lt;- group_by(penguins, island)\npenguins &lt;- summarize(penguins, body_mass = mean(body_mass_g, na.rm = TRUE))\nprint(penguins)\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This also works, but it’s not good practice.\n⚠️ Drawback: It overwrites the original dataset. If something goes wrong midway, you’ll need to re-run everything from scratch.\n\n\n\n\n\n\nWarning\n\n\nThis approach is risky — especially when working with important datasets. Always keep a copy of your original data before modifying it."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#option-3-function-composition",
    "href": "lectures/drafts/04-slides.html#option-3-function-composition",
    "title": "Introduction to R: Lecture 4",
    "section": "Option 3: Function composition",
    "text": "Option 3: Function composition\n\ndata(penguins)\nsummarize(group_by(filter(penguins, species == \"Adelie\"), island), \n          body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This also works, and some people like this style.\n⚠️ Drawback: It’s harder to read and debug. You must follow it from the inside out, which makes it harder to read for humans. If something breaks, it’s difficult to isolate where the error is happening as you can’t easily inspect intermediate results."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#option-4-pipes-the-winner",
    "href": "lectures/drafts/04-slides.html#option-4-pipes-the-winner",
    "title": "Introduction to R: Lecture 4",
    "section": "Option 4: Pipes (The Winner!)",
    "text": "Option 4: Pipes (The Winner!)\n\npenguins %&gt;%\n  filter(species == \"Adelie\") %&gt;%\n  group_by(island) %&gt;%\n  summarize(body_mass = mean(body_mass_g, na.rm = TRUE))\n\n# A tibble: 3 × 2\n  island    body_mass\n  &lt;fct&gt;         &lt;dbl&gt;\n1 Biscoe        3710.\n2 Dream         3688.\n3 Torgersen     3706.\n\n\n\n\n✅ This is valid and readable code — without the drawbacks of the previous options.\n💡 Why pipes? The pipe operator (you can write it as %&gt;% or |&gt;) passes the result of one function to the next, making your code easy to read from top to bottom. Pipes emphasize actions, not object names and you can read the code like a recipe:\n\nStart with the dataset\nFilter for Adelie penguins\nGroup by island\nSummarize body mass"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-errors-with-pipes-examples-using-flights-data",
    "href": "lectures/drafts/04-slides.html#common-errors-with-pipes-examples-using-flights-data",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Errors with Pipes: Examples using flights data",
    "text": "Common Errors with Pipes: Examples using flights data\nWe use a built-in dataset of all flights (n = 336,776) that departed from NYC in 2013.\nlibrary(nycflights13)\ndata(flights)\nhead(flights)\n\n\n# A tibble: 6 × 19\n   year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time\n  &lt;int&gt; &lt;int&gt; &lt;int&gt;    &lt;int&gt;          &lt;int&gt;     &lt;dbl&gt;    &lt;int&gt;          &lt;int&gt;\n1  2013     1     1      517            515         2      830            819\n2  2013     1     1      533            529         4      850            830\n3  2013     1     1      542            540         2      923            850\n4  2013     1     1      544            545        -1     1004           1022\n5  2013     1     1      554            600        -6      812            837\n6  2013     1     1      554            558        -4      740            728\n# ℹ 11 more variables: arr_delay &lt;dbl&gt;, carrier &lt;chr&gt;, flight &lt;int&gt;,\n#   tailnum &lt;chr&gt;, origin &lt;chr&gt;, dest &lt;chr&gt;, air_time &lt;dbl&gt;, distance &lt;dbl&gt;,\n#   hour &lt;dbl&gt;, minute &lt;dbl&gt;, time_hour &lt;dttm&gt;"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-errors-with-pipes-examples-using-flights-data-1",
    "href": "lectures/drafts/04-slides.html#common-errors-with-pipes-examples-using-flights-data-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Errors with Pipes: Examples using flights data",
    "text": "Common Errors with Pipes: Examples using flights data\nNote the use of glimpse() vs head() to explore the dataset. In this case, glimpse() is more useful. Why?\nlibrary(nycflights13)\ndata(flights)\nglimpse(flights)\n\n\nRows: 336,776\nColumns: 19\n$ year           &lt;int&gt; 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2013, 2…\n$ month          &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ day            &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1…\n$ dep_time       &lt;int&gt; 517, 533, 542, 544, 554, 554, 555, 557, 557, 558, 558, …\n$ sched_dep_time &lt;int&gt; 515, 529, 540, 545, 600, 558, 600, 600, 600, 600, 600, …\n$ dep_delay      &lt;dbl&gt; 2, 4, 2, -1, -6, -4, -5, -3, -3, -2, -2, -2, -2, -2, -1…\n$ arr_time       &lt;int&gt; 830, 850, 923, 1004, 812, 740, 913, 709, 838, 753, 849,…\n$ sched_arr_time &lt;int&gt; 819, 830, 850, 1022, 837, 728, 854, 723, 846, 745, 851,…\n$ arr_delay      &lt;dbl&gt; 11, 20, 33, -18, -25, 12, 19, -14, -8, 8, -2, -3, 7, -1…\n$ carrier        &lt;chr&gt; \"UA\", \"UA\", \"AA\", \"B6\", \"DL\", \"UA\", \"B6\", \"EV\", \"B6\", \"…\n$ flight         &lt;int&gt; 1545, 1714, 1141, 725, 461, 1696, 507, 5708, 79, 301, 4…\n$ tailnum        &lt;chr&gt; \"N14228\", \"N24211\", \"N619AA\", \"N804JB\", \"N668DN\", \"N394…\n$ origin         &lt;chr&gt; \"EWR\", \"LGA\", \"JFK\", \"JFK\", \"LGA\", \"EWR\", \"EWR\", \"LGA\",…\n$ dest           &lt;chr&gt; \"IAH\", \"IAH\", \"MIA\", \"BQN\", \"ATL\", \"ORD\", \"FLL\", \"IAD\",…\n$ air_time       &lt;dbl&gt; 227, 227, 160, 183, 116, 150, 158, 53, 140, 138, 149, 1…\n$ distance       &lt;dbl&gt; 1400, 1416, 1089, 1576, 762, 719, 1065, 229, 944, 733, …\n$ hour           &lt;dbl&gt; 5, 5, 5, 5, 6, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 6…\n$ minute         &lt;dbl&gt; 15, 29, 40, 45, 0, 58, 0, 0, 0, 0, 0, 0, 0, 0, 0, 59, 0…\n$ time_hour      &lt;dttm&gt; 2013-01-01 05:00:00, 2013-01-01 05:00:00, 2013-01-01 0…"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-1",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 1",
    "text": "Common Pipe Errors: Example 1\nWhat’s wrong with this code?\nBefore we debug it, let’s first think through what the code is trying to do conceptually.\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  by_dest &lt;- group_by(dest) %&gt;% \n  delay &lt;- summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  d &lt;- filter(count &gt; 20)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-1-1",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-1-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 1",
    "text": "Common Pipe Errors: Example 1\nWhat’s wrong with this code?\nBefore we debug it, let’s first think through what the code is trying to do conceptually.\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  by_dest &lt;- group_by(dest) %&gt;% \n  delay &lt;- summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  d &lt;- filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nTake the flights dataset\n\nGroup flights by destination, using the variable dest\n\nCount the delayed flights and store the result in a new variable called count\n\nCalculate the average arrival delay, using arr_delay, and store the result in a new variable called delay\n\nRemove destinations with fewer than 20 flights\n\nQuestion: Why filter(count &gt; 20) to remove destinations with fewer than 20 flights?"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-1-2",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-1-2",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 1",
    "text": "Common Pipe Errors: Example 1\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  by_dest &lt;- group_by(dest) %&gt;% \n  delay &lt;- summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  d &lt;- filter(count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nDon’t assign anything inside a pipe. Use &lt;- only at the start, if you want to save the final result. Do not use it between steps."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-2",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-2",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 2",
    "text": "Common Pipe Errors: Example 2\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest)\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE))\n  filter(count &gt; 20)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-2-1",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-2-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 2",
    "text": "Common Pipe Errors: Example 2\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest)\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE))\n  filter(count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nEach function in a pipe chain must be connected with %&gt;% to keep the chain going."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-3",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-3",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 3",
    "text": "Common Pipe Errors: Example 3\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  group_by(.data = flights, dest) %&gt;% \n  summarize(.data = flights,\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  filter(.data = flights, count &gt; 20)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-3-1",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-3-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 3",
    "text": "Common Pipe Errors: Example 3\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights %&gt;% \n  group_by(.data = flights, dest) %&gt;% \n  summarize(.data = flights,\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;% \n  filter(.data = flights, count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nWhen using pipes, only reference the data frame at the start of the chain. Do not repeat .data = flights in every function as %&gt;% automatically passes the data along."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-4",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-4",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 4",
    "text": "Common Pipe Errors: Example 4\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights +\n  group_by(dest) +\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) +\n  filter(count &gt; 20)"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#common-pipe-errors-example-4-1",
    "href": "lectures/drafts/04-slides.html#common-pipe-errors-example-4-1",
    "title": "Introduction to R: Lecture 4",
    "section": "Common Pipe Errors: Example 4",
    "text": "Common Pipe Errors: Example 4\nWhat’s wrong with this code?\n\n\nInvalid code\n\ndelays &lt;- flights +\n  group_by(dest) +\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) +\n  filter(count &gt; 20)\n\n\nCorrect code\n\ndelays &lt;- flights %&gt;%\n  group_by(dest) %&gt;%\n  summarize(\n    count = n(),\n    delay = mean(arr_delay, na.rm = TRUE)) %&gt;%\n  filter(count &gt; 20)\n\n\n\n\n\n\n\n\n\nImportant\n\n\nThe + sign is only for adding layers in ggplot2! Don’t use it to chain dplyr functions: use %&gt;% to pipe data through a sequence of transformations."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#practice-1",
    "href": "lectures/drafts/04-slides.html#practice-1",
    "title": "Introduction to R: Lecture 4",
    "section": "💻 Practice",
    "text": "💻 Practice\nDownload today’s in-class exercises from the website for more practice on operator, dplyr, and pipes."
  },
  {
    "objectID": "lectures/drafts/04-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/04-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 4",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nPracticed programming as problem-solving: think through tasks before coding\nLearned R operators\nKey dplyr functions like filter(), group_by(), summarize(), and more\nChained commands with pipes\nReviewed common mistakes when using pipes and how to avoid them"
  },
  {
    "objectID": "lectures/drafts/04-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/04-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 4",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#what-are-factors-in-r",
    "href": "lectures/drafts/06-slides.html#what-are-factors-in-r",
    "title": "Introduction to R: Lecture 6",
    "section": "What are Factors in R?",
    "text": "What are Factors in R?\nCategorical variables are variables with a fixed set of possible values. For example, the species variable in the penguins dataset can only take on one of three values: “Adelie”, “Chinstrap”, or “Gentoo”.\nBy default, R uses character vectors to store categorical variables. But character vectors don’t preserve meaninfgul order.\nTo fix this, R uses factors — a special type of vector designed for categorical data."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#what-are-factors-in-r-1",
    "href": "lectures/drafts/06-slides.html#what-are-factors-in-r-1",
    "title": "Introduction to R: Lecture 6",
    "section": "What are Factors in R?",
    "text": "What are Factors in R?\n\n\n\n\n\n\n\nCharacter Vector vs. Factor\n\n\nIn R, the most common data structures to store categorical variables are:\n\nCharacter vector (default): Data type for storing categorical data (or general text) as plain strings. Values have no built-in order or grouping.\nFactor (preferred when order matters): Data type for storing categorical data with defined levels. Values are treated as discrete categories, with optional ordering."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#real-world-examples-of-categorical-data",
    "href": "lectures/drafts/06-slides.html#real-world-examples-of-categorical-data",
    "title": "Introduction to R: Lecture 6",
    "section": "Real-world examples of categorical data",
    "text": "Real-world examples of categorical data\nYou often need factors in R. For example, factors allow sorting categorical variables in your desired order, such as:\n\nMonths of the year\nLikert scales (e.g., Strongly Agree → Strongly Disagree)\nPolitical parties\nEducational attainment levels\nRace/ethnicity categories\nEtc."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#why-use-factors",
    "href": "lectures/drafts/06-slides.html#why-use-factors",
    "title": "Introduction to R: Lecture 6",
    "section": "Why use Factors?",
    "text": "Why use Factors?\nDefine a character vector with four months and sort it. Copy and paste this code in R and run it. What do you notice?\n# Define\nx1 &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\n\n# Check\nx1\nclass(x1)\n\n# Sort\nsort(x1)"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#why-use-factors-1",
    "href": "lectures/drafts/06-slides.html#why-use-factors-1",
    "title": "Introduction to R: Lecture 6",
    "section": "Why use Factors?",
    "text": "Why use Factors?\nFrom the previous example we observe that by default, R sorts character vectors alphabetically!\nHowever, alphabetical order isn’t ideal to sort months — we usually want them in chronological order. To do that in R, we need to convert them to factors.\n\n\n\nIn the next slides, we learn two common cases that you’ll likely encounter when working with factors:\n\nConverting a Character Vector to a Factor\nConverting a Numeric Vector to a Factor"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#converting-a-character-vector-to-a-factor",
    "href": "lectures/drafts/06-slides.html#converting-a-character-vector-to-a-factor",
    "title": "Introduction to R: Lecture 6",
    "section": "1. Converting a Character Vector to a Factor",
    "text": "1. Converting a Character Vector to a Factor\nCharacter vectors sort alphabetically by default. To change the order, convert them to factors using factor() and assign the desired levels.\n# Character vector with month names\nx1 &lt;- c(\"Dec\", \"Apr\", \"Jan\", \"Mar\")\nclass(x1)\n\n# Define all possibile levels in desired order\nmonth_levels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\")\n\n# Convert to factor using those levels\ny1 &lt;- factor(x1, levels = month_levels)\n\n# Check\nclass(y1)\nlevels(y1)\n\n# Compare sorting\nsort(x1)  # Alphabetical\nsort(y1)  # Chronological (by factor levels)"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#converting-a-numeric-vector-to-a-factor",
    "href": "lectures/drafts/06-slides.html#converting-a-numeric-vector-to-a-factor",
    "title": "Introduction to R: Lecture 6",
    "section": "2. Converting a Numeric Vector to a Factor",
    "text": "2. Converting a Numeric Vector to a Factor\nSometimes categorical data is stored as numbers (e.g., months as 1, 2, 12) in numeric vectors. To convert them to factors with factor(), you need to specify both levels and labels.\n# Numeric vector where values represent months\nx2 &lt;- c(12, 4, 1, 3)\nclass(x2)\n\n# Define all possibile numeric values we expect (1 = Jan, ..., 12 = Dec)\nmonth_levels &lt;- 1:12\n\n# Define all labels we want to show for each value\nmonth_labels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \n                  \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\") \n\n# Convert to factor using levels and labels\ny2 &lt;- factor(x2, \n            levels = month_levels,\n            labels = month_labels)\n\n# Check\nclass(y2)\nlevels(y2)\n\n# Compare sorting\nsort(x2)  # Numeric\nsort(y2)  # Chronological (by factor levels)"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#levels-and-labels-in-factors",
    "href": "lectures/drafts/06-slides.html#levels-and-labels-in-factors",
    "title": "Introduction to R: Lecture 6",
    "section": "Levels and Labels in Factors",
    "text": "Levels and Labels in Factors\n\n\nLevels\n\nDefine the set of distinct categories a factor can take\n\nUse to tell R the order of theh categories\n\nUse only levels when your input data is already readable (e.g., \"Jan\", \"Feb\", …, \"Dec\")\n\n\nLabels\n\nOptional names to display when the data uses codes\nUse to tell R what to display for each value\n\nUse labels with levels when your input data uses codes (e.g., 1 = \"Jan\"). Labels are matched to levels, not to raw values\n\n\n\n\n\n\n\n\nTip\n\n\nUse both levels and labels in the factor() function when you want to map specific underlying values (levels) to more human-readable names (labels). The most common use is when your input data is a numeric vector that uses codes (e.g., uses the number 1 for January)."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#levels-and-labels-in-factors-1",
    "href": "lectures/drafts/06-slides.html#levels-and-labels-in-factors-1",
    "title": "Introduction to R: Lecture 6",
    "section": "Levels and Labels in Factors",
    "text": "Levels and Labels in Factors\n\n\nWhen you input is a Character Vector\nExample values: \"Jan\", \"May\", \"Oct\"\n\nAlready readable by humans\n(Often) only want to control the order\n\nUse only levels\nExample: \"May\" stays \"May\", but will now sort correctly\n\n\nWhen you input is a Numeric Vector\nExample values: 1, 7, 12\n\nNot already readable by humans\nWant to control the order & add readable labels\nUse levels to order & labels to define what to show\nExample: 1 becomes \"Jan\", 2 becomes \"Feb\", etc."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#levels-and-labels-in-factors-examples",
    "href": "lectures/drafts/06-slides.html#levels-and-labels-in-factors-examples",
    "title": "Introduction to R: Lecture 6",
    "section": "Levels and Labels in Factors: Examples",
    "text": "Levels and Labels in Factors: Examples\nBefore you run the code below in R, take a moment to predict the output. What do you expect each code chunk to return, and why?\n# Example 1 with Input as Character Vector\na &lt;- c(\"Low\", \"High\", \"Medium\", \"Low\")\nb &lt;- factor(a, levels = c(\"Low\", \"Medium\", \"High\"))\nb\n\n# Example 2 with Input as Numeric vector\ni &lt;- c(1, 3, 2, 1)\nj &lt;- factor(i, levels = c(1, 2, 3),\n               labels = c(\"Low\", \"Medium\", \"High\"))\nj"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#common-error-mismatched-labels-and-levels",
    "href": "lectures/drafts/06-slides.html#common-error-mismatched-labels-and-levels",
    "title": "Introduction to R: Lecture 6",
    "section": "Common Error: Mismatched Labels and Levels",
    "text": "Common Error: Mismatched Labels and Levels\nTry the code below in R. What do you notice?\n# Numeric vector representing months\nx2 &lt;- c(12, 4, 1, 3)\nclass(x2)\n\n# Attempt 1\ny2 &lt;- factor(x2, labels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\"))\n\n# Attempt 2\ny2 &lt;- factor(x2, levels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12), \n                 labels = c(\"Jan\",\"Mar\", \"Apr\", \"Dec\"))\n\n# Attempt 3\ny2 &lt;- factor(x2, levels = c(1, 2, 3, 4),\n                 labels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\"))"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#how-to-fix-it",
    "href": "lectures/drafts/06-slides.html#how-to-fix-it",
    "title": "Introduction to R: Lecture 6",
    "section": "How to Fix It",
    "text": "How to Fix It\nNone of the three attempts from the previous slide works.\n\nAttempts 1 and 2: have a mismatch between the number of labels and the levels. R throws an error.\nAttempt 3: R doesn’t throw an error, but the code is incorrect because it forces levels 1 to 4, even though the input vector has values like 12. Since 12 isn’t among the defined levels, it becomes NA, leading to incorrect matches.\n\nYou can fix the code from the previous slide in two ways:\n# Numeric vector representing months\nx2 &lt;- c(12, 4, 1, 3)\n\n# Correct code option 1 (reccomended)\nmonth_labels &lt;- c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"June\", \"July\", \"Aug\", \"Sept\", \"Oct\", \"Nov\", \"Dec\")\ny2 &lt;- factor(x2, levels = 1:12,  \n                 labels = month_labels)\n\n# Correct code option 2 (works but keeps only used months)\ny2 &lt;- factor(x2, levels = c(1, 3, 4, 12),\n                 labels = c(\"Jan\", \"Mar\", \"Apr\", \"Dec\"))"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#the-forcats-package",
    "href": "lectures/drafts/06-slides.html#the-forcats-package",
    "title": "Introduction to R: Lecture 6",
    "section": "The “forcats” Package",
    "text": "The “forcats” Package\nThe function factor() is the “base R” way to create and manage factors. It’s a foundational tool, and it’s important to learn how it works!\nBut once you’re comfortable with it, the forcats package (part of the tidyverse) offers cleaner, more powerful tools for working with categorical data."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#the-forcats-package-1",
    "href": "lectures/drafts/06-slides.html#the-forcats-package-1",
    "title": "Introduction to R: Lecture 6",
    "section": "The “forcats” Package",
    "text": "The “forcats” Package\nThe forcats package has several functions to work with factors. Below are three commonly used ones:\n\n\n\n\n\n\n\n\nFunction\nWhat It Does\nWhen to Use\n\n\n\n\nfct_relevel()\nManually set the order of levels\nSimilar to factor(..., levels = ...) in base R\n\n\nfct_reorder()\nReorder levels based on another variable (e.g., numeric)\nEasier to use, great for ordering bars in ggplot2\n\n\nfct_infreq()\nReorder levels by frequency (most to least common)\nUseful when showing most common categories first\n\n\n\nFor more functions, see the forcats documentation"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#practice-plotting-tips-by-weekday",
    "href": "lectures/drafts/06-slides.html#practice-plotting-tips-by-weekday",
    "title": "Introduction to R: Lecture 6",
    "section": "💻 Practice: Plotting Tips by Weekday",
    "text": "💻 Practice: Plotting Tips by Weekday\nIn this exercise, you’ll learn two things:\n\nto correctly use stat = identity with bar plots\nto control the order of categories in bar plots, using both factor() and forcats function called fct_relevel()"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#load-data",
    "href": "lectures/drafts/06-slides.html#load-data",
    "title": "Introduction to R: Lecture 6",
    "section": "Load Data",
    "text": "Load Data\nCopy and run the code below to create this dataset:\nlibrary(tidyverse)\n\ndf &lt;- tibble(\n  week = c(\"Mon\", \"Wed\", \"Fri\", \"Wed\", \"Thu\", \"Sat\", \"Sat\"),\n  tip = c(10, 12, 20, 8, 25, 25, 30)\n)\n\ndf\nOur Goal: Create a bar plot with days of the week on the x-axis and the total tip amount on the y-axis (e.g., Saturday should display a bar with a height of $55, etc.)."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#whats-wrong-with-this-plot",
    "href": "lectures/drafts/06-slides.html#whats-wrong-with-this-plot",
    "title": "Introduction to R: Lecture 6",
    "section": "What’s Wrong With This Plot?",
    "text": "What’s Wrong With This Plot?\nTry this code. What does the height of each bar represent?\nggplot(df, aes(x = week)) +\n  geom_bar()\n\n\n\n\n\n\n\nWarning\n\n\nWhy aren’t the bars showing the actual tip amounts?\n\nBecause by default, geom_bar() uses stat = \"count\" to counts row and plot them on the y-axis\nTo plot the actual values (not counts), use stat = \"identity\" with both a x and y"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#fix-the-y-axis-on-this-bar-plot",
    "href": "lectures/drafts/06-slides.html#fix-the-y-axis-on-this-bar-plot",
    "title": "Introduction to R: Lecture 6",
    "section": "Fix the y-axis on this bar plot",
    "text": "Fix the y-axis on this bar plot\nTo fix this plot, we need to change the default `stat in geom_bar() (from count to identity) and manually specify both the x and y aesthetics. How do we know this? From the documentation or by typing ?geom_bar in the R Console.\nggplot(df, aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")\nThis is much better, but we still do not have the bars nicely ordered…."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#fix-the-order-of-the-bars-using-factor",
    "href": "lectures/drafts/06-slides.html#fix-the-order-of-the-bars-using-factor",
    "title": "Introduction to R: Lecture 6",
    "section": "Fix the order of the bars using factor()",
    "text": "Fix the order of the bars using factor()\nWe use base R’s factor() to control the order of weekdays.\nFill in the correct weekday order in the code below:\ndf %&gt;%\n  mutate(week = factor(week, levels = _____ )) %&gt;%   # fill in the order\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#do-the-same-but-using-fct_relevel",
    "href": "lectures/drafts/06-slides.html#do-the-same-but-using-fct_relevel",
    "title": "Introduction to R: Lecture 6",
    "section": "Do the same but using fct_relevel()",
    "text": "Do the same but using fct_relevel()\nNow we make the same plot using fct_relevel()\nFill the correct weekday order in the code below:\ndf %&gt;%\n  mutate(week = fct_relevel(week, ______ )) %&gt;%   # your order here\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#solutions",
    "href": "lectures/drafts/06-slides.html#solutions",
    "title": "Introduction to R: Lecture 6",
    "section": "Solutions",
    "text": "Solutions\n# With factor\ndays &lt;- c(\"Mon\", \"Wed\", \"Thu\", \"Fri\", \"Sat\")\ndf %&gt;%\n  mutate(week = factor(week, levels = days)) %&gt;%\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")\n\n# With fct_relevel\ndays &lt;- c(\"Mon\", \"Wed\", \"Thu\", \"Fri\", \"Sat\")\ndf %&gt;%\n  mutate(week = fct_relevel(week, days)) %&gt;%\n  ggplot(aes(x = week, y = tip)) +\n  geom_bar(stat = \"identity\") +\n  labs(title = \"Tips by Weekday\", x = \"Weekday\", y = \"Tip ($)\")\n\n\n\nQ: Why don’t we use labels in factor(week, levels = days)? Because the values (\"Mon\", etc.) are already readable. You don’t need to change them, unless you want different names (e.g., \"Monday\", etc.).\nQ: Why doesn’t days include all 7 days of the week? We could include all possible levels, and it’s good practice for consistency when using factor(). But other functions, like fct_relevel(), may not add missing levels if those values aren’t present in the input data."
  },
  {
    "objectID": "lectures/drafts/06-slides.html#reflections",
    "href": "lectures/drafts/06-slides.html#reflections",
    "title": "Introduction to R: Lecture 6",
    "section": "Reflections",
    "text": "Reflections\n\n\n\n\n\n\nTip\n\n\n\nWhat happens when you don’t set the factor order?\nWhich method (factor() or fct_relevel()) do you prefer and why? Check the forcats package documentation for more functions, especially fct_reorder() which is straightforward to use\nWhy is stat = \"identity\" necessary for this kind of plot?\nAlways match the number of provided levels and labels inside `factor()``\nTip: HW2 includes a question with an optional part that asks you to do exactly this (see also Lecture 5 in-class materials for further help on this)\n\n\n\n\nWant more practice? Download today’s in-class materials for more practice exercises on working with factors!"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#key-dplyr-functions-from-lecture-4-slides",
    "href": "lectures/drafts/06-slides.html#key-dplyr-functions-from-lecture-4-slides",
    "title": "Introduction to R: Lecture 6",
    "section": "Key dplyr Functions (from Lecture 4 Slides)",
    "text": "Key dplyr Functions (from Lecture 4 Slides)\n\n\n\n\n\n\n\nfunction()\nWhat it does\n\n\n\n\nfilter()\nSelects rows based on values in one or more columns\n\n\narrange()\nReorders rows based on the values in specified columns\n\n\nselect()\nChooses specific columns by name\n\n\nrename()\nRenames one or more columns\n\n\nmutate()\nAdds new columns or modifies existing ones\n\n\ngroup_by()\nGroups the data by one or more variables for grouped operations\n\n\nsummarize()\nReduces each group to a single row using summary statistics (e.g., mean, sum, n)\n\n\n\n\n\n\n\n\n\n\n\nTip for Remembering These Functions\n\n\nEach row is an observation (e.g., one penguin) and each column is a variable (e.g., species, body mass). Some functions works on rows like filter(), arrange() others on columns like select(), mutate(). Think before coding!"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#more-functions",
    "href": "lectures/drafts/06-slides.html#more-functions",
    "title": "Introduction to R: Lecture 6",
    "section": "More Functions",
    "text": "More Functions\n\n\n\n\n\n\n\nfunction()\nWhat it does\n\n\n\n\nrelocate()\nReorders columns by name; works on columns, not rows like arrange()\n\n\ncount()\nCounts observations by group\n\n\nn_distinct()\nCounts the number of unique values in a column; often used with summarize()\n\n\ndistinct()\nReturns unique rows based on one or more columns\n\n\nacross()\nApplies the same operation to multiple columns at once"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#practice",
    "href": "lectures/drafts/06-slides.html#practice",
    "title": "Introduction to R: Lecture 6",
    "section": "💻 Practice",
    "text": "💻 Practice\nWe review these verbs using the Rmd tutorial downloadable from today’s in-class materials on the course website"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/06-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 6",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nWhat factors are and how to convert character or numeric vectors to factors\n\nHow to control the order of categories using levels and labels\n\nHow to fix common geom_bar() plotting issues (e.g., bar heights and order)\nReviewed and expanded dplyr functions for data manipulation"
  },
  {
    "objectID": "lectures/drafts/06-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/06-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 6",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#what-is-base-r",
    "href": "lectures/drafts/08-slides.html#what-is-base-r",
    "title": "Introduction to R: Lecture 8",
    "section": "What Is Base R?",
    "text": "What Is Base R?\nWhen people say “base R”, they are referring to the core or basic features of the R language, developed before the tidyverse (hence the name as base R).\nThese include:\n\nProgramming Tools: if-else statements, loops, functions\n\nData Types: numeric, integer, character, logical, factor\n\nData Structures: vectors, matrices, lists, data frames\n\nBasic Operations: indexing/subsetting, arithmetic/logical comparisons"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#base-r-vs.-the-tidyverse",
    "href": "lectures/drafts/08-slides.html#base-r-vs.-the-tidyverse",
    "title": "Introduction to R: Lecture 8",
    "section": "Base R vs. the Tidyverse",
    "text": "Base R vs. the Tidyverse\n\n\nBase R\n\nDeveloped in the early 1990s as part of R’s core language\n\nIncludes built-in functions like mean(), length(), etc. and key programming tools like loops, etc.\nOffers more direct control, but code can be longer or harder to read\n\n\n\n  \n\nTidyverse\n\nFormally introduced after 2016 as a set of user-friendly packages\nIncludes packages like ggplot2, dplyr, tidyr, forcats, tidyr, stringr, etc.\nPrioritizes readability and consistency, making code cleaner and easier to read"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#how-base-r-and-the-tidyverse-work-together",
    "href": "lectures/drafts/08-slides.html#how-base-r-and-the-tidyverse-work-together",
    "title": "Introduction to R: Lecture 8",
    "section": "How Base R and the Tidyverse Work Together",
    "text": "How Base R and the Tidyverse Work Together\n\nThe tidyverse is built on base R — it doesn’t replace it\n\nYou can combine base R and tidyverse functions in your code\n\nYou’ll often see both styles used in real-world scripts and examples\n\n\n\n\n\n\n\n\nTip\n\n\nUse the tidyverse for most of your daily work, but understand enough base R to follow and troubleshoot R code!"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#r-data-types-and-data-structures-1",
    "href": "lectures/drafts/08-slides.html#r-data-types-and-data-structures-1",
    "title": "Introduction to R: Lecture 8",
    "section": "R Data Types and Data Structures",
    "text": "R Data Types and Data Structures\nData Types and Data Structures are part of base R. They are the fundamentals — the “ABC” of how R stores and organizes data.\n\nData Type — what kind of value it is\n\nData Structure — how values are stored and organized\n\nWe look at each and at how they relate."
  },
  {
    "objectID": "lectures/drafts/08-slides.html#r-data-types",
    "href": "lectures/drafts/08-slides.html#r-data-types",
    "title": "Introduction to R: Lecture 8",
    "section": "R Data Types",
    "text": "R Data Types\nData Type: describes the kind of value you’re working with.\n\n\nR has the following main data types (for more see here):\n\nNumeric – numbers, either with or without decimals\n\nDouble with decimals (default): 3.14, 2.0\n\nInteger whole numbers: 2L, 100L\n\nCharacter – text or strings (always in quotes): \"hello\"\nLogical – TRUE or FALSE values: TRUE, FALSE\nFactor – categorical values with levels: \"low\", \"medium\""
  },
  {
    "objectID": "lectures/drafts/08-slides.html#r-data-structures",
    "href": "lectures/drafts/08-slides.html#r-data-structures",
    "title": "Introduction to R: Lecture 8",
    "section": "R Data Structures",
    "text": "R Data Structures\nData Structure: like a container that holds one or more values.\n\n\nR has the following main data structures (for more see here):\n\nVector – one-dimensional, all elements same type\nv &lt;- c(1, 2, 3)\nMatrix – two-dimensional, all elements same type\nm &lt;- matrix(1:6, nrow = 2)\nDataframe – two-dimensional, columns can have different types\ndf &lt;- data.frame(name = c(\"A\", \"B\"), age = c(25, 30))\nList – multi-dimensional, holds elements of any type, even mixed\nl &lt;- list(num = 1:3, name = c(\"Sabrina\", \"Laura\"))"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#how-data-types-and-data-structures-relate",
    "href": "lectures/drafts/08-slides.html#how-data-types-and-data-structures-relate",
    "title": "Introduction to R: Lecture 8",
    "section": "How Data Types and Data Structures Relate",
    "text": "How Data Types and Data Structures Relate\nEvery single element in R has a data type. That element is stored inside a larger data structure.\nExamples:\nx &lt;- c(1, 2, 3)      # a vector (structure) of three elements, all numeric values (type) \ny &lt;- list(\"a\", 5)    # a list (structure) of two elements, one character value and one numeric value (type)\n\n \n\n\n\n\n\n\n\nThe data structure you use affects what data types you can store:\n\n\nNot all data structures support every combination of data types. Some allow only one type, while others can store many types together."
  },
  {
    "objectID": "lectures/drafts/08-slides.html#how-data-types-and-data-structures-relate-1",
    "href": "lectures/drafts/08-slides.html#how-data-types-and-data-structures-relate-1",
    "title": "Introduction to R: Lecture 8",
    "section": "How Data Types and Data Structures Relate",
    "text": "How Data Types and Data Structures Relate\n\n\n\n\n\n\n\n\n\nStructure\nDimensions\nAllow Mixed Types?\nNotes\n\n\n\n\nVector\n1D\nNo\nAll elements must be the same data type\n\n\nMatrix\n2D\nNo\nAll elements must be the same data type\n\n\nDataframe\n2D\nYes (by column)\nEach column is a vector; data types can vary by column\n\n\nList\nFlexible\nYes\nEach element can be anything: numbers, text, vectors, even data frames"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#practice",
    "href": "lectures/drafts/08-slides.html#practice",
    "title": "Introduction to R: Lecture 8",
    "section": "💻 Practice",
    "text": "💻 Practice\nRun the code below to create different R objects. Then use class() + str() or glimpse() on each object to explore their data structure.\n# vector\nnum_v &lt;- c(1:9)\nchar_v &lt;- c(\"hello\", \"ciao\", \"hey\")\nf_v &lt;- factor(c(\"low\", \"medium\", \"high\"))\ntest &lt;- c(\"hello\", 1, 2)\n\n# matrix\nnum_m &lt;- matrix(1:15, nrow = 3, ncol = 5, byrow = TRUE)\nchar_m &lt;- matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2, byrow = TRUE)\n\n# dataframe or tibble\ndf &lt;- data.frame(\n  id = 1:3,\n  name = c(\"Dave\", \"Ashley\", \"Rik\"),\n  age = c(15, 17, 20)) \n\n# list\nl &lt;- list(\n  num_v = c(1:3),\n  m = matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE),\n  another_num_v = c(1,2,4),\n  char_v = c(\"Sabrina\", \"Zach\"),\n  d = tibble(var_1 = c(1:4),\n              var_2 = c(2:5)))"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#why-this-matters-understanding-when-to-use-each-data-structure",
    "href": "lectures/drafts/08-slides.html#why-this-matters-understanding-when-to-use-each-data-structure",
    "title": "Introduction to R: Lecture 8",
    "section": "Why This Matters: Understanding When to Use Each Data Structure",
    "text": "Why This Matters: Understanding When to Use Each Data Structure\nData Frames first!\nSo far, we’ve been working mostly with data frames — technically with tibbles, the tidyverse version of them. Data frames are the go-to structure for working with real-world, tabular data in R. Keep using them for most data analysis tasks in this course and beyond!\nStrengths of data frames:\n\nCan store columns of different data types (e.g., character, numeric, logical)\nWork easily with dplyr, ggplot2, and other tidyverse packages\nMake your data easier to manipulate, filter, summarize, and visualize"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#why-this-matters-understanding-when-to-use-each-data-structure-1",
    "href": "lectures/drafts/08-slides.html#why-this-matters-understanding-when-to-use-each-data-structure-1",
    "title": "Introduction to R: Lecture 8",
    "section": "Why This Matters: Understanding When to Use Each Data Structure",
    "text": "Why This Matters: Understanding When to Use Each Data Structure\nBeyond Data Frames: Know Your Tools\nBut it’s helpful to understand the full set of R data structures, because each has its own strengths:\n\nVectors: The most basic structure in R; all elements must be the same type.\nYou are analyzing survey responses and want to store all participants’ ages in a separate vector for further manipulation.\nMatrices: Two-dimensional, all elements must be the same type.\nYou have numeric data that you want to analyze using matrix algebra or linear models.\nLists: Flexible containers that can hold anything — even other lists.\nYou are analyzing data and want to save multiple outputs (model results, plot, etc.) all in the same data structure.\nData Frames: Two-dimensional, columns can have different types.\nYou are analyzing survey responses with dplyr, ggplot, or other tidyverse packages."
  },
  {
    "objectID": "lectures/drafts/08-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors",
    "href": "lectures/drafts/08-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors",
    "title": "Introduction to R: Lecture 8",
    "section": "Example of filtering rows in a dataframe using logical vectors",
    "text": "Example of filtering rows in a dataframe using logical vectors\n# load libraries and data\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\n\n# use dplyr filter() to get penguins where body mass is greater than 4000 grams\nfiltered_penguins &lt;- penguins %&gt;% filter(body_mass_g &gt; 4000)\nhead(filtered_penguins)"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors-1",
    "href": "lectures/drafts/08-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors-1",
    "title": "Introduction to R: Lecture 8",
    "section": "Example of filtering rows in a dataframe using logical vectors",
    "text": "Example of filtering rows in a dataframe using logical vectors\nLet’s analyze the previous code to see what’s happening under the hood: R defines a logical vector and applies it to the penguins dataframe:\n# use base R to get the column we need: gives a logical vector\nfilter_vector &lt;- penguins$body_mass_g &gt; 4000\n\n# check its structure\nis.vector(filter_vector)\nclass(filter_vector) \n\n# use this vector to manually filter the dataframe using base R \n# df[rows, columns]: rows to keep, all columns\nfiltered_p &lt;- penguins[filter_vector, ]"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#a-particular-vector-scalar",
    "href": "lectures/drafts/08-slides.html#a-particular-vector-scalar",
    "title": "Introduction to R: Lecture 8",
    "section": "A particular vector: Scalar",
    "text": "A particular vector: Scalar\nIn math a scalar is defined as a single real number but in R, a scalar is simply a vector of length one\nLet’s try this code:\n# set up a vector x of length 10\nx &lt;- sample(10)\nx\n\n# add 100 to x using the long way\nx + c(100, 100, 100, 100, 100, 100, 100, 100, 100, 100)\n\n# add 100 to x using the \"R\" way: vector recycling!\nx + 100"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#vector-recycling-in-r",
    "href": "lectures/drafts/08-slides.html#vector-recycling-in-r",
    "title": "Introduction to R: Lecture 8",
    "section": "Vector Recycling in R",
    "text": "Vector Recycling in R\nLet’s see another example. We define two numeric vectors x1 and x2:\n# x1 is sequence of numbers from 1 to 2\nx1 &lt;- seq(from = 1, to = 2)\n\n# x2 is a sequence of numbers from 1 to 10\nx2 &lt;- seq(from = 1, to = 10)\n\n# what happens if we add them?\nx1 + x2\nWhat happens? The shorter vector x1 is duplicated five times in order to match the length of the longer vector x2. The same behavior happens for other operations like subtraction, multiplication, logical comparison, etc.\n\n\n\n\n\n\nWarning\n\n\nIf the shorter vector is not a multiple of the longer one, R will print a warning message!"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#vector-recycling-in-r-1",
    "href": "lectures/drafts/08-slides.html#vector-recycling-in-r-1",
    "title": "Introduction to R: Lecture 8",
    "section": "Vector Recycling in R",
    "text": "Vector Recycling in R\n\n\n\n\n\n\nNote\n\n\nThis behavior is called Vector Recycling and happens automatically in R: When two vectors of different lengths are used in an operation, R repeats (recycles) the elements of the shorter vector to match the longer vector!\n\n\n\nWhy It Matters: Vector recycling can cause unexpected results. Check if recycling is what you want R to do — if not, adjust the vector lengths manually, like this:\nx1 &lt;- c(1, 2, rep(0, 7))\n\nx1 + x2"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#subsetting-data-structures-in-r",
    "href": "lectures/drafts/08-slides.html#subsetting-data-structures-in-r",
    "title": "Introduction to R: Lecture 8",
    "section": "Subsetting Data Structures in R",
    "text": "Subsetting Data Structures in R\nThere are different ways to access parts of data structures in R.\nWe’ll cover:\n\nVectors\nMatrices\nData Frames\nLists\n\nEach structure uses square brackets [ ], but how you use them depends on the structure."
  },
  {
    "objectID": "lectures/drafts/08-slides.html#subsetting-vectors",
    "href": "lectures/drafts/08-slides.html#subsetting-vectors",
    "title": "Introduction to R: Lecture 8",
    "section": "Subsetting Vectors",
    "text": "Subsetting Vectors\nv &lt;- c(10, 20, 30, 40)\n\nv[2]         # 20 (2nd element)\nv[c(1, 3)]   # 10 and 30\nv[-1]        # all but the first\nv[v &gt; 25]    # elements greater than 25\nVectors are 1D — you just specify positions or logical tests in [ ]"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#subsetting-matrices",
    "href": "lectures/drafts/08-slides.html#subsetting-matrices",
    "title": "Introduction to R: Lecture 8",
    "section": "Subsetting Matrices",
    "text": "Subsetting Matrices\nm &lt;- matrix(1:9, nrow = 3, byrow = TRUE)\n\nm[1, 2]           # value at row 1, column 2\nm[ , 3]           # entire 3rd column\nm[2,  ]           # entire 2nd row\nm[1:2, 2:3]       # top-right submatrix (rows 1–2, cols 2–3)\nm[ , c(1, 3)]     # columns 1 and 3\nMatrices are 2D: use [row, column]"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#subsetting-data-frames",
    "href": "lectures/drafts/08-slides.html#subsetting-data-frames",
    "title": "Introduction to R: Lecture 8",
    "section": "Subsetting Data Frames",
    "text": "Subsetting Data Frames\ndf &lt;- data.frame(\n  name = c(\"Alex\", \"Betty\", \"Chad\", \"J\"),\n  age = c(20, 21, 22, 23))\n\ndf[1, ]            # first row (all columns)\ndf[ , 1]           # first column by index\ndf[ , \"name\"]      # first column by label\ndf$name            # same as above\ndf[[\"name\"]]       # same as above\n\ndf[1, 2]           # single value at row 1, column 2\ndf[2:3, \"name\"]    # values in rows 2 and 3 of column name\n\ndf[df$age &gt; 20, ]            # filter rows where age &gt; 20\ndf[df$name == \"J\", ]         # filter rows where name is \"J\"\ndf[df$age == max(df$age), ]  # filter rows with highest age\nData frames combine list and matrix behavior."
  },
  {
    "objectID": "lectures/drafts/08-slides.html#subsetting-lists",
    "href": "lectures/drafts/08-slides.html#subsetting-lists",
    "title": "Introduction to R: Lecture 8",
    "section": "Subsetting Lists",
    "text": "Subsetting Lists\nmy_list &lt;- list(\n  a = c(1, 2, 3),\n  b = c(\"hello\", \"ciao\"),\n  c = TRUE\n)\n\nmy_list[1]         # list with one element\nmy_list[[1]]       # contents of first element: 1 2 3\nmy_list[[1]][1]    # first value of that vector: 1\nmy_list[\"b\"]       # list with one element named \"b\"\nmy_list$b          # same as my_list[[\"b\"]], only works with names\nmy_list[[\"c\"]]     # returns TRUE\n\nUse [ ] to extract a sublist\n\nUse [[ ]] or $ to extract actual elements"
  },
  {
    "objectID": "lectures/drafts/08-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/08-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 8",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#what-are-control-structures",
    "href": "lectures/drafts/10-slides.html#what-are-control-structures",
    "title": "Introduction to R: Lecture 10",
    "section": "What Are Control Structures?",
    "text": "What Are Control Structures?\nControl structures let us write code that can:\n\nMake decisions\n→ with conditional statements (if, if...else, etc.)\nRepeat actions\n→ with loops (for, while)\n\nToday we focus on loops, and specifically on “For loops”!"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#definition-of-for-loops",
    "href": "lectures/drafts/10-slides.html#definition-of-for-loops",
    "title": "Introduction to R: Lecture 10",
    "section": "Definition of For Loops",
    "text": "Definition of For Loops\n“For loops” are the most common looping construct in many programming languages. They are used to iterate over the elements of an object (usually a list or vector) and perform an action on each one.\nSyntax:\nfor (item in sequence of items) {\n  action to be repeated for each item   \n}\nExample:\nfor (item in c(1,2,3)) {\n  print(item)\n}"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#simple-example",
    "href": "lectures/drafts/10-slides.html#simple-example",
    "title": "Introduction to R: Lecture 10",
    "section": "Simple Example",
    "text": "Simple Example\n\nfor (item in c(1,2,3)) {\n  print(item)\n}\n\nLet’s break this code down:\n\nThe repeated action here is simple: print(item)\nitem is a placeholder: its value changes with each loop iteration\nthe number of times the statement block repeats depends on the number of items in the sequence — in this example: three items, thus three times"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#nested-for-loops",
    "href": "lectures/drafts/10-slides.html#nested-for-loops",
    "title": "Introduction to R: Lecture 10",
    "section": "Nested For Loops",
    "text": "Nested For Loops\nFor loops can be nested, so the outer loop controls how many times the entire inner loop runs from start to finish:\n\nfor (i in c(1,2,3)) {\n  print(i)\n  for (j in c(\"cat\", \"dog\", \"squirrel\", \"rabbit\")) {\n    print(j)\n  }\n}\n\nLet’s break this code down:\n\nThe outer loop runs 3 times\nFor each execution of the outer loop, the inner loop runs 4 times\nThat’s a total of 3 × 4 = 12 inner loop outputs, plus 3 outer loop prints"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#tracing-execution-in-a-for-loop",
    "href": "lectures/drafts/10-slides.html#tracing-execution-in-a-for-loop",
    "title": "Introduction to R: Lecture 10",
    "section": "Tracing Execution in a For Loop",
    "text": "Tracing Execution in a For Loop\nObserve this code. What does this code output in each run?\n\nfor (i in c(1,2,3)) {\n  print(i)\n  print(\"Hello\")\n  my_sum &lt;- 100 + i\n  print(my_sum)\n}\n\n\n\n💻 Try changing the code and predict what happens (clear the environment before each run):\n\nAdd another print(my_sum) before my_sum &lt;- 100 + i\nAfter the last print(my_sum) add these two lines: my_sum &lt;- 1000 and print(my_sum)\nModify these two new lines into: my_sum &lt;- 1000 + my_sum and print(my_sum)\nChange anything else you’re curious about and see what happens!"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#tracing-execution-in-a-for-loop-1",
    "href": "lectures/drafts/10-slides.html#tracing-execution-in-a-for-loop-1",
    "title": "Introduction to R: Lecture 10",
    "section": "Tracing Execution in a For Loop",
    "text": "Tracing Execution in a For Loop\nThis code defines the my_sum variable outside the loop, before it starts. What does this code output in each run?\n\nmy_sum &lt;- 0\n\nfor (i in c(1,2,3)) {\n  print(i)\n  print(\"Hello\")\n  my_sum &lt;- my_sum + i\n  print(my_sum)\n}\n\n\n\n💻 Try changing the code and predict what happens (clear the environment before each run):\n\nChange my_sum &lt;- 0 to my_sum &lt;- 100\nMove my_sum &lt;- 0 inside the loop, after the first two print statements\nPut my_sum &lt;- 0 back outside the loop, and comment out my_sum &lt;- my_sum + i\nChange anything else you’re curious about and see what happens!"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#accumulating-a-running-total",
    "href": "lectures/drafts/10-slides.html#accumulating-a-running-total",
    "title": "Introduction to R: Lecture 10",
    "section": "Accumulating a Running Total",
    "text": "Accumulating a Running Total\nWhat we just observed is a simple example of a common task: accumulating a running total. Use it when you are adding up scores, votes, or counts one at a time, and want to keep track of how the total grows after each loop.\nSame code, but with clearer print statements to make each step easier to follow:\n\nmy_sum &lt;- 0\n\nfor (i in c(1,2,3)) {\n  print(paste(\"Current i is\", i))\n  print(\"Hello\")\n  my_sum &lt;- my_sum + i\n  print(paste(\"Current sum is\", my_sum))\n}\n\nmy_sum"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#saving-results-from-for-loop",
    "href": "lectures/drafts/10-slides.html#saving-results-from-for-loop",
    "title": "Introduction to R: Lecture 10",
    "section": "Saving Results from For Loop",
    "text": "Saving Results from For Loop\nThe previous code prints the updated sum each time, but only saves the final value. To save all intermediate values, we need to store them in a vector:\n\nmy_sum &lt;- 0\noutput &lt;- vector(mode = \"integer\", length = 3)\n\nfor (i in c(1,2,3)) {\n  print(paste(\"Current i is:\", i))\n  print(\"Hello\")\n  my_sum &lt;- my_sum + i\n  print(paste(\"Current sum is:\", my_sum))\n  output[i] &lt;- my_sum     # saves sum in position i\n}\n\noutput\n\n\n\n\n\n\n\n\nWhy output[i] &lt;- my_sum?\n\n\nWhen i = 1, my_sum = 0 + 1 = 1 → store 1 in output[1] → output becomes: 1 0 0\nWhen i = 2, my_sum = 1 + 2 = 3 → store 3 in output[2] → output becomes: 1 3 0\nWhen i = 3, my_sum = 3 + 3 = 6 → store 6 in output[3] → output becomes: 1 3 6\nThis saves the running total at each position i in the vector output."
  },
  {
    "objectID": "lectures/drafts/10-slides.html#saving-results-from-a-for-loop",
    "href": "lectures/drafts/10-slides.html#saving-results-from-a-for-loop",
    "title": "Introduction to R: Lecture 10",
    "section": "Saving Results from a For Loop",
    "text": "Saving Results from a For Loop\nOur current code works but it’s NOT yet optimal:\n\nIt only behaves correctly because the input vector is exactly c(1, 2, 3)\nIf the values in the vector change, the current loop may produce incorrect or unexpected results\n\n💻 Try this:\nTake the code from the previous slide and change the input vector to c(1, 4, 6) and observe what happens to the output. Can you explain why the result changes?"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#saving-results-from-a-for-loop-1",
    "href": "lectures/drafts/10-slides.html#saving-results-from-a-for-loop-1",
    "title": "Introduction to R: Lecture 10",
    "section": "Saving Results from a For Loop",
    "text": "Saving Results from a For Loop\n\nmy_sum &lt;- 0\noutput &lt;- vector(mode = \"integer\", length = 3)\n\nfor (i in c(1, 4, 6)) {\n  print(paste(\"Current i is:\", i))\n  print(\"Hello\")\n  my_sum &lt;- my_sum + i\n  print(paste(\"Current sum is:\", my_sum))\n  output[i] &lt;- my_sum  # saves sum in position i\n}\n\noutput\n\n\n\n\n\n\n\n\nWhat Happens in Each Iteration\n\n\nWhen i = 1 → my_sum = 0 + 1 = 1 → store 1 in output[1] → output becomes: 1 0 0\nWhen i = 4 → my_sum = 1 + 4 = 5 → store 5 in output[4] → output becomes: 1 0 0 5\nWhen i = 6 → my_sum = 5 + 6 = 11 → store 11 in output[6] → output becomes: 1 0 0 5 NA 11\nR won’t throw an error if you assign to an index beyond a vector’s original length: it silently extends the vector, which can lead to unexpected results."
  },
  {
    "objectID": "lectures/drafts/10-slides.html#elements-vs.-indexes-why-it-matters",
    "href": "lectures/drafts/10-slides.html#elements-vs.-indexes-why-it-matters",
    "title": "Introduction to R: Lecture 10",
    "section": "Elements vs. Indexes: Why It Matters",
    "text": "Elements vs. Indexes: Why It Matters\nTo fix the previous code we need to understand the difference between looping over elements and over indexes:\n\n# Looping over values/elements\nx &lt;- c(1, 4, 6)\nfor (i in x) {\n  print(i)        # value\n}\n\n# Looping over indexes (method 1)\nx &lt;- c(1, 4, 6)\nfor (i in 1:length(x)) {\n  print(i)        # index\n  print(x[i])     # value at that index\n}\n\n# Looping over indexes (method 2)\nx &lt;- c(1, 4, 6)\nfor (i in seq_along(x)) {\n  print(i)\n  print(x[i])\n}\n\n\n\n\n\n\n\n\ni and x[i]\n\n\nNote: i is the loop index or “counter” and should always go 1, 2, 3, 4, etc., while x[i] is the element or value of the vector x at position i and can be any value"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#elements-vs.-indexes-why-it-matters-1",
    "href": "lectures/drafts/10-slides.html#elements-vs.-indexes-why-it-matters-1",
    "title": "Introduction to R: Lecture 10",
    "section": "Elements vs. Indexes: Why It Matters",
    "text": "Elements vs. Indexes: Why It Matters\nLet’s see what happens when we save the output instead of just printing:\n\n\n❌ Version A\n\nx &lt;- c(1, 4, 6)\nmy_sum &lt;- 0\noutput &lt;- vector(mode = \"integer\", \n                 length = length(x))\n\n# looping over elements\nfor (i in x) {\n  print(paste(\"Current i is:\", i))\n  my_sum &lt;- my_sum + i\n  print(paste(\"Current sum is:\", my_sum))\n  output[i] &lt;- my_sum\n}\n\noutput\n\n\n✅ Version B\n\nx &lt;- c(1, 4, 6)\nmy_sum &lt;- 0\noutput &lt;- vector(mode = \"integer\", \n                 length = length(x))\n\n# looping over indexes\nfor (i in seq_along(x)) {\n  print(paste(\"Current i is:\", i))\n  my_sum &lt;- my_sum + x[i]\n  print(paste(\"Current sum is:\", my_sum))\n  output[i] &lt;- my_sum\n}\n\noutput"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#best-practice-loop-over-indexes",
    "href": "lectures/drafts/10-slides.html#best-practice-loop-over-indexes",
    "title": "Introduction to R: Lecture 10",
    "section": "Best Practice: Loop Over Indexes",
    "text": "Best Practice: Loop Over Indexes\nLoop over indexes, like i in 1:length(x) or seq_along(x), instead of elements/values to:\n\nModify, save, or assign values by position (e.g., output[i] &lt;- ...)\nEnsure your loop works regardless of the values in the vector (e.g., if values repeat or are not valid indices)\nHave you full control over both: the position i and the value at that position x[i]"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#practice-fix-this-for-loop",
    "href": "lectures/drafts/10-slides.html#practice-fix-this-for-loop",
    "title": "Introduction to R: Lecture 10",
    "section": "💻 Practice: Fix this For Loop",
    "text": "💻 Practice: Fix this For Loop\nYou are a farmer writing a for loop to track tomatoes sold over three days. You want to add up the number of tomatoes sold and store the running total in a vector called output. But something is wrong with the code — can you fix it? First, think about what the output vector should be, then check the code to see what’s going wrong.\n\ntomatoes &lt;- c(10, 2, 100) \ns &lt;- 0\noutput &lt;- vector(mode = \"integer\", \n                 length = length(tomatoes))\n\nfor (i in seq_along(tomatoes)) {\n  print(paste(\"Current i is:\", i))\n  s &lt;- s + i\n  print(paste(\"Current sum is:\", s))\n  output[i] &lt;- s\n}\n\noutput"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#recap-what-we-learned-today",
    "href": "lectures/drafts/10-slides.html#recap-what-we-learned-today",
    "title": "Introduction to R: Lecture 10",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nHow for loops work and how to trace what happens at each iteration\nHow to track and save values (like running totals) during a for loop\nWhy it’s important to loop over indexes instead of elements when saving or modifying values\nCommon mistakes with loop output and how to fix them"
  },
  {
    "objectID": "lectures/drafts/10-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/drafts/10-slides.html#to-print-these-slides-as-pdf",
    "title": "Introduction to R: Lecture 10",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/index.html",
    "href": "lectures/index.html",
    "title": "Computing for the Social Sciences",
    "section": "",
    "text": "Course Schedule Fall 2025\n\n\n\n\n\n\n\n\n\nWeek\nDate\nLecture\nAssessment\n\n\n\n\nWeek 1\nMon, Sep 29, 2025\nLecture 1: Course Logistics; R and Markdown\n\n\n\n\nWed, Oct 01, 2025\nLecture 2: Git & GitHub with R Studio\nHomework 1 Released\n\n\nWeek 2\nMon, Oct 06, 2025\nLecture 3: Intro to `ggplot2`; Coding Style\n\n\n\n\nTue, Oct 07, 2025\n\nHomework 1 Due\n\n\n\nWed, Oct 08, 2025\nLecture 4: Graphs for Data Analysis\n\n\n\nWeek 3\nMon, Oct 13, 2025\nLecture 5: Intro to `dplyr`; Pipes\n\n\n\n\nWed, Oct 15, 2025\nLecture 6: More `dplyr`; Factors\nHomework 2 Released\n\n\nWeek 4\nMon, Oct 20, 2025\nLecture 7: Data Cleaning, Importing Data; Relational Data\n\n\n\n\nWed, Oct 22, 2025\nLecture 8: Tidydata with `tidyr`; Intro to `lubridate`\n\n\n\n\nThu, Oct 23, 2025\n\nHomework 2 Due\n\n\nWeek 5\nMon, Oct 27, 2025\nLecture 9: Regular Expressions with `stringr`\nIn-Class Exam 1\n\n\n\nWed, Oct 29, 2025\nLecture 10: Data Structures and Base R\nHomework 3 Released\n\n\nWeek 6\nMon, Nov 03, 2025\nLecture 11: Control Flow 1 — Conditionals\n\n\n\n\nWed, Nov 05, 2025\nLecture 12: Control Flow 2 — Loops\n\n\n\n\nThu, Nov 06, 2025\n\nHomework 3 Due\n\n\nWeek 7\nMon, Nov 10, 2025\nLecture 13: Functions 1\n\n\n\n\nWed, Nov 12, 2025\nLecture 14: Functions 2; Debugging\nHomework 4 Released\n\n\nWeek 8\nMon, Nov 17, 2025\nLecture 15: Web-Scraping 1\n\n\n\n\nWed, Nov 19, 2025\nLecture 16: Web-Scraping 2\n\n\n\n\nThu, Nov 20, 2025\n\nHomework 4 Due\n\n\nWeek 9\nMon, Dec 01, 2025\nLecture 17: Reproducible Workflow; Final Project Check-In\n\n\n\n\nWed, Dec 03, 2025\nLecture 18: Final Project Check-In\nIn-Class Exam 2\n\n\n\nSun, Dec 07, 2025\n\nFinal Project Due\n\n\n\n\n\nNote: No lecture the week of Nov 24, 2025 (Thanksgiving Break). Download the Schedule in Excel"
  },
  {
    "objectID": "setup/setup-test.html",
    "href": "setup/setup-test.html",
    "title": "Git within RStudio Tutorial",
    "section": "",
    "text": "This tutorial verifies that everything is working as expected. Do this after the RStudio Workbench Setup."
  },
  {
    "objectID": "setup/setup-test.html#step-1-make-sure-rstudio-can-find-git",
    "href": "setup/setup-test.html#step-1-make-sure-rstudio-can-find-git",
    "title": "Git within RStudio Tutorial",
    "section": "Step 1: Make sure RStudio can find Git",
    "text": "Step 1: Make sure RStudio can find Git\nLog in to RStudio Workbench using your UChicago credentials. Then try the following:\n\nGo to File &gt; New Project. Do you see a Version Control option?\n\nIf yes, that’s good — but don’t select it. Instead, choose New Directory &gt; New Project.\n\nDo you see a checkbox that says Create a git repository?\n\nIf yes, that’s good — go ahead and check it.\n\nUnder Directory name, give this test project a name (e.g., test). Toward the bottom, check the box for Open in new session, and then click Create Project.\nA new project should open. In the upper-right panel, do you see a Git tab next to Environment, History, etc.?\n\nIf yes, Git is properly connected\n\n\n\n\n\n\n\n\nIf this worked\n\n\n\n\nGreat! That means everything is set up correctly.\nYou can now delete the test project:\n\nGo to the Files tab in the lower-right panel.\nNavigate to the project folder (you may need to go to Home), select it, and click Delete.\nThen close the project by clicking File &gt; Close Project (you’ll return to the default RStudio session).\n\nContinue to Step 2.\n\n\n\n\n\n\n\n\n\nIf this didn’t work\n\n\n\nIt may be that Git is not installed, or RStudio cannot find it.\n\nOpen the Shell from Tools &gt; Shell and type: git.\n\nIf you get an error thatgit is not found, it means Git is not installed or is not on your system’s PATH\nTry typing one of the following in Shell which git (Mac, Linux) or where git (Windows). If Git is installed and appears in your output, try restarting RStudio and repeat the steps above.\nIf it still doesn’t work: from RStudio, go to Tools &gt; Global Options &gt; Git/SVN and make sure that the box Git executable points to the Git executable. It should read something like: /usr/bin/git (Mac, Linux) or C:/Program Files (x86)/Git/bin/git.exe (Windows). If you make any changes, restart RStudio and try the steps at the top of the page again\nOnce this works, delete the test project (as described in the green box) and move to Step 2. Still stuck? Try searching online or reach out to the us for help."
  },
  {
    "objectID": "setup/setup-test.html#step-2-create-a-new-repository-on-github",
    "href": "setup/setup-test.html#step-2-create-a-new-repository-on-github",
    "title": "Git within RStudio Tutorial",
    "section": "Step 2: Create a New Repository on GitHub",
    "text": "Step 2: Create a New Repository on GitHub\n\nGo to GitHub and log in (If you haven’t already, sign up for an account, and share your GitHub username with us using the Excel file linked in Lecture 1)\nGo to Repositories and click the green New or New Repository button and fill in the following:\n\nRepository name: myrepo\nDescription: you can leave it blank or add a short description of what the repo is about\nSet the repository visibility to Public\nCheck the box to add a README file\nLeave the default (None) both the .gitignore and the license\nClick the green Create repository button\n\nOnce the repository is created, click the green Code button. You should see options to clone via HTTPS or SSH. Since we have configured Git with the SSH authentication method (see RStudio Workbench Setup), copy the SSH URL (which should look like git@github.com:&lt;OWNER&gt;/&lt;REPO&gt;.git) to your clipboard."
  },
  {
    "objectID": "setup/setup-test.html#step-3-clone-the-new-github-repo-via-rstudio",
    "href": "setup/setup-test.html#step-3-clone-the-new-github-repo-via-rstudio",
    "title": "Git within RStudio Tutorial",
    "section": "Step 3: Clone the New GitHub Repo via RStudio",
    "text": "Step 3: Clone the New GitHub Repo via RStudio\nNow you need to clone the newly created GitHub repository to your local computer (e.g., Workbench) using RStudio. Cloning means downloading a local copy of the repository.\nIn Workbench, start a new Git Project with Version Control: File &gt; New Project &gt; Version Control &gt; Git\nIf the Version Control option is missing, return to Step 1 to ensure RStudio can find Git. Otherwise, fill out the following fields:\n\nRepository URL: paste the URL of your new GitHub repository (see Step 2)\nProject directory name: it should automatically populate, do not change it. If it does not automatically populate, type the same name you gave to your GitHub repository (e.g. myrepo)\nCreate project as subdirectory of: click on “Browse…” and decide where to store the local directory for the project. It is OK to leave this test directory under Home (no changes needed)\nBefore proceeding, check the Open in new session box situated toward the bottom, as that’s what you’ll usually do in real life\nFinally, click Create Project. The first time you do it, you might get the following message: “The authenticity of host ‘github.com (IP)’ can’t be established etc.” If so:\n\nEnsure that the hash shown in the message matches one of those shown here\nIf the hash matches (it should), type “yes” and you are done. If you do not see the hash, open the shell and type: ssh -T git@github.com\nIf you answered “yes” but get a message like\n\"Permission denied. fatal: Could not read from remote repository\"\nit likely means Git is not configured correctly — go back and configure it.\n\n\nYour Project has been created!\nLook at your project in RStudio (e.g., Workbench) and the one on GitHub (go to your GitHub page which should already be open in your brownser and compare): the two should match! The visual presentation may look different, but the files and their content should always be the same. A Project will now be:\n\na directory on your computer\na Git repository, linked to a remote GitHub repository\nan RStudio Project\n\n\n\n\n\n\n\nNote\n\n\n\nWhenever possible, use this workflow — starting with GitHub and then connecting through RStudio — as your preferred method for setting up R projects.\nThe advantage of this “GitHub first, then Git in RStudio” workflow is that your remote GitHub repository is automatically set as the upstream for your local repository. This means you can push and pull commits right away, without any extra configuration.\nIt is also possibile to do the reverse setup (starting locally and connecting to GitHub later), see the Alternative to Step 3 below for details."
  },
  {
    "objectID": "setup/setup-test.html#step-4-make-local-changes-save-commit",
    "href": "setup/setup-test.html#step-4-make-local-changes-save-commit",
    "title": "Git within RStudio Tutorial",
    "section": "Step 4: Make Local Changes, Save, Commit",
    "text": "Step 4: Make Local Changes, Save, Commit\n\n\n\n\n\n\nTip\n\n\n\nDo this every time you finish a chunk of work, probably many times during a work session.\n\n\nFrom RStudio, check the file browser panel to find the README.md file of your project. Open and modify it by adding the following line (or any other line):\nThis is a line written from R.\nSave your changes. Next, commit these changes to your local repo using RStudio:\n\nOpen the Git tab in the upper right panel\nIn the Staged little box, select all files you want to commit. To do this, check the boxes next to each file listed. The first time you commit, this will usually include several new files: check all of them\nClick Commit\nA new window should open: in the Commit message box, enter a descriptive message. This should be short but explain what you changed. For example in this case you could write something like: “Added a test line to README”\nClick Commit, wait for it to finish, then click Close"
  },
  {
    "objectID": "setup/setup-test.html#step-5-push-your-local-changes-to-github",
    "href": "setup/setup-test.html#step-5-push-your-local-changes-to-github",
    "title": "Git within RStudio Tutorial",
    "section": "Step 5: Push Your Local Changes to GitHub",
    "text": "Step 5: Push Your Local Changes to GitHub\n\n\n\n\n\n\nTip\n\n\n\nDo this a few times a day, but less often than you commit.\n\n\nNow you have new work in your local Git repository, but the changes are not yet on GitHub:\n\nGo to the Git tab: you should see a message that says “Your branch is ahead of origin/main by 1 commit”\nThis means you need to push your recent changes to GitHub: click the green Push arrow under the Git tab\n\nIf this is your first time pushing to GitHub, you may see a prompt to add your SSH key and/or enter your GitHub username and password. If prompted, go ahead and complete the steps.\nWhen done, check your GitHub repo to confirm your changes were pushed there.\nIf this step failed (e.g., you’re unable to push), Git may not be properly configured, or you may have used the wrong authentication method (SSH or HTTPS). Check the RStudio Workbench Setup page to troubleshoot."
  },
  {
    "objectID": "setup/setup-test.html#step-6-more-practice",
    "href": "setup/setup-test.html#step-6-more-practice",
    "title": "Git within RStudio Tutorial",
    "section": "Step 6: More Practice",
    "text": "Step 6: More Practice\nNow, repeat the process to reinforce the Git workflow. For example, you could:\n\nMake another small change to the README.md file:\n\nSave the file\nStage the change in the Git tab\nWrite a short commit message describing the update\nCommit the change\nPull from GitHub (nothing should happen, see the tip below for why we want to pull first!)\nPush it to GitHub\n\nAdd a new R script (.R) or an R Markdown (.Rmd) file to the project:\n\nAdd some basic content (e.g., a comment and a variable)\nSave the file\nStage, commit, pull, and push the new file following the same steps\n\n\nDoing this a few times will help solidify the habit of tracking, committing, and syncing your work regularly. You’ve got this!\n\n\n\n\n\n\nAlways Pull Before You Push\n\n\n\nBefore pushing changes from your local Git repository to GitHub, you should always pull from GitHub first. This might seem unnecessary if you’re working alone and only from your local machine — but it’s an important habit to build:\n\nPulling first ensures your local copy is up-to-date and avoids potential merge conflicts\nYou or a collaborator may have made changes on GitHub (e.g., editing files directly in the GitHub browser — not recommended!)\nPulling first helps prevent overwriting or missing someone else’s work\nEstablishing this habit early will save you a lot of headaches later\n\nTo pull:\n\nClick the blue Pull arrow in the Git tab in RStudio\nYou’ll usually see a message like \"Already up-to-date\" — that means nothing happens, no conflicts and you’re good to go\nNow you’re safe to push your changes"
  },
  {
    "objectID": "setup/setup-test.html#step-7-the-end-delete-this-test-repo",
    "href": "setup/setup-test.html#step-7-the-end-delete-this-test-repo",
    "title": "Git within RStudio Tutorial",
    "section": "Step 7 (The End): Delete this Test Repo",
    "text": "Step 7 (The End): Delete this Test Repo\nOnce you’re done experimenting, delete the myrepo repository — this was just a test, and there’s no need to keep it. We need to remove it from both your computer (e.g., here Workbench) and GitHub:\n\nDelete the local repository: find where you stored it on your computer ( e.g., here Workbench) and delete the folder (click the red X labeled “Delete”). Sometimes on Workbench it looks like the folder has not been deleted: quit the current Workbench session and open a new one.\nDelete the repository from GitHub:\n\nOpen the repository in your browser\nClick on Settings\nScroll to the bottom of the page and click Delete this repository\nFollow the confirmation instructions\n\n\nCongrats—you made it to the end! Done early? Switch roles with your teammate, or read more about these tools here: What are these Tools?"
  },
  {
    "objectID": "setup/setup-test.html#alternative-to-step-3",
    "href": "setup/setup-test.html#alternative-to-step-3",
    "title": "Git within RStudio Tutorial",
    "section": "Alternative to Step 3",
    "text": "Alternative to Step 3\nRemember, Step 3 is the recommended approach (i.e., start with GitHub, then clone in RStudio). You don’t need to follow this alternative for this course, but we include it here in case it’s helpful for future projects.\nSometimes you cannot setup the GitHub repo first, or you already have an RStudio project you need to connect to a GitHub repo. This workflow is the reverse of the above and allows to connect a local RStudio project to a remote GitHub repository.\nUnlike the GitHub-first method, this requires using the Shell or Terminal — it can’t be completed entirely within RStudio.\n\nCreate a Local RStudio Project\nIn R Studio, start a new RStudio project: File &gt; New Project &gt; New Directory &gt; Empty Project and fill out these fields:\n\nDirectory name: myrepo (or whatever your GitHub repo is named)\nLocation: Choose where to store the local folder\nCheck: “Create a git repository”\n\nIf you do not see this option, return to Step 1 to confirm Git is configured correctly\n\nCheck: “Open in new session” (not required but good practice)\nClick Create Project to create a new sub-directory, which will be all of these three things: a directory on your computer; a Git repository (not yet linked to GitHub, we do this next); an RStudio Project\n\n\n\nLink the project to GitHub\nNow you need to initiate the “upstream” or “tracking” relationship between Git and GitHub by adding the remote GitHub.\nIn RStudio, open the Shell: Tools &gt; Shell\nRun one of the following commands to set the remote origin (use the SSH for this course if you configured R with it, see previous tutorial):\n\nFor HTTPS:\ngit remote add origin https://github.com/your-username/myrepo.git\nFor SSH (use this on Workbench):\ngit remote add origin git@github.com:your-username/myrepo.git\n\n\n\nSync with the GitHub repository\n\nPull (e.g. download) the current contents (right now it will be just the README.md file) from GitHub:\ngit pull origin main\nSet the upstream and push your local files to GitHub:\ngit push -u origin main\n\nYour local Git project is now fully linked to the remote GitHub repository!"
  },
  {
    "objectID": "setup/what.html",
    "href": "setup/what.html",
    "title": "Tools for R Programming and Collaboration",
    "section": "",
    "text": "This page explains the key tools you’ll use throughout the course — R, RStudio, Git, GitHub, and the shell — and provides an overview of how they work together to support programming, collaboration, and reproducibility."
  },
  {
    "objectID": "setup/what.html#r-and-rstudio",
    "href": "setup/what.html#r-and-rstudio",
    "title": "Tools for R Programming and Collaboration",
    "section": "R and RStudio",
    "text": "R and RStudio\nR is an open-source programming. When people mention R, they might refer to the base R distribution or to its most popular IDE (Integrated Development Environment): RStudio. Most people do not use R in its bare distribution but through a IDE, which makes it easier to interact with R and write code. There are different IDEs that can be used with R, but the most popular is RStudio and in this course we will use it. RStudio is open-source, expandable, and provides many useful tools and enhancements over the base R environment."
  },
  {
    "objectID": "setup/what.html#rstudio-workbench",
    "href": "setup/what.html#rstudio-workbench",
    "title": "Tools for R Programming and Collaboration",
    "section": "RStudio Workbench",
    "text": "RStudio Workbench\nWe will use “RStudio Workbench” throughout the course, which is the exact same thing as the regular R/RStudio but instead of being on your machine, it is online! In practice, rather than installing your own copy of R and RStudio, you can access R and RStudio remotely hosted on a server: the Social Sciences Computing Services hosts RStudio Workbench for us. To use it, you will open RStudio in your web browser. All the processing and computation is done on a remote server. This means that all of the software is pre-configured for you and the setup is minimal.\nThe downside is that you only have access to this server for the duration of the class. If you intend to use R and RStudio in future classes/research projects, you will need to install and configure everything on your own computer after the course is completed."
  },
  {
    "objectID": "setup/what.html#git-and-github",
    "href": "setup/what.html#git-and-github",
    "title": "Tools for R Programming and Collaboration",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit and GitHub are powerful tools for managing and sharing your work and code. They are often used together, but they are not the same thing: Git is a version control system, GitHub is a cloud-based hosting service that lets you manage your Git repositories.\nKeep reading to learn more about them, and see the book Happy Git and GitHub for the useR for further info.\n\nGit is a version control system\nGit is a version control system that tracks changes in a project over time so that there is always a comprehensive, structured record of that project. Each project is stored in a repository which contains all files that are part of the project (e.g., code scripts but also data files, reports, and source code).\nWhy using Git?\nIn this course (and in your own work), you will be writing lots of programs. Generally the first draft is not the final draft, be it a research paper or a computer script. We want a way to track our changes over time. Perhaps this is to make sure we have a record of what we’ve already done that doesn’t work, so we can avoid doing it again. Or maybe we want to share our code with collaborators who are working on a project with us. How can we do this?\nOne potential solution is to email copies of files back and forth as we make changes. But if we do this, we risk having lots of versions of files floating around. How do we know which is the most recent? What happens if someone edits a file and forgets to email it to us? How will we make sure all the changes are merged into the final version?\nOr perhaps instead we can do all of our work on a cloud-based storage solution such as Dropbox or Google Drive. This ensures changes are synchronized between computers. But they are not specifically designed to share code, and we won’t always know who made what changes to a file. And what happens if two people want to work on the same file at the same time? One person will have to wait for the other to finish before they can edit that file. Plus how will we track previous versions of the file? Dropbox and other cloud storage services have some version control solutions, but these are not comprehensive or only store versions for a limited time. Plus every time we save a new version of the program, the entire file has to be retained. On large projects, this will eat up storage space quickly.\nWe want a solution (Git!) that:\n\nKeeps old versions of files indefinitely. Since all these versions are stored, we can always go back and see who modified the file and what changes they made. Or if we make a mistake in the future that breaks the program, we can revert back to an older version to fix it.\nSince we know who modified each file, if we have questions in the future we can go to that person with our questions.\nWhen collaborating with multiple people on the same project, and when code is involved, we want any changes made by project members to be integrated to the most recent version. If I try to modify a file and don’t incorporate another member’s revisions, I need to be told there is a conflict so I can merge all the changes.\n\n\n\nGitHub is a hosting service\nGitHub is a cloud-based hosting service that hosts and lets you manage your Git repositories. See GitHub on Wikipedia for more.\nAlthough Git and GitHub are often used together, you do not need GitHub to use Git: * Git can be used locally by you on a single computer to track changes in a project. You do not need to be connected to the internet to use Git, and you do not need GitHub to use Git. But GitHub allows you to save your repositories online and share your work with a larger audience (you can host public or private repositories there) * You could put your Git repositories somewhere else online: GitHub is not the only option to host and mange Git repositories, but its the most popular one. Alternatives include Bitbucket, TaraVault, GitLab, etc.\nProfessionally, you should know how to use Git and GitHub to manage projects and share code. This is why we will use Git and GitHub to host our course site, share code, and distribute/collect assignments."
  },
  {
    "objectID": "setup/what.html#shell",
    "href": "setup/what.html#shell",
    "title": "Tools for R Programming and Collaboration",
    "section": "Shell",
    "text": "Shell\nThe shell (or bash or terminal) is a program on your computer whose job is to run other programs, rather than do calculations itself. The shell is a very old program and in a time before the mouse it was the only way to interact with a computer. It is still extremely popular among programmers because it is fast and powerful at automating repetitive tasks.\nHere we use the shell for a more modest goal: to navigate the file system, confirm the present working directory, and cement the git to GitHub connection.\n\nStarting the shell\nIn RStudio, go to Tools &gt; Shell. This should take you to the shell (on Mac: Terminal, on Windows: GitBash or equivalent). It should be a simple blinking cursor, waiting for input (white text on black background, or black text on white background)\n\n\nUsing the shell\nThe most basic commands are listed below:\n\npwd (print working directory). Shows the folder (or directory) you are currently operating in. This is not necessarily the same as the R working directory you get from getwd().\nls (list all files). Shows all files in the current working directory. This is equivalent to looking at the files in your Finder/Explorer/File Manager. Use ls -a to also list hidden files, such as .Rhistory and .git.\ncd (change directory). Allows you to navigate through your folders by changing the shell’s working directory. You can navigate like so:\n\ngo to subfolder foo of current working directory: cd foo\ngo to parent folder of current working directory: cd ..\ngo to home folder: cd ~ or simply cd\ngo to folder using absolute path, works regardless of your current working directory: cd /home/my_username/Desktop. Windows uses a slightly different syntax with the slashes between the folder names reversed, \\, e.g. cd C:\\Users\\MY_USERNAME\\Desktop.\n\nTip 1: Dragging and dropping a file or folder into the terminal window will paste the absolute path into the window.\nTip 2: Use the tab key to autocomplete unambiguous folder and file names. Hit tab twice to see all ambiguous options.\n\n\nUse arrow-up and arrow-down to repeat previous commands. Or search for previous commands with CTRL+r.\ngit status is the most used git command and informs you of your current branch, any changes or untracked files, and whether you are in sync with your remotes.\ngit remote -v lists all remotes. Very useful for making sure git knows about your remote and that the remote address is correct.\ngit remote add origin GITHUB_URL adds the remote GITHUB_URL with nickname origin.\ngit remote set-url origin GITHUB_URL changes the remote url of origin to GITHUB_URL. This way you can fix typos in the remote url.\n\n\n\nA note for Windows users\nOn Windows, the program that runs the shell is called Command Prompt or cmd.exe.\nUnfortunately, the default Windows shell does not support all the commands that other operating systems do. This is where GitBash comes in handy: it installs a light version of a shell that does support all the above commands. When you access the shell through RStudio, RStudio actually tries to open GitBash if it can find it, but it will open the default Windows Command Prompt if GitBash is not found.\nIf you get an error message such as `pwd is not recognized as an internal or external command, operable program or batch file.` from any of the previous commands, that means that RStudio could not find GitBash. The most likely cause of this is that you did not install git using the recommended method so try re-installing git.\nIf you followed the installation instructions and still cannot run GitBash, you should find it under “Menu &gt; Git &gt; Git Bash”. If you’re still confused, go back and watch the first three minutes of this video tutorial on installing Git for Windows."
  },
  {
    "objectID": "lectures/07-slides.html#definitions",
    "href": "lectures/07-slides.html#definitions",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Definitions",
    "text": "Definitions\nRenaming: change variable names (column names)\nRecoding: change values/levels of categorical variables (column values; e.g., inside a column)"
  },
  {
    "objectID": "lectures/07-slides.html#uses",
    "href": "lectures/07-slides.html#uses",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Uses",
    "text": "Uses\nWhen might you need to rename variables or recode their values?\n\nYou are cleaning data\n\nThe variable name has issues: Flipper Length (mm) → flipper_length_mm\nYou need to standardize values: \"Good\" and \"GOOD\" → \"good\"\nEtc.\n\nYou are preparing data for modeling or visualization\n\nYou want to recode \"FEMALE\"/\"MALE\" to 0/1 for a regression model\n\nEtc."
  },
  {
    "objectID": "lectures/07-slides.html#we-work-with-the-penguins-raw-data",
    "href": "lectures/07-slides.html#we-work-with-the-penguins-raw-data",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "We work with the Penguins (raw) Data!",
    "text": "We work with the Penguins (raw) Data!\n# Load libraries and data\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\n\n# Explore data\nhead(penguins_raw)\ntail(penguins_raw)\nrbind(head(penguins_raw, 3), tail(penguins_raw, 3))\nglimpse(penguins_raw)"
  },
  {
    "objectID": "lectures/07-slides.html#renaming-variables-with-rename",
    "href": "lectures/07-slides.html#renaming-variables-with-rename",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Renaming Variables with rename",
    "text": "Renaming Variables with rename\nTo change variable names (column names) the most common method is rename()\nChange the name of the variable studyName to study_name:\n# check before renaming\nstr(penguins_raw)\npenguins_raw %&gt;% select(studyName)\n\n# rename\npenguins_raw %&gt;% rename(study_name = studyName)   # new = old\n\n# remember to save to keep changes\np &lt;- penguins_raw %&gt;% rename(study_name = studyName)\np %&gt;% select(study_name)"
  },
  {
    "objectID": "lectures/07-slides.html#practice-renaming-variables",
    "href": "lectures/07-slides.html#practice-renaming-variables",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice Renaming Variables",
    "text": "💻 Practice Renaming Variables\n\nUse select() to check the variable Comments in penguins_raw\nUse rename() to rename Comments to notes\nSave the result to a new object\nUse select() to check again\n\nOnce done, copy your code here to share it."
  },
  {
    "objectID": "lectures/07-slides.html#recoding-variables-method-1-with-mutate-recode",
    "href": "lectures/07-slides.html#recoding-variables-method-1-with-mutate-recode",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Recoding Variables Method 1: with mutate + recode",
    "text": "Recoding Variables Method 1: with mutate + recode\nTo change variable values (usually levels of categorical variables), we learn two methods. We take the variable Sex and turn MALE into 1, FEMALE into 0.\nMethod 1:\n# check before recoding\npenguins_raw %&gt;% count(Sex)\n\n# mutate + recode\np &lt;- penguins_raw %&gt;%\n  mutate(sex = recode(Sex, \"MALE\" = 1, \"FEMALE\" = 0))\n\n# compare\npenguins_raw %&gt;% count(Sex)\np %&gt;% count(sex)"
  },
  {
    "objectID": "lectures/07-slides.html#recoding-variables-method-2-with-mutate-case_when",
    "href": "lectures/07-slides.html#recoding-variables-method-2-with-mutate-case_when",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Recoding Variables Method 2: with mutate + case_when",
    "text": "Recoding Variables Method 2: with mutate + case_when\nMethod 2:\n# mutate + case_when\npenguins_raw %&gt;%\n  mutate(Sex = case_when(Sex == \"MALE\" ~ 1,\n                         Sex == \"FEMALE\" ~ 0,\n                         TRUE ~ NA_real_))\n  \n# like for method 1 (previous code) save results to keep changes and compare\n\n\n\n\n\n\nNote\n\n\nWith case_when() each logical condition ~ value pair acts like if → then:\n\nfor each row, R looks if the condition is TRUE: “If you find the value MALE in Sex, then convert it to 1”\nTRUE ~ NA_real_ tells R: “If no previous condition was met, then return NA as as a number”"
  },
  {
    "objectID": "lectures/07-slides.html#practice-recoding-variables",
    "href": "lectures/07-slides.html#practice-recoding-variables",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice Recoding Variables",
    "text": "💻 Practice Recoding Variables\n\nUse count() to check the variable Species in penguins_raw\nPick method 1 or method 2 to recode the values of that variable into Adelie, Chinstrap, Gentoo\nSave the result to a new object\nUse count() to verify both results\n\nOnce done, copy your code here to share it."
  },
  {
    "objectID": "lectures/07-slides.html#the-role-of-mutate-in-recoding",
    "href": "lectures/07-slides.html#the-role-of-mutate-in-recoding",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "The Role of mutate in Recoding",
    "text": "The Role of mutate in Recoding\nThe dplry verb mutate has many uses: create new columns or modify existing columns values.\n\n\n\n\n\n\nNote\n\n\nFor recoding, we use mutate + recode or mutate + case_when, because our first goal is changing the column’s values:\n\nMethod 1: mutate(Sex = recode(Sex, \"MALE\" = 1, \"FEMALE\" = 0))\n\nMethod 2: mutate(Sex = case_when(sex == \"MALE\" ~ 1, sex == \"FEMALE\" ~ 0))"
  },
  {
    "objectID": "lectures/07-slides.html#rename-vs-recode-syntax-reference",
    "href": "lectures/07-slides.html#rename-vs-recode-syntax-reference",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Rename vs Recode: Syntax Reference",
    "text": "Rename vs Recode: Syntax Reference\n\n\n\n\n\n\n\n\n\n\nFunction\nWhat It Changes\nSyntax + Example\nTips\n\n\n\n\nrename()\nColumn names\nrename(new_name = old_name)  rename(notes = Comments)\nNo quotes around variable names\n\n\nrecode()\nColumn values\nrecode(variable, \"old\" = new)  recode(Sex, \"MALE\" = 1)\nCheck function doc to see when quotes are needed\n\n\ncase_when()\nColumn values\ncase_when(variable == \"old\" ~ new)  case_when(Sex == \"MALE\" ~ 1)\nCheck function doc to see when quotes are needed"
  },
  {
    "objectID": "lectures/07-slides.html#syntactic-valid-variable-names-in-r",
    "href": "lectures/07-slides.html#syntactic-valid-variable-names-in-r",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Syntactic (Valid) Variable Names in R",
    "text": "Syntactic (Valid) Variable Names in R\n\n\nValid Names in R:\n\nUse letters, numbers, and the symbols . or _\nBut cannot start with a number or symbol\n\n\nExamples of Valid Names:\nflipper_length_mm\nflipper.length.mm\nflipper.length_mm     # valid but poor style\nFlipperLengthMm       # valid but poor style"
  },
  {
    "objectID": "lectures/07-slides.html#non-syntactic-invalid-variable-names-in-r",
    "href": "lectures/07-slides.html#non-syntactic-invalid-variable-names-in-r",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Non-Syntactic (Invalid) Variable Names in R",
    "text": "Non-Syntactic (Invalid) Variable Names in R\n\n\nWhat Makes a Name Invalid:\n\nContains spaces or symbols\nStarts with a number or symbol\nUses reserved words (e.g., TRUE, NULL, if, function)\nType ?Reserved in the Console for the full list\n\n\nExamples of Invalid Names:\nFlipper Length (mm)\n@_flipper_length_mm\nflipper_ length_mm\nflipper-length-mm\n.flipper.length.mm"
  },
  {
    "objectID": "lectures/07-slides.html#practice-syntactic-and-non-syntactic-names",
    "href": "lectures/07-slides.html#practice-syntactic-and-non-syntactic-names",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice: Syntactic and Non-Syntactic Names",
    "text": "💻 Practice: Syntactic and Non-Syntactic Names\nWhich of the following are valid names?\n\n3_religion\n#3_religion\nq3_religion\nq3.religion\nq3-religion\nq3 religion\nTRUE\n\n\n\n\n\n\n\nTip\n\n\nFor best coding style, use snake_case for all your variables names and keep them to three words maximum. Example: q3_religion"
  },
  {
    "objectID": "lectures/07-slides.html#how-to-handle-non-syntactic-names-and-why-it-matters",
    "href": "lectures/07-slides.html#how-to-handle-non-syntactic-names-and-why-it-matters",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "How to Handle Non-syntactic Names, and Why It Matters",
    "text": "How to Handle Non-syntactic Names, and Why It Matters\nYou should avoid creating non-syntactic names, BUT you’ll often encounter them, especially in datasets not created in R (Excel or other sources). If you don’t handle them properly, R will throw errors when you try to use them.\nWhat to Do:\n1. Use backticks to refer to them (e.g., `Flipper Length (mm)`)\n2. Use rename() to change them to syntactic names\nNon-syntactic names will break code if you forget to wrape them in backticks, so renaming avoids issues."
  },
  {
    "objectID": "lectures/07-slides.html#working-with-non-syntactic-names-in-practice",
    "href": "lectures/07-slides.html#working-with-non-syntactic-names-in-practice",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Working with Non-syntactic Names in Practice",
    "text": "Working with Non-syntactic Names in Practice\nImagine you are working on political ideology by country, assembled by someone else. The data are in Excel and when you imported them in R they look like this:\ndf &lt;- tibble(country = c(\"Italy\", \"Germany\", \"France\", \"Italy\", \"United States\"),\n                  `4 ideology` = c(\"communism\", \"fascism\", \"anarchism\", \"fascism\", \"capitalism\"))\n\nTo use the non-syntactic variable name without changing it and without errors, you must use backticks:\nselect(df, `4 ideology`)"
  },
  {
    "objectID": "lectures/07-slides.html#practice-syntactic-non-syntactic-variable-names",
    "href": "lectures/07-slides.html#practice-syntactic-non-syntactic-variable-names",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice: Syntactic & Non-Syntactic Variable Names",
    "text": "💻 Practice: Syntactic & Non-Syntactic Variable Names\nTry this in R:\n\nUse glimpse(penguins_raw) or str(penguins_raw) and identify non-syntactic variables names in this raw dataset\nPick one of them, and try accessing it with select() without backticks: what happens?\nUse rename() to give the variable a syntactic valid name\nSave the result to a new object\nVerify the name was changed and you can now access it\n\nOnce done, copy your code here to share it."
  },
  {
    "objectID": "lectures/07-slides.html#what-are-missing-data",
    "href": "lectures/07-slides.html#what-are-missing-data",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "What Are Missing Data?",
    "text": "What Are Missing Data?\nR distinguishes two types of missing data:\n\nExplicit missing data: visible NA or NaN values in the dataset\nImplicit missing data: data that was never recorded\n\nIn this course, we focus on explicit missing data. For implicit missing data, see R for Data Science Chapter 18\n\n\n\n\n\n\nNote\n\n\nExplicit = value is missing as NA (Not Available) or NaN (Not a Number)\nImplicit = value was never recorded (row or cell is absent)"
  },
  {
    "objectID": "lectures/07-slides.html#how-missing-data-behave",
    "href": "lectures/07-slides.html#how-missing-data-behave",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "How Missing Data Behave",
    "text": "How Missing Data Behave\nAny operation involving a missing value will also return a missing value (see Chapter 12.2.2 Missing values for more):\nNA &gt; 5\n\nsum(c(3, 1, 4, NA)\nsum(c(3, 1, 4, NA), na.rm = TRUE)\n\nmean(c(3,1,4,NA))\nmean(c(3, 1, 4, NA), na.rm = TRUE)"
  },
  {
    "objectID": "lectures/07-slides.html#common-ways-to-handle-missing-data",
    "href": "lectures/07-slides.html#common-ways-to-handle-missing-data",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Common Ways to Handle Missing Data",
    "text": "Common Ways to Handle Missing Data\nWe’ll review three main tools:\nA. is.na() – to detect missing values\nB. na.rm = TRUE – to ignore missing values\nC. drop_na() – to remove missing values"
  },
  {
    "objectID": "lectures/07-slides.html#detect-missing-data-with-is.na",
    "href": "lectures/07-slides.html#detect-missing-data-with-is.na",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "1. Detect Missing Data with is.na():",
    "text": "1. Detect Missing Data with is.na():\nUse is.na() to find the missing values in a specific variable. It returns TRUE for missing values, and FALSE otherwise.\nCheck for missing values in the penguins_raw dataset:\n# using base R syntax\nsum(is.na(penguins_raw$Sex))\ntable(is.na(penguins_raw$Sex))\n\n# using tidyverse syntax\npenguins_raw %&gt;% summarize(sum(is.na(Sex)))\npenguins_raw  %&gt;% count(is.na(Sex)) \n\n# filter rows where sex is missing\nfilter(penguins_raw, is.na(Sex))    # correct  \nfilter(penguins_raw, Sex == NA)     # incorrect"
  },
  {
    "objectID": "lectures/07-slides.html#ignore-missing-data-with-na.rm-true",
    "href": "lectures/07-slides.html#ignore-missing-data-with-na.rm-true",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "2. Ignore Missing Data with na.rm = TRUE",
    "text": "2. Ignore Missing Data with na.rm = TRUE\nUse na.rm = TRUE to exclude missing values when performing calculations. Often used with summarize() when calculating things like mean, sum, standard deviation.\npenguins_raw %&gt;% summarize(avg_mass = mean(`Body Mass (g)`, na.rm = TRUE))\npenguins_raw %&gt;% summarize(sum_mass = sum(`Body Mass (g)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nTip\n\n\nThe command na.rm = TRUE does not remove missing data from the variable(s), it just skips them for that operation, but they are not dropped!"
  },
  {
    "objectID": "lectures/07-slides.html#remove-missing-data-with-drop_na",
    "href": "lectures/07-slides.html#remove-missing-data-with-drop_na",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "3. Remove Missing Data with drop_na()",
    "text": "3. Remove Missing Data with drop_na()\nUse drop_na() to remove rows with missing values. Either across all columns or in a specific column.\nDrop missing values in one specific column (preferred):\npenguins_raw %&gt;%\n  drop_na(`Body Mass (g)`) %&gt;%\n  summarize(avg_mass = mean(`Body Mass (g)`))\n\n\n\n\n\n\n\n\nWarning\n\n\nBe careful with drop_na() as it removes entire rows, which may unintentionally filter out relevant data. Check which variable(s) you are dropping, and avoid using it blindly across all columns."
  },
  {
    "objectID": "lectures/07-slides.html#practice-handling-missing-data",
    "href": "lectures/07-slides.html#practice-handling-missing-data",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice: Handling Missing Data",
    "text": "💻 Practice: Handling Missing Data\n\nRename: use the penguins_raw dataset and rename Flipper Length (mm) to flipper_length_mm. Save the result as a new dataframe, e.g., penguins_clean or p\n\nUse the new dataframe with the renamed variable for the tasks below:\n\nDetect missing values: use is.na() and sum() to count how many are missing in the variable flipper length\nExclude missing from calculations: use na.rm = TRUE inside mean() to calculate the average flipper length\nDrop missing values: use drop_na() to remove rows with missing values in flipper length\n\nOnce done, share your code here."
  },
  {
    "objectID": "lectures/07-slides.html#ways-to-fill-or-replace-missing-data",
    "href": "lectures/07-slides.html#ways-to-fill-or-replace-missing-data",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Ways to Fill or Replace Missing Data",
    "text": "Ways to Fill or Replace Missing Data\nMain functions to replace or fill missing values:\n\nreplace_na() – replace missing values with a specified value\n\nfill() – carry values forward or backward (from the package tidyr)\n\ncoalesce() – return the first non-missing value across multiple columns\n\nSee Chapter 18 of R for Data Science for more."
  },
  {
    "objectID": "lectures/07-slides.html#recap-what-we-learned-today",
    "href": "lectures/07-slides.html#recap-what-we-learned-today",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Recap: What We Learned Today",
    "text": "Recap: What We Learned Today\n\nHow to rename variables using rename()\nHow to recode values inside a variable using recode() and case_when()\nThe difference between syntactic and non-syntactic variable names, and how to handle them\nHow to detect, ignore, or drop missing\nHow to import data with read_csv and export data using write_csv\nHow to work with relational data using dplyr"
  },
  {
    "objectID": "lectures/07-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/07-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/07-slides.html#importing-csv-files",
    "href": "lectures/07-slides.html#importing-csv-files",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Importing CSV files",
    "text": "Importing CSV files\nTo load data into R we need importing functions. There are several of them depending on the type of file we want to import. See “R for Data Science” 2nd Ed. Chapter 7 for details.\nThe most common importing functions read comma-separated values (csv) files. Two main versions:\n\nfrom base-R we have read.csv()\nfrom readr we have read_csv()\n\nThey are similar, but we use read_csv() in this course because is more recent, faster, and does not automatically changes data types (e.g., does not convert characters into factors automatically). Type ?read.csv() and ?read_csv() in your Console for info."
  },
  {
    "objectID": "lectures/07-slides.html#the-function-read_csv",
    "href": "lectures/07-slides.html#the-function-read_csv",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "The function read_csv()",
    "text": "The function read_csv()\nThis function takes several arguments, all listed in the documentation. Some of the most common arguments are:\nread_csv(file, col_names = TRUE, col_types = NULL, na = c(\"\", \"NA\"))\nThe file argument must always be passed, the other arguments can be left as default:\nlibrary(readr)\n\n# load data into my local R Studio, specifying the path\nread_csv(file = \"/Users/Sabrina Nardin/Desktop/testdata.csv\")\n\n# load data into my Workbench, specifying the path\nread_csv(file = \"/home/nardin/testdata.csv\")\n\n# load data (local R Studio or Workbench) without specifying the path \n# where does R look for this file?\nread_csv(\"testdata.csv\")\n\n# load data if you are not sure where it is located (not reccomended)\nread_csv(file = file.choose())"
  },
  {
    "objectID": "lectures/07-slides.html#practice-load-data-in-r",
    "href": "lectures/07-slides.html#practice-load-data-in-r",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice: Load Data in R",
    "text": "💻 Practice: Load Data in R\n\nCreate a testdata.csv file with four columns (id, name, age, food) with different data types and some missing data. Save it on your desktop with a csv extension.\nOpen Workbench: upload the file to the server. Skip this step if you are using R on your machine.\nLook at your current working directory by typing getwd() in the console. That’s where R looks at files by default.\nLoad library(tidyverse) and import the data into R using read_csv(). If you do not provide a path, R looks in your working directory."
  },
  {
    "objectID": "lectures/07-slides.html#takehome-from-this-exercise",
    "href": "lectures/07-slides.html#takehome-from-this-exercise",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Takehome from this exercise",
    "text": "Takehome from this exercise\nImporting files correctly is important as it prevents problems that migh emerge later.\nCheck the function arguments: there are many of them available that can help you accomplish almost anything you might need!\n–\n\nLet’s clarify a few additional concepts related to importing and exporting data…"
  },
  {
    "objectID": "lectures/07-slides.html#working-directory",
    "href": "lectures/07-slides.html#working-directory",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Working Directory",
    "text": "Working Directory\nThe working directory is the folder that R takes as default directory every time you try to load a file, script, etc.\nTo check your current working directory: start a new session of R and type getwd(). In Workbench it should be \"/home/your_cnetid\""
  },
  {
    "objectID": "lectures/07-slides.html#relative-path-vs.-absolute-path",
    "href": "lectures/07-slides.html#relative-path-vs.-absolute-path",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Relative Path vs. Absolute Path",
    "text": "Relative Path vs. Absolute Path\nWhen you import a file (for example, from the Workbench “Files” tab) into R, you should use a relative path instead of a full (absolute) path.\n\n\nRelative Path\n\nMeans relative to your R project folder (the one containing your .Rproj file)\n\nRecommended approach: easier and makes your code portable\n\nWorks only if the file is inside R’s default working directory\n\nread_csv(\"testdata.csv\")\n\nAbsolute Path\n\nMeans you specify the entire path to reach the file, independent from specific folders\n\nAvoid this: it breaks if someone runs your code from another machine or folder\n\nIndependent on R’s default working directory\n\nread_csv(\"/home/nardin/testdata.csv\")"
  },
  {
    "objectID": "lectures/07-slides.html#rstudio-projects",
    "href": "lectures/07-slides.html#rstudio-projects",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "RStudio Projects",
    "text": "RStudio Projects\nR studio has something called “RStudio Projects” (.Rproj). R will automatically detect the working directory based on your project.\nThis ensures portability and a reliable behavior!\nFor example, every homework and in-class exercise folder that we have been using in this course has a .Rproj file. This file helps R to automatically detect the working directory. If you switch between projects, the working directory changes automatically."
  },
  {
    "objectID": "lectures/07-slides.html#practice-create-an-rstudio-project",
    "href": "lectures/07-slides.html#practice-create-an-rstudio-project",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice: Create an RStudio Project",
    "text": "💻 Practice: Create an RStudio Project\nStep 1: Open RStudio and navigate to the top-left menu. Then File &gt; New Project…\nStep 2: Choose New Directory, then select New Project\nStep 3: Name your project and save it.\nStep 4: Click Create Project. RStudio will open a new session within your project environment. Done!\nStep 5: Let’s test it! In your new project, create a new R script or R Markdown document and inside it type and run getwd(). What do you notice?"
  },
  {
    "objectID": "lectures/07-slides.html#other-readr-functions-to-import-data",
    "href": "lectures/07-slides.html#other-readr-functions-to-import-data",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Other readr functions to import data",
    "text": "Other readr functions to import data\nThe readr package include several functions to load into R almost all possible file formats that you might encounter (when given an option though, choose a csv over other formats).\nFor example:\n\nComma separated csv use read_csv() from the readr package\nSemi column separated csv use read_csv2()from the readr package\nTab separated files use read_tsv()from the readr package\nRDS use readRDS() or read_rds()\nExcel use read_excel() from the readxl package\nSAS/SPSS/Stata use the haven package (several functions)\n\nCheat Sheet for readr: Help &gt; Cheat Sheets &gt; Browse Cheat Sheets"
  },
  {
    "objectID": "lectures/07-slides.html#using-haven-with-sas",
    "href": "lectures/07-slides.html#using-haven-with-sas",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Using haven with SAS",
    "text": "Using haven with SAS\nlibrary(haven)\n\nread_sas(data_file = system.file(\"examples\", \"iris.sas7bdat\",\n  package = \"haven\"\n))"
  },
  {
    "objectID": "lectures/07-slides.html#using-haven-with-spss",
    "href": "lectures/07-slides.html#using-haven-with-spss",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Using haven with SPSS",
    "text": "Using haven with SPSS\nread_sav(file = system.file(\"examples\", \"iris.sav\",\n  package = \"haven\"\n))"
  },
  {
    "objectID": "lectures/07-slides.html#using-haven-with-stata",
    "href": "lectures/07-slides.html#using-haven-with-stata",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Using haven with Stata",
    "text": "Using haven with Stata\nread_dta(file = system.file(\"examples\", \"iris.dta\",\n  package = \"haven\"\n))"
  },
  {
    "objectID": "lectures/07-slides.html#exporting-data-with-write_csv",
    "href": "lectures/07-slides.html#exporting-data-with-write_csv",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Exporting data with write_csv()",
    "text": "Exporting data with write_csv()\nSo far we talked about IMPORTING DATA with read_csv() from readr\nButreadr has also several functions for EXPORTING DATA. The most common is write_csv() which generates csv files from R data frames: https://readr.tidyverse.org/reference/write_delim.html\n# import\ntest &lt;- read_csv(\"testdata.csv\", col_types = (\"icic\"), na = c(\"\", \"NA\", \"na\", \"None\"))\n\n# write your data analysis and visualization code etc.\n\n# export \nwrite_csv(test, file = \"testdata_cleaned.csv\")"
  },
  {
    "objectID": "lectures/07-slides.html#practice",
    "href": "lectures/07-slides.html#practice",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice",
    "text": "💻 Practice"
  },
  {
    "objectID": "lectures/07-slides.html#a.-detect-missing-data-with-is.na",
    "href": "lectures/07-slides.html#a.-detect-missing-data-with-is.na",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "A. Detect Missing Data with is.na():",
    "text": "A. Detect Missing Data with is.na():\nUse is.na() to find the missing values in a specific variable. It returns TRUE for missing values, and FALSE otherwise.\nCheck for missing values in the penguins_raw dataset:\n# using base R syntax\nsum(is.na(penguins_raw$Sex))\ntable(is.na(penguins_raw$Sex))\n\n# using tidyverse syntax\npenguins_raw %&gt;% summarize(sum(is.na(Sex)))\npenguins_raw  %&gt;% count(is.na(Sex)) \n\n# keep rows where sex is missing\nfilter(penguins_raw, is.na(Sex))    # correct  \nfilter(penguins_raw, Sex == NA)     # incorrect\n\n# keep rows where sex is NOT missing\nfilter(penguins_raw, !is.na(sex))"
  },
  {
    "objectID": "lectures/07-slides.html#b.-ignore-missing-data-with-na.rm-true",
    "href": "lectures/07-slides.html#b.-ignore-missing-data-with-na.rm-true",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "B. Ignore Missing Data with na.rm = TRUE",
    "text": "B. Ignore Missing Data with na.rm = TRUE\nUse na.rm = TRUE to exclude missing values when performing calculations. Often used with summarize() when calculating things like mean, sum, standard deviation.\npenguins_raw %&gt;% summarize(avg_mass = mean(`Body Mass (g)`, na.rm = TRUE))\npenguins_raw %&gt;% summarize(sum_mass = sum(`Body Mass (g)`, na.rm = TRUE))\n\n\n\n\n\n\n\n\nTip\n\n\nThe command na.rm = TRUE does not remove missing data from the variable(s), it just skips them for that operation, but they are not dropped!"
  },
  {
    "objectID": "lectures/07-slides.html#c.-remove-missing-data-with-drop_na",
    "href": "lectures/07-slides.html#c.-remove-missing-data-with-drop_na",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "C. Remove Missing Data with drop_na()",
    "text": "C. Remove Missing Data with drop_na()\nUse drop_na() to remove rows with missing values. Either across all columns or in a specific column.\nDrop missing values in one specific column (preferred):\npenguins_raw %&gt;%\n  drop_na(`Body Mass (g)`) %&gt;%\n  summarize(avg_mass = mean(`Body Mass (g)`))\n\n\n\n\n\n\n\n\nWarning\n\n\nBe careful with drop_na() as it removes entire rows, which may unintentionally filter out relevant data. Check which variable(s) you are dropping, and avoid using it blindly across all columns."
  },
  {
    "objectID": "lectures/07-slides.html#takehome",
    "href": "lectures/07-slides.html#takehome",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Takehome",
    "text": "Takehome\nImporting files correctly is important as it prevents problems that might emerge later!\nCheck the function arguments: there are many of them available that can help you accomplish almost anything you need!\nLet’s clarify a few additional concepts related to importing and exporting data…"
  },
  {
    "objectID": "lectures/07-slides.html#easier-solution-use-rstudio-projects",
    "href": "lectures/07-slides.html#easier-solution-use-rstudio-projects",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Easier Solution: Use RStudio Projects",
    "text": "Easier Solution: Use RStudio Projects\n\n\n\n\n\n\nRStudio Projects .Rproj\n\n\nRStudio Projects automatically set the working directory for you, based on the active project:\n\nensures portability across computers and a reliable behavior!\nyou do not need to set the working directory manually\nbut you need to check in which project you are working\n\n\n\n\nExample: Each homework and in-class exercise folder in this course contains a .Rproj file. When you open that project in RStudio, the working directory is automatically set to that folder.\nTip: If you switch to another project, RStudio automatically updates the default working directory for you. Always check which project you’re working in."
  },
  {
    "objectID": "lectures/07-slides.html#relational-data-with-dplyr",
    "href": "lectures/07-slides.html#relational-data-with-dplyr",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Relational Data with dplyr",
    "text": "Relational Data with dplyr"
  },
  {
    "objectID": "lectures/07-slides.html#definition-of-relational-data",
    "href": "lectures/07-slides.html#definition-of-relational-data",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Definition of Relational Data",
    "text": "Definition of Relational Data\nRelational Database: set of multiple “tables” that are linked based on data common to them. You can think of a “table” as a dataframe.\nThese tables provide meaningful insights only when combined together!\nAnswers to research questions are not defined by individual rows or columns in a single table; rather, they emerge from the relationships among tables."
  },
  {
    "objectID": "lectures/07-slides.html#our-focus",
    "href": "lectures/07-slides.html#our-focus",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Our Focus",
    "text": "Our Focus\nThere are several software and languages to deal with relational databases. The most common is SQL but that’s beyond our course. For more on this, see “Chapter 21 Databases” from our book.\nR also allows you to join tables using the dplyr package. That’s our focus!"
  },
  {
    "objectID": "lectures/07-slides.html#we-use-the-flights-example-from-the-readings",
    "href": "lectures/07-slides.html#we-use-the-flights-example-from-the-readings",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "We use the flights example from the readings",
    "text": "We use the flights example from the readings\nlibrary(nycflights13) in “Chapter 19 Joins” from “R for Data Science” 2nd Edition.\nWe have five tables (e.g., five distinct datasets):\n\nflights info about flights, identified by multiple variables\n\nairlines each airplane company name, identified by the abbreviated career code\n\nairports info about each airport, identified by the faa code\n\nplanes info about each plane, identified by its tailnum number\n\nweather info about the weather at each NYC airport for each hour, identified by various variables\n\nLoad the data into R (package already installed on Workbench): library(nycflights13)"
  },
  {
    "objectID": "lectures/07-slides.html#we-use-the-flights-example-from-the-readings-1",
    "href": "lectures/07-slides.html#we-use-the-flights-example-from-the-readings-1",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "We use the flights example from the Readings",
    "text": "We use the flights example from the Readings\nVisual representation of the relations among the 5 tables in nycflights13:\n\nTo understand diagrams like this, remember that each relation concerns a pair of tables."
  },
  {
    "objectID": "lectures/07-slides.html#in-pratice-when-using-dplyr-to-work-with-relational-data-we-have",
    "href": "lectures/07-slides.html#in-pratice-when-using-dplyr-to-work-with-relational-data-we-have",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "In pratice… when using dplyr to work with relational data, we have:",
    "text": "In pratice… when using dplyr to work with relational data, we have:\n1. Mutating joins\n2. Filtering joins"
  },
  {
    "objectID": "lectures/07-slides.html#mutating-joins-1",
    "href": "lectures/07-slides.html#mutating-joins-1",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "1. Mutating joins",
    "text": "1. Mutating joins\nThis group includes:\n\ninner join: keeps observations that appear in both tables\nouter join: keeps observations that appear in at least one of the tables\n\nleft join: keeps all observations in left table\n\nright join: keeps all observations in right table\n\nfull join: keeps all observations"
  },
  {
    "objectID": "lectures/07-slides.html#inner_join",
    "href": "lectures/07-slides.html#inner_join",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "inner_join()",
    "text": "inner_join()\nKeeps obs. that appear in both tables, identified by keys (colored numbers). Unmatched rows are dropped.\n\n\n\n\n    \n\n\n# inner_join example\ninner_join(x, y, by = \"key\")\n\n# with pipes\nx %&gt;% inner_join(y, by = \"key\")\n\n# if the join columns have different names\ninner_join(x, y, by = c(\"a\" = \"b\"))"
  },
  {
    "objectID": "lectures/07-slides.html#left_join",
    "href": "lectures/07-slides.html#left_join",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "left_join()",
    "text": "left_join()\nKeeps all obs. in the left table (x), even if there is not a match in the right table (y).\n\n\n\n\n  \n\n\nleft_join(x, y, by = \"key\")"
  },
  {
    "objectID": "lectures/07-slides.html#right_join",
    "href": "lectures/07-slides.html#right_join",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "right_join()",
    "text": "right_join()\nKeeps all obse. in the right table (y), even if there is not a match in the left table (x).\n\n\n\n\n  \n\n\nright_join(x, y, by = \"key\")"
  },
  {
    "objectID": "lectures/07-slides.html#full_join",
    "href": "lectures/07-slides.html#full_join",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "full_join()",
    "text": "full_join()\nKeeps all obs., matches and non-matches (e.g., more missing values).\n\n\n\n\n  \n\n\nfull_join(x, y, by = \"key\")"
  },
  {
    "objectID": "lectures/07-slides.html#venn-diagram",
    "href": "lectures/07-slides.html#venn-diagram",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Venn Diagram",
    "text": "Venn Diagram"
  },
  {
    "objectID": "lectures/07-slides.html#filtering-joins-1",
    "href": "lectures/07-slides.html#filtering-joins-1",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "Filtering joins",
    "text": "Filtering joins\nOther than mutating joins, dplyr has filtering joins;\n\nsemi_join: keeps all observations in x that have a match in y\nanti_join drops all observations in x that have a match in y\n\nEssentially these function use information from the second data frame (y) to filter observations from the first data frame (x)."
  },
  {
    "objectID": "lectures/07-slides.html#anti_join",
    "href": "lectures/07-slides.html#anti_join",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "anti_join()",
    "text": "anti_join()\nDrops all obs. in x that have a match in y. Only keeps columns from the first table you pass in the code (x).\n\n\n\n\n    \n\n\nanti_join(x, y, by = \"key\")"
  },
  {
    "objectID": "lectures/07-slides.html#practice-working-with-relational-data-with-dplyr",
    "href": "lectures/07-slides.html#practice-working-with-relational-data-with-dplyr",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "💻 Practice working with relational data with dplyr",
    "text": "💻 Practice working with relational data with dplyr\nDownload today’s in-class materials from the website (relational-data.Rmd)"
  },
  {
    "objectID": "lectures/07-slides.html#inner_join-1",
    "href": "lectures/07-slides.html#inner_join-1",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "inner_join()",
    "text": "inner_join()\nKeeps observations that appear in both tables (identified by keys, which are the colored numbers here). Unmatched rows are not included in the results.\n.pull-left[\n\n\n\n\n\n\n\n\n\n]\n–\n.pull-right[\n\n\n\n\n\n\n\n\n\ninner_join(x, y, by = \"key\")\n\n# with pipes\nx %&gt;% inner_join(y, by = \"key\")\n  \n# if two cols do not have same name\ninner_join(x, y, by = c(\"a\" = \"b\")) \n  \n]"
  },
  {
    "objectID": "lectures/07-slides.html#semi_join",
    "href": "lectures/07-slides.html#semi_join",
    "title": "Computing for the Social Sciences: Lecture 7",
    "section": "semi_join()",
    "text": "semi_join()\nKeeps all obs. in x that have a match in y. Only keeps columns from the first table you pass in the code (x).\n\n\n\n\n    \n\n\nsemi_join(x, y, by = \"key\")"
  },
  {
    "objectID": "lectures/08-slides.html",
    "href": "lectures/08-slides.html",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "",
    "text": "Add slide with prep for exam tips 1. Review class materials: slides, in-class code, readings 2. Complete HW2 (no AI) 3. Review the in-class prep questions 4. Ask AI to generate more questions for you (but do it only after previous points, starting from this will backfire)"
  },
  {
    "objectID": "lectures/08-slides.html#tidy-data-definition",
    "href": "lectures/08-slides.html#tidy-data-definition",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidy data: definition",
    "text": "Tidy data: definition\n“Tidy data” is a particular way to organize data.\nUseful because it is:\n\nstandardized: every tidy dataset follows the same rules\n\nconsistent: tidy data can be used directly by many tidyverse packages without extra manipulation\n\nclear: tidy data are easier to read, understand, and work with\n\n\n\n\n\n\n\nTip\n\n\nWhen working with the tidyverse (e.g., ggplot2, dplyr, etc.), start by putting your data in tidy format. Most tidyverse functions assume data are tidy!"
  },
  {
    "objectID": "lectures/08-slides.html#tidy-data-three-key-principles",
    "href": "lectures/08-slides.html#tidy-data-three-key-principles",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidy data: three key principles",
    "text": "Tidy data: three key principles\n\n.footnote[Illustrations from the blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst]"
  },
  {
    "objectID": "lectures/08-slides.html#tidy-datasets-are-all-alike",
    "href": "lectures/08-slides.html#tidy-datasets-are-all-alike",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidy Datasets Are All Alike",
    "text": "Tidy Datasets Are All Alike\n\n\nIllustrations from the blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "lectures/08-slides.html#tidy-datasets-are-all-alike-1",
    "href": "lectures/08-slides.html#tidy-datasets-are-all-alike-1",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidy Datasets Are All Alike",
    "text": "Tidy Datasets Are All Alike\n\n\nIllustrations from the blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "lectures/08-slides.html#tidying-untidy-data",
    "href": "lectures/08-slides.html#tidying-untidy-data",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidying untidy data",
    "text": "Tidying untidy data\n\n\n\n\n\n\nImportant\n\n\nIt might sound counterintuitive, but most real-world data isn’t stored in a tidy format.\nWhy?\n1. Many datasets are designed to make data entry, not analysis, easier\n2. Tidy data principles take time and practice to master\n\n\n\n\n\n\n\n\n\n\nTip\n\n\nWhen working with the tidyverse (ggplot2, dplyr, etc.), start by putting your data in tidy format. Most tidyverse functions assume data are tidy!"
  },
  {
    "objectID": "lectures/08-slides.html#tidying-untidy-data-1",
    "href": "lectures/08-slides.html#tidying-untidy-data-1",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidying Untidy Data",
    "text": "Tidying Untidy Data\nOK, you are ready to start a project and loaded some data into R: they are untidy!\nWhat should you do to tidy them up?\n\n\nFirst, Diagnose the data\n\nIdentify the variables (what each column represents)\nIdentify the observations (what each row represents)\nSpot what’s untidy\n\nMultiple variables in one column\n\nVariable values used as column names\n\nVariable names stored in rows\nEtc.\n\n\n\nSecond, Fix it with tidyr\n\nPut each variable in its own column\nPut each observation in its own row\nEnsure each cell holds a single value"
  },
  {
    "objectID": "lectures/08-slides.html#things-you-can-do-with-the-tidyr-package",
    "href": "lectures/08-slides.html#things-you-can-do-with-the-tidyr-package",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Things You Can Do with the tidyr Package",
    "text": "Things You Can Do with the tidyr Package\nTidyr documentation\n\nPivoting\n\npivot_longer() makes the dataset longer by increasing rows\n\npivot_wider() makes the dataset wider by increasing columns\n\nSeparating\n\nseparate() splits one column into multiple columns\n\nUniting\n\nunite() combines multiple columns into one\n\n\n\n\n\n\n\n\nNote\n\n\nThe tidyr package includes many other functions, but we focus on the core ones for now. Each behaves a bit differently, so be sure to check the documentation for details on their arguments."
  },
  {
    "objectID": "lectures/08-slides.html#tidying-untidy-data-2",
    "href": "lectures/08-slides.html#tidying-untidy-data-2",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidying untidy data",
    "text": "Tidying untidy data\nOK, you are ready to start a project and loaded some data into R: they are untidy! What should you do to tidy them up?\nFirst, stare at the data:\n\nidentify the variables (what each column represents)\nidentify the observations (what each row represents)\nidentify what’s untidy about them (e.g., multiple variables stored into one, variables values are column names, variable names are in rows)\n\nThen, use functions from the tidyr package to\n\nput each variable in its own column\nput each observation in its own row\nmake sure each cell contains only one value"
  },
  {
    "objectID": "lectures/08-slides.html#in-class-example",
    "href": "lectures/08-slides.html#in-class-example",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "In-Class Example",
    "text": "In-Class Example\nWe’ll illustrate these tidying tasks using one of the datasets from the readings (Chapter 5). We are going to see different (untidy) ways to organize this dataset, and how to use tidyr to organize each of htem\nThe dataset is longitudinal, with four variables:\n\ncountry\n\nyear\n\ncases (number of tuberculosis cases)\npopulation"
  },
  {
    "objectID": "lectures/08-slides.html#pivot-longer",
    "href": "lectures/08-slides.html#pivot-longer",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Pivot Longer",
    "text": "Pivot Longer\nWhy is this dataset untidy? How can we tidy it?\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\n\n\n“Each variable must have its own column”: column names must be variables names, not variables values (here 1999 and 2000 are values of the year variable)\n“Each observation must have its own row”: here we have one row for every country, but this is panel data, so we should have the country-year pair to define one observation, not just country"
  },
  {
    "objectID": "lectures/08-slides.html#pivot-longer-1",
    "href": "lectures/08-slides.html#pivot-longer-1",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Pivot Longer",
    "text": "Pivot Longer\nhttps://tidyr.tidyverse.org/reference/pivot_longer.html\n\n\n\n\ntable4a\n\n# A tibble: 3 × 3\n  country     `1999` `2000`\n  &lt;chr&gt;        &lt;dbl&gt;  &lt;dbl&gt;\n1 Afghanistan    745   2666\n2 Brazil       37737  80488\n3 China       212258 213766\n\n\n\n\npivot_longer(data = table4a,\n             cols = c(`1999`, `2000`),\n             names_to = \"year\",\n             values_to = \"cases\")\n\n# A tibble: 6 × 3\n  country     year   cases\n  &lt;chr&gt;       &lt;chr&gt;  &lt;dbl&gt;\n1 Afghanistan 1999     745\n2 Afghanistan 2000    2666\n3 Brazil      1999   37737\n4 Brazil      2000   80488\n5 China       1999  212258\n6 China       2000  213766"
  },
  {
    "objectID": "lectures/08-slides.html#pivot-wider",
    "href": "lectures/08-slides.html#pivot-wider",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Pivot Wider",
    "text": "Pivot Wider\nWhy is this dataset untidy? How can we tidy it?\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\n\n\n“Each variable must have its own column”: the current values of type are not values, but are variables names\n“Each observation must have its own row”: here an observation is a country in a year, which is correct, but each observation is spread across two rows due to how type is organanized"
  },
  {
    "objectID": "lectures/08-slides.html#pivot-wider-1",
    "href": "lectures/08-slides.html#pivot-wider-1",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Pivot Wider",
    "text": "Pivot Wider\nhttps://tidyr.tidyverse.org/reference/pivot_wider.html\n\n\n\n\ntable2\n\n# A tibble: 12 × 4\n   country      year type            count\n   &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;           &lt;dbl&gt;\n 1 Afghanistan  1999 cases             745\n 2 Afghanistan  1999 population   19987071\n 3 Afghanistan  2000 cases            2666\n 4 Afghanistan  2000 population   20595360\n 5 Brazil       1999 cases           37737\n 6 Brazil       1999 population  172006362\n 7 Brazil       2000 cases           80488\n 8 Brazil       2000 population  174504898\n 9 China        1999 cases          212258\n10 China        1999 population 1272915272\n11 China        2000 cases          213766\n12 China        2000 population 1280428583\n\n\n\n\npivot_wider(data = table2,\n            names_from = type,\n            values_from = count)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;dbl&gt;      &lt;dbl&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#separating",
    "href": "lectures/08-slides.html#separating",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Separating",
    "text": "Separating\nWhy is this dataset untidy? How can we tidy it?\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#separating-1",
    "href": "lectures/08-slides.html#separating-1",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Separating",
    "text": "Separating\nhttps://tidyr.tidyverse.org/reference/separate.html\n\n\n\n\ntable3\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;dbl&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583\n\n\n\n\nseparate(data = table3,\n         col = rate,\n         into = c(\"cases\",\"population\"),\n         convert = TRUE)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;dbl&gt;  &lt;int&gt;      &lt;int&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#uniting",
    "href": "lectures/08-slides.html#uniting",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Uniting",
    "text": "Uniting\nWhy is this dataset untidy? How can we tidy it?\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#uniting-1",
    "href": "lectures/08-slides.html#uniting-1",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Uniting",
    "text": "Uniting\nhttps://tidyr.tidyverse.org/reference/unite.html\n\n\n\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\n\nunite(data = table5,\n      col = \"year\", century, year)\n\n# A tibble: 6 × 3\n  country     year  rate             \n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19_99 745/19987071     \n2 Afghanistan 20_00 2666/20595360    \n3 Brazil      19_99 37737/172006362  \n4 Brazil      20_00 80488/174504898  \n5 China       19_99 212258/1272915272\n6 China       20_00 213766/1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#uniting-2",
    "href": "lectures/08-slides.html#uniting-2",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Uniting",
    "text": "Uniting\n\n\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\n\nunite(data = table5,\n      col = \"year\", century, year,\n      sep = \"\") # remove underscore\n\n# A tibble: 6 × 3\n  country     year  rate             \n  &lt;chr&gt;       &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 1999  745/19987071     \n2 Afghanistan 2000  2666/20595360    \n3 Brazil      1999  37737/172006362  \n4 Brazil      2000  80488/174504898  \n5 China       1999  212258/1272915272\n6 China       2000  213766/1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#uniting-3",
    "href": "lectures/08-slides.html#uniting-3",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Uniting",
    "text": "Uniting\n\n\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\n\nunite(data = table5,\n      col = \"year\", century, year,\n      sep = \"\") |&gt;\n  mutate(year = as.integer(year)) # store as numeric\n\n# A tibble: 6 × 3\n  country      year rate             \n  &lt;chr&gt;       &lt;int&gt; &lt;chr&gt;            \n1 Afghanistan  1999 745/19987071     \n2 Afghanistan  2000 2666/20595360    \n3 Brazil       1999 37737/172006362  \n4 Brazil       2000 80488/174504898  \n5 China        1999 212258/1272915272\n6 China        2000 213766/1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#practice",
    "href": "lectures/08-slides.html#practice",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "💻 Practice",
    "text": "💻 Practice"
  },
  {
    "objectID": "lectures/08-slides.html#practice-tidyving-data",
    "href": "lectures/08-slides.html#practice-tidyving-data",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "💻 Practice tidyving data",
    "text": "💻 Practice tidyving data\nDownload today’s in-class exercises from the website."
  },
  {
    "objectID": "lectures/08-slides.html#exam-format",
    "href": "lectures/08-slides.html#exam-format",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Exam Format",
    "text": "Exam Format\nMultiple-choice questions and short open-ended questions, such as:\n\nClassical multiple choice — select the correct answer from several options\n\nSpot the typo — identify and fix syntax or logic errors\n\nMatching questions — pair code snippets with their descriptions or outputs\n\nDebugging questions — code runs but gives unexpected results; explain why\n\nPredict the output — given a short R snippet determine what the code will return\nWrite code — short applied tasks\n\nusing dplyr: write small transformations (e.g., filter, summarize, group_by, mutate, etc.) on a provided tibble\n\nusing ggplot2: write code to create simple graphs (see slides examples)\n\nOpen-ended questions — brief written explanations or interpretations of results\n\nTopics covered: Lectures 1-8 (inclusive)\nMake-up and absence policy: See Syllabus"
  },
  {
    "objectID": "lectures/08-slides.html#how-to-prepare-for-the-exam",
    "href": "lectures/08-slides.html#how-to-prepare-for-the-exam",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "How to Prepare for the Exam",
    "text": "How to Prepare for the Exam\n\nReview class materials: slides, in-class code, and assigned readings\nUse Homework 1 and 2 as review practice re-run your code and check you understand each step\nGo through the in-class prep quizzes we have done exam questions will be similar\nUse AI strategically: once you’ve done all the above, ask AI to generate additional practice questions of different types and level of difficulty. Starting with AI before reviewing materials usually backfires\n\n\n\n\n\n\n\nTip\n\n\nPreparation works best when you write and run code yourself, review your mistakes, and make sure you can explain why each answer is correct."
  },
  {
    "objectID": "lectures/08-slides.html#tidy-data",
    "href": "lectures/08-slides.html#tidy-data",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidy Data",
    "text": "Tidy Data\n“Tidy data” is a particular way to organize data.\n\nUseful because:\n\nstandardized: every tidy dataset follows the same rules\n\nconsistent: tidy data can be used directly by many tidyverse packages without extra manipulation\n\nclear: tidy data are easier to read, understand, and work with"
  },
  {
    "objectID": "lectures/08-slides.html#tidy-data-three-principles",
    "href": "lectures/08-slides.html#tidy-data-three-principles",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidy Data: Three Principles",
    "text": "Tidy Data: Three Principles\n\n\nIllustrations from the blog Tidy Data for reproducibility, efficiency, and collaboration by Julia Lowndes and Allison Horst"
  },
  {
    "objectID": "lectures/08-slides.html#exam-format-overview",
    "href": "lectures/08-slides.html#exam-format-overview",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Exam Format (Overview)",
    "text": "Exam Format (Overview)\n\n\nConceptual & Diagnostic\n\n{.fragment} Classical multiple choice — select the correct answer\n{.fragment} Spot the typo — identify and fix syntax or logic errors\n{.fragment} Matching questions — pair code with its description or output\n{.fragment} Debugging questions — code runs but gives unexpected results; explain why\n{.fragment} Predict the output — given a short R snippet, determine what it returns\n\n\nShort Coding Tasks\n\n{.fragment} Write code — brief applied tasks\n\n{.fragment} Using dplyr: small transformations (e.g., filter(), summarize(), group_by(), mutate()) on a provided tibble\n\n{.fragment} Using ggplot2: code to create simple graphs (see slide examples)\n\n{.fragment} Open-ended questions — brief written explanations or interpretations\n\n\n\n\n\n\n\n\nNote\n\n\nThe exam includes multiple-choice and short open-ended questions testing both concepts and hands-on R skills."
  },
  {
    "objectID": "lectures/08-slides.html#scope-policies",
    "href": "lectures/08-slides.html#scope-policies",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Scope & Policies",
    "text": "Scope & Policies\nTopics covered: Lectures 1–8 (inclusive)\n\n\n\n\n\n\nImportant\n\n\nMake-up and Absence Policy: See Syllabus."
  },
  {
    "objectID": "lectures/08-slides.html#tidying-untidy-data-3",
    "href": "lectures/08-slides.html#tidying-untidy-data-3",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Tidying untidy data",
    "text": "Tidying untidy data\nThings you can do with the tidyr package (documentation here)[https://tidyr.tidyverse.org/]:\n\nPivoting\n\nLonger: pivot_longer() makes the dataset “longer” by increasing rows\nWider: pivot_wider() makes the dataset “wider” by increasing columns\n\nSeparating: separate() splits one columns into multiple columns\nUniting: unite() combines multiple columns into one\n\nNote: there are more functions available in the tidyr packages, which you might need in the furture! For now we focus on those.\nNB: every function in this package behaves differently (e.g., functions do not have the same arguments!)"
  },
  {
    "objectID": "lectures/08-slides.html#exam-format-1",
    "href": "lectures/08-slides.html#exam-format-1",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Exam Format",
    "text": "Exam Format\nThe exam will consist of multiple-choice questions and short open-ended questions, such as:\n\nClassical multiple choice — select the correct answer from several options\n\nSpot the typo — identify and fix syntax or logic errors\n\nMatching questions — pair code snippets with their descriptions or outputs\n\nDebugging questions — code runs but gives unexpected results; explain why\n\nPredict the output — given a short R snippet determine what the code will return\nWrite code — short applied tasks\n\nusing dplyr: write small transformations (e.g., filter, summarize, group_by, mutate, etc.) on a provided tibble\n\nusing ggplot2: write code to create simple graphs (see slides examples)\n\nOpen-ended questions — brief written explanations or interpretations of results\n\nTopics covered: Lectures 1-8 (inclusive)\nMake-up and Absence Policy: See Syllabus"
  },
  {
    "objectID": "lectures/08-slides.html#unite-separate",
    "href": "lectures/08-slides.html#unite-separate",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Unite & Separate",
    "text": "Unite & Separate\n\n\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\n\ntable5_tidy &lt;- unite(\n  data = table5,\n  col = \"year\", century, year,\n  sep = \"\") |&gt;\n  mutate(year = as.integer(year)) |&gt;\nseparate(\n  col = rate,\n  into = c(\n    \"cases\",\n    \"population\"),\n  convert = TRUE)"
  },
  {
    "objectID": "lectures/08-slides.html#example",
    "href": "lectures/08-slides.html#example",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Example",
    "text": "Example\nWe’ll illustrate these tidying tasks using one of the datasets from the readings (Chapter 5). We are going to see different (untidy) ways to organize this dataset, and how to use tidyr to organize each of htem\nThe dataset is longitudinal, with four variables:\n\ncountry\n\nyear\n\ncases (number of tuberculosis cases)\npopulation"
  },
  {
    "objectID": "lectures/08-slides.html#chain-tidyr-functions",
    "href": "lectures/08-slides.html#chain-tidyr-functions",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Chain tidyr functions!",
    "text": "Chain tidyr functions!\n\n\n\ntable5\n\n# A tibble: 6 × 4\n  country     century year  rate             \n  &lt;chr&gt;       &lt;chr&gt;   &lt;chr&gt; &lt;chr&gt;            \n1 Afghanistan 19      99    745/19987071     \n2 Afghanistan 20      00    2666/20595360    \n3 Brazil      19      99    37737/172006362  \n4 Brazil      20      00    80488/174504898  \n5 China       19      99    212258/1272915272\n6 China       20      00    213766/1280428583\n\n\n\n\nunite(data = table5,\n      col = \"year\", century, year,\n      sep = \"\") |&gt;\n  mutate(year = as.integer(year)) |&gt;\n  separate(col = rate,\n           into = c(\"cases\", \"population\"),\n           convert = TRUE)\n\n# A tibble: 6 × 4\n  country      year  cases population\n  &lt;chr&gt;       &lt;int&gt;  &lt;int&gt;      &lt;int&gt;\n1 Afghanistan  1999    745   19987071\n2 Afghanistan  2000   2666   20595360\n3 Brazil       1999  37737  172006362\n4 Brazil       2000  80488  174504898\n5 China        1999 212258 1272915272\n6 China        2000 213766 1280428583"
  },
  {
    "objectID": "lectures/08-slides.html#date-and-times-with-lubridate",
    "href": "lectures/08-slides.html#date-and-times-with-lubridate",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Date and Times with Lubridate",
    "text": "Date and Times with Lubridate\nLubridate (also part of the tidyverse) is a handy package that makes it easier work with dates & times https://r4ds.hadley.nz/datetimes.html\n\nCommon Lubridate functions:\n\nTurn strings into dates or date-times with ymd(), mdy(), dmy(), ymd_hms()\n\nTurn variables into dates or date-times with make_datetime()\n\nExtract individual date components with year(), month(), day(), wday()\n\nRound the date to a nearby unit of time + days(1), floor_date(), round_date*()\n\nHandle time spans (multiple options, see Ch. 17)\nHandle time zones with_tz(), force_tz()"
  },
  {
    "objectID": "lectures/08-slides.html#turn-strings-into-dates-or-date-times",
    "href": "lectures/08-slides.html#turn-strings-into-dates-or-date-times",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Turn strings into dates or date-times",
    "text": "Turn strings into dates or date-times\n\nymd(\"2017-01-31\")\n\n[1] \"2017-01-31\"\n\nmdy(\"January 31st, 2017\")\n\n[1] \"2017-01-31\"\n\ndmy(\"31-Jan-2017\")\n\n[1] \"2017-01-31\"\n\nymd_hms(\"2017-01-31 20:11:59\")\n\n[1] \"2017-01-31 20:11:59 UTC\""
  },
  {
    "objectID": "lectures/08-slides.html#turn-variables-into-dates-or-date-times",
    "href": "lectures/08-slides.html#turn-variables-into-dates-or-date-times",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Turn variables into dates or date-times",
    "text": "Turn variables into dates or date-times\n\n\n\nlibrary(tidyverse)\nlibrary(nycflights13)\nflights |&gt; \n  select(year, month, day, hour, minute)\n\n# A tibble: 336,776 × 5\n    year month   day  hour minute\n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt;\n 1  2013     1     1     5     15\n 2  2013     1     1     5     29\n 3  2013     1     1     5     40\n 4  2013     1     1     5     45\n 5  2013     1     1     6      0\n 6  2013     1     1     5     58\n 7  2013     1     1     6      0\n 8  2013     1     1     6      0\n 9  2013     1     1     6      0\n10  2013     1     1     6      0\n# ℹ 336,766 more rows\n\n\n\n\n# create a date/time from this data with make_datetime()\nflights |&gt; \n  select(year, month, day, hour, minute) |&gt; \n  mutate(departure = make_datetime(year, month, day, hour, minute))\n\n# A tibble: 336,776 × 6\n    year month   day  hour minute departure          \n   &lt;int&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt;  &lt;dbl&gt; &lt;dttm&gt;             \n 1  2013     1     1     5     15 2013-01-01 05:15:00\n 2  2013     1     1     5     29 2013-01-01 05:29:00\n 3  2013     1     1     5     40 2013-01-01 05:40:00\n 4  2013     1     1     5     45 2013-01-01 05:45:00\n 5  2013     1     1     6      0 2013-01-01 06:00:00\n 6  2013     1     1     5     58 2013-01-01 05:58:00\n 7  2013     1     1     6      0 2013-01-01 06:00:00\n 8  2013     1     1     6      0 2013-01-01 06:00:00\n 9  2013     1     1     6      0 2013-01-01 06:00:00\n10  2013     1     1     6      0 2013-01-01 06:00:00\n# ℹ 336,766 more rows\n\n\n\n\nMore examples: https://r4ds.hadley.nz/datetimes.html#from-individual-components"
  },
  {
    "objectID": "lectures/08-slides.html#extract-individual-date-components",
    "href": "lectures/08-slides.html#extract-individual-date-components",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Extract individual date components",
    "text": "Extract individual date components\n\ndatetime &lt;- ymd_hms(\"2025-10-22 12:30:33\")\n\nyear(datetime)\n\n[1] 2025\n\nmonth(datetime)\n\n[1] 10\n\nmday(datetime)\n\n[1] 22\n\nyday(datetime)\n\n[1] 295\n\nwday(datetime)\n\n[1] 4\n\n\nMore examples: https://r4ds.hadley.nz/datetimes.html#getting-components"
  },
  {
    "objectID": "lectures/08-slides.html#round-the-date-to-a-nearby-unit-of-time",
    "href": "lectures/08-slides.html#round-the-date-to-a-nearby-unit-of-time",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Round the date to a nearby unit of time",
    "text": "Round the date to a nearby unit of time\n\n# create date object from string\ndt &lt;- ymd_hms(\"2025-10-22 12:45:00\")\ndt\n\n[1] \"2025-10-22 12:45:00 UTC\"\n\n# round down with floor_date() \nfloor_date(dt, \"day\")\n\n[1] \"2025-10-22 UTC\"\n\nfloor_date(dt, \"month\")\n\n[1] \"2025-10-01 UTC\"\n\n# round up with ceiling_date()\nceiling_date(dt, \"day\")\n\n[1] \"2025-10-23 UTC\"\n\nceiling_date(dt, \"month\")\n\n[1] \"2025-11-01 UTC\"\n\n\nMore examples: https://r4ds.hadley.nz/datetimes.html#rounding"
  },
  {
    "objectID": "lectures/08-slides.html#handle-time-spans",
    "href": "lectures/08-slides.html#handle-time-spans",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Handle Time Spans",
    "text": "Handle Time Spans\n\n# How old are you?\nage &lt;- today() - ymd(\"2001-10-22\")\nage\n\nTime difference of 8766 days\n\nas.duration(age)\n\n[1] \"757382400s (~24 years)\"\n\n\nMore examples: https://r4ds.hadley.nz/datetimes.html#time-spans"
  },
  {
    "objectID": "lectures/08-slides.html#handle-time-zones",
    "href": "lectures/08-slides.html#handle-time-zones",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "Handle Time Zones",
    "text": "Handle Time Zones\n\ngreenwitch &lt;- ymd_hms(\"2025-10-22 6:45:00\")\n\n# display same instant in another time zone\n# shows local Central Time equivalent\nwith_tz(greenwitch, tzone = \"America/Chicago\")\n\n[1] \"2025-10-22 01:45:00 CDT\"\n\n# assign a time zone (without shifting actual clock time)\n# interprets existing time as if it were recorded in Chicago\nforce_tz(greenwitch, \"America/Chicago\")\n\n[1] \"2025-10-22 06:45:00 CDT\"\n\n\nMore examples: https://r4ds.hadley.nz/datetimes.html#time-zones"
  },
  {
    "objectID": "lectures/08-slides.html#practice-tidying-data",
    "href": "lectures/08-slides.html#practice-tidying-data",
    "title": "Computing for the Social Sciences: Lecture 8",
    "section": "💻 Practice Tidying Data",
    "text": "💻 Practice Tidying Data\nDownload today’s in-class exercises from the website."
  },
  {
    "objectID": "lectures/09-slides.html#exam-format",
    "href": "lectures/09-slides.html#exam-format",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Exam Format",
    "text": "Exam Format\n\nTotal 27 questions (15 points):\n\n23 multiple choice or matching questions: 0.5 points each\n2 write short code questions: 0.75 points each\n2 open questions (write code or pseudocode + explain): 1 point each\n\nTime: 60 minutes\n\nOnce you submit, you may not reopen the quiz or view questions\nIf you finish early, please stay quiet or leave the room. Do not open R, notes, or class materials while others are still working\nDuring the exam, you may use pen and paper to make notes or plan your answers.\nAfter everyone completed the exam, we start today’s lecture (~2:30 pm)\nRemember to sign the attendance sheet"
  },
  {
    "objectID": "lectures/09-slides.html#exam-grades",
    "href": "lectures/09-slides.html#exam-grades",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Exam Grades",
    "text": "Exam Grades\n\nGrades will be posted within one week\nDo not discuss exam questions with others until grades are posted\nYou won’t see feedback or correct answers after submitting, but we are welcome, and encouraged, to ask for feedback during office hours or by appointment"
  },
  {
    "objectID": "lectures/09-slides.html#introduction",
    "href": "lectures/09-slides.html#introduction",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Introduction",
    "text": "Introduction\nThese are strings:\nstring1 &lt;- \"This is a string\"\n\nstring2 &lt;- 'If I want to include a \"quote\" inside a string, I use single quotes'\nToday we focus on methods for manipulating strings: regular expressions!"
  },
  {
    "objectID": "lectures/09-slides.html#string-and-character-vector",
    "href": "lectures/09-slides.html#string-and-character-vector",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "String and Character Vector",
    "text": "String and Character Vector\nA string is a sequence of characters (a piece of text) enclosed in either double \" or single quotes '. Strings can include letters, numbers, symbols, and whitespace characters.\nstring &lt;- \"Ciao, my name is Sabrina and I am 99 years old!!\"\nclass(string)\nlength(string)"
  },
  {
    "objectID": "lectures/09-slides.html#string-and-character-vector-1",
    "href": "lectures/09-slides.html#string-and-character-vector-1",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "String and Character Vector",
    "text": "String and Character Vector\nA character vector is a collection of strings: each element of the vector is a string!\nchar_vect &lt;- c(\"Ciao come stai?\", \"Ciao\", \"Hello\", \"etc.\") \nclass(char_vect)\nlength(char_vect)\nThus single string, like in the previous examples, is also a character vector of length one.\nWe use character vectors when we need to handle multiple pieces of text together (e.g., when we handle multiple strings vs. only one)."
  },
  {
    "objectID": "lectures/09-slides.html#regular-expressions-definitions-and-uses",
    "href": "lectures/09-slides.html#regular-expressions-definitions-and-uses",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Regular Expressions: definitions and uses",
    "text": "Regular Expressions: definitions and uses\nRegular expressions (“regex” or “regexes”) are strings containing normal characters and/or special meta-characters. They describe a specific pattern to match in a given text.\nMore formally, regex: * is a language on its own right * used for pattern matching * adopted by many programming languages, such as R, Python, and others!\nExample:\nemail_pattern &lt;- \"[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\\\.[a-zA-Z]{2,}\""
  },
  {
    "objectID": "lectures/09-slides.html#regular-expressions-definitions-and-uses-1",
    "href": "lectures/09-slides.html#regular-expressions-definitions-and-uses-1",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Regular Expressions: definitions and uses",
    "text": "Regular Expressions: definitions and uses\nRegular expressions are powerful! They allow us to find patterns in any task that deals with text, such as NLP (Natural Language Processing) or data-cleaning tasks that involve text.\nFor example, you can use regular expressions to:\n\nExtract specific elements from texts (e.g., find words that include a given set of letters, find all past tenses in a text, etc.)\nPerform textual substitutions (e.g. find and replace HTML tags after you scraped a page)\nVerify text format (e.g. “Is this email/phone-number/address valid?”)"
  },
  {
    "objectID": "lectures/09-slides.html#today-we-learn-about-the-package-stringr-and-regular-expressions-particularly-useful-for-those-of-you-who-plan-to-work-with-textual-data-in-this-course-and-beyond.",
    "href": "lectures/09-slides.html#today-we-learn-about-the-package-stringr-and-regular-expressions-particularly-useful-for-those-of-you-who-plan-to-work-with-textual-data-in-this-course-and-beyond.",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Today we learn about the package stringr and regular expressions: particularly useful for those of you who plan to work with textual data in this course and beyond.",
    "text": "Today we learn about the package stringr and regular expressions: particularly useful for those of you who plan to work with textual data in this course and beyond."
  },
  {
    "objectID": "lectures/09-slides.html#regular-expression-with-stringr",
    "href": "lectures/09-slides.html#regular-expression-with-stringr",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Regular Expression with stringr()",
    "text": "Regular Expression with stringr()\nWhen you use regular expressions, most likely you will need to use your them together with one of the functions from the stringr() package.\nThis package includes several functions that let you: detect matches in a string, count the number of matches, extract them, replace them with other values, split a string based on a match, etc."
  },
  {
    "objectID": "lectures/09-slides.html#the-stringr-package-in-r",
    "href": "lectures/09-slides.html#the-stringr-package-in-r",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "The stringr() package in R",
    "text": "The stringr() package in R\nToday we learn about the package stringr and regular expressions!\nWhen you use regular expressions, most likely you will need to use your them together with one of the functions from the stringr() package.\nThis package includes several functions that let you: detect matches in a string, count the number of matches, extract them, replace them with other values, split a string based on a match, etc."
  },
  {
    "objectID": "lectures/09-slides.html#resources",
    "href": "lectures/09-slides.html#resources",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "Resources",
    "text": "Resources\n\nstringr() documentation and cheatsheet\nChapter 15 by Rochelle Terman, explains stringr() (using the R for Data Science textbook)\nRead Chapter 14 “Strings” in “R for Data Science” 2nd Edition (read it all, but especially 14.4 “Extracting data from strings”).\nRead Chapter 17 from R Programming for Data Science. This book covers the entire range of regular expressions packages and functions: you do not need to understand everything, focus on the big picture. In-class we talk about stringr()\nFor more in-depth info on regular expressions check this excellent tutorial"
  },
  {
    "objectID": "lectures/09-slides.html#practice",
    "href": "lectures/09-slides.html#practice",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "💻 Practice",
    "text": "💻 Practice\nDownload today’s class material from the website to learn more about regular expression and stringr()"
  },
  {
    "objectID": "lectures/09-slides.html#the-stringr-package-in-r-1",
    "href": "lectures/09-slides.html#the-stringr-package-in-r-1",
    "title": "Computing for the Social Sciences: Lecture 9",
    "section": "The stringr() package in R",
    "text": "The stringr() package in R\nFundamental stringr() functions and their use:\n\nstr_view() return the first regex match\nstr_view_all() return all regex matches (deprecated in the last version of stringr)\nstr_detect(): detect matches in a string\nstr_count(): count the number of matches\nstr_extract() and str_extract_all(): extract matches\nstr_replace() and str_replace_all(): replace matches\nstr_split(): split a string based on a match"
  },
  {
    "objectID": "lectures/10-slides.html#what-is-base-r",
    "href": "lectures/10-slides.html#what-is-base-r",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "What is Base R?",
    "text": "What is Base R?\nWhen people say Base R, they are referring to the core or basic features of the R language (hence the name), developed before the tidyverse.\nThese include:\n\nData Types: numeric, integer, character, logical, factor\n\nData Structures: vectors, matrices, lists, data frames\n\nBasic Operations: indexing/subsetting, arithmetic/logical comparisons\nProgramming Tools: if-else statements, loops, functions"
  },
  {
    "objectID": "lectures/10-slides.html#base-r-vs.-the-tidyverse",
    "href": "lectures/10-slides.html#base-r-vs.-the-tidyverse",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Base R vs. the Tidyverse",
    "text": "Base R vs. the Tidyverse\n\n\nBase R\n\nDeveloped in the early 1990s as part of R’s core language\n\nIncludes built-in functions like mean(), length(), etc. and key programming tools like loops, etc.\nOffers more direct control, but code can be longer or harder to read\n\n\n\n  \n\nTidyverse\n\nFormally introduced after 2016 as a set of user-friendly packages\nIncludes packages like ggplot2, dplyr, forcats, tidyr, stringr, readr, lubridate etc.\nPrioritizes readability and consistency, making code cleaner and easier to read"
  },
  {
    "objectID": "lectures/10-slides.html#how-base-r-and-the-tidyverse-work-together",
    "href": "lectures/10-slides.html#how-base-r-and-the-tidyverse-work-together",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "How Base R and the Tidyverse Work Together",
    "text": "How Base R and the Tidyverse Work Together\n\nThe tidyverse is built on base R — it doesn’t replace it\n\nYou can combine base R and tidyverse functions in your code\n\nWhy we learn both? You’ll often see both styles in real-world scripts and examples\n\n\n\n\n\n\n\n\nTip\n\n\nGoal: use the tidyverse (with some Base R) for most of your daily work, but understand enough Base R to follow and troubleshoot R code!"
  },
  {
    "objectID": "lectures/10-slides.html#r-data-types-and-data-structures-1",
    "href": "lectures/10-slides.html#r-data-types-and-data-structures-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "R Data Types and Data Structures",
    "text": "R Data Types and Data Structures\nData Types and Data Structures are the fundamentals of R: the “ABC” of how R stores and organizes data. They are part of Base R syntax.\n\nData Type — what kind of value it is\n\nData Structure — how values are stored and organized\n\nNow we look at each and at how they relate."
  },
  {
    "objectID": "lectures/10-slides.html#r-data-types",
    "href": "lectures/10-slides.html#r-data-types",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "R Data Types",
    "text": "R Data Types\nData Type: describes the kind of value you’re working with.\n\n\nR has the following main data types (for more see here):\n\nNumeric – numbers, either with or without decimals\n\nDouble with decimals (default): 3.14, 2.0\n\nInteger whole numbers: 2L, 100L\n\nCharacter – text or strings (always in quotes): \"hello\"\nLogical – TRUE or FALSE values: TRUE, FALSE\nFactor – categorical values with levels: \"low\", \"medium\""
  },
  {
    "objectID": "lectures/10-slides.html#r-data-structures",
    "href": "lectures/10-slides.html#r-data-structures",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "R Data Structures",
    "text": "R Data Structures\nData Structure: like a container that holds one or more values.\n\n\nR has the following main data structures (for more see here):\n\nVector – one-dimensional, all elements same type\nv &lt;- c(1, 2, 3)\nMatrix – two-dimensional, all elements same type\nm &lt;- matrix(1:6, nrow = 2)\nDataframe – two-dimensional, columns can have different types\ndf &lt;- data.frame(name = c(\"A\", \"B\"), age = c(25, 30))\nList – multi-dimensional, holds elements of any type, even mixed\nl &lt;- list(num = 1:3, name = c(\"Sabrina\", \"Laura\"))"
  },
  {
    "objectID": "lectures/10-slides.html#how-data-types-and-data-structures-relate",
    "href": "lectures/10-slides.html#how-data-types-and-data-structures-relate",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "How Data Types and Data Structures Relate",
    "text": "How Data Types and Data Structures Relate\nEvery single element in R has a data type. That element is stored inside a larger data structure.\nExamples:\nx &lt;- c(1, 2, 3)      # a vector (structure) of three elements, all numeric values (type) \ny &lt;- list(\"a\", 5)    # a list (structure) of two elements, one character value and one numeric value (type)\n\n \n\n\n\n\n\n\n\nThe data structure you use affects what data types you can store:\n\n\nNot all data structures support every combination of data types. Some allow only one type, while others can store many types together."
  },
  {
    "objectID": "lectures/10-slides.html#how-data-types-and-data-structures-relate-1",
    "href": "lectures/10-slides.html#how-data-types-and-data-structures-relate-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "How Data Types and Data Structures Relate",
    "text": "How Data Types and Data Structures Relate\n\n\n\n\n\n\n\n\n\nStructure\nDimensions\nAllow Mixed Types?\nNotes\n\n\n\n\nVector\n1D\nNo\nAll elements must be the same data type\n\n\nMatrix\n2D\nNo\nAll elements must be the same data type\n\n\nDataframe\n2D\nYes (by column)\nEach column is a vector; data types can vary by column\n\n\nList\nFlexible\nYes\nEach element can be anything: numbers, text, vectors, even data frames"
  },
  {
    "objectID": "lectures/10-slides.html#practice",
    "href": "lectures/10-slides.html#practice",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "💻 Practice",
    "text": "💻 Practice\nRun the code below to create different R objects. Then check their structure using class() and str() on each object.\n# create multiple vectors\nnum_v &lt;- c(1:9)\nchar_v &lt;- c(\"hello\", \"ciao\", \"hey\")\nf_v &lt;- factor(c(\"low\", \"medium\", \"high\"))\ntest &lt;- c(\"hello\", 1, 2)\n\n# create two matrices\nnum_m &lt;- matrix(1:15, nrow = 3, ncol = 5, byrow = TRUE)\nchar_m &lt;- matrix(c(\"a\", \"b\", \"c\", \"d\"), nrow = 2, byrow = TRUE)\n\n# create one dataframe\ndf &lt;- data.frame(\n  id = 1:3,\n  name = c(\"Dave\", \"Ashley\", \"Rik\"),\n  age = c(15, 17, 20)) \n\n# create one list\nl &lt;- list(\n  num_v = c(1:3),\n  m = matrix(1:9, nrow = 3, ncol = 3, byrow = TRUE),\n  another_num_v = c(1,2,4),\n  char_v = c(\"Sabrina\", \"Zach\"),\n  d = tibble(var_1 = c(1:4),\n              var_2 = c(2:5)))"
  },
  {
    "objectID": "lectures/10-slides.html#why-this-matters-understanding-when-to-use-each-data-structure",
    "href": "lectures/10-slides.html#why-this-matters-understanding-when-to-use-each-data-structure",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Why This Matters: Understanding When to Use Each Data Structure",
    "text": "Why This Matters: Understanding When to Use Each Data Structure\nData Frames first!\nSo far, we’ve been working mostly with data frames — technically with tibbles, the tidyverse version of them.\nData frames are the best structure for working with real-world tabular data in R, and you’ll keep using them throughout the course and beyond.\nStrengths of data frames:\n\nCan store columns of different data types (e.g., character, numeric, logical)\nWork easily with dplyr, ggplot2, and other tidyverse packages\nMake your data easier to manipulate, filter, summarize, and visualize"
  },
  {
    "objectID": "lectures/10-slides.html#why-this-matters-understanding-when-to-use-each-data-structure-1",
    "href": "lectures/10-slides.html#why-this-matters-understanding-when-to-use-each-data-structure-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Why This Matters: Understanding When to Use Each Data Structure",
    "text": "Why This Matters: Understanding When to Use Each Data Structure\nBeyond Data Frames…\nBut it’s helpful to understand the full set of R data structures, because each has its own strengths:\n\nVectors: The most basic structure in R; all elements must be the same type.\nYou are analyzing survey responses and want to store all participants’ ages in a separate vector for further manipulation.\nMatrices: Two-dimensional, all elements must be the same type.\nYou have numeric data that you want to analyze using matrix algebra or linear models.\nLists: Flexible containers that can hold anything — even other lists.\nYou are analyzing data and want to save multiple outputs (model results, plot, etc.) all in the same data structure.\nData Frames: Two-dimensional, columns can have different types.\nYou are analyzing survey responses with dplyr, ggplot, or other tidyverse packages."
  },
  {
    "objectID": "lectures/10-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors",
    "href": "lectures/10-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Example of filtering rows in a dataframe using logical vectors",
    "text": "Example of filtering rows in a dataframe using logical vectors\n# load libraries and data\nlibrary(tidyverse)\nlibrary(palmerpenguins)\ndata(penguins)\n\n# use dplyr filter() to get penguins where body mass is greater than 4000 grams\nfiltered_penguins &lt;- penguins |&gt; filter(body_mass_g &gt; 4000)\nhead(filtered_penguins)"
  },
  {
    "objectID": "lectures/10-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors-1",
    "href": "lectures/10-slides.html#example-of-filtering-rows-in-a-dataframe-using-logical-vectors-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Example of filtering rows in a dataframe using logical vectors",
    "text": "Example of filtering rows in a dataframe using logical vectors\nLet’s analyze the previous code to see what’s happening under the hood: R defines a logical vector and applies it to the penguins dataframe:\n# use base R to get the column we need: gives a logical vector\nfilter_vector &lt;- penguins$body_mass_g &gt; 4000\n\n# check its structure\nis.vector(filter_vector)\nclass(filter_vector) \n\n# use this vector to manually filter the dataframe using base R\n# df[rows, columns]: code below says [rows to keep, all columns]\nfiltered_p &lt;- penguins[filter_vector, ]"
  },
  {
    "objectID": "lectures/10-slides.html#a-particular-vector-scalar",
    "href": "lectures/10-slides.html#a-particular-vector-scalar",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "A particular vector: Scalar",
    "text": "A particular vector: Scalar\nIn math a scalar is defined as a single real number but in R, a scalar is simply a vector of length one\nLet’s try this code:\n# set up a vector x of length 10\nx &lt;- sample(10)\nx\n\n# add 100 to x using the long way\nx + c(100, 100, 100, 100, 100, 100, 100, 100, 100, 100)\n\n# add 100 to x using the \"R\" way: vector recycling!\nx + 100"
  },
  {
    "objectID": "lectures/10-slides.html#vector-recycling-in-r",
    "href": "lectures/10-slides.html#vector-recycling-in-r",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Vector Recycling in R",
    "text": "Vector Recycling in R\nLet’s see another example. We define two numeric vectors x1 and x2:\n# x1 is sequence of numbers from 1 to 2\nx1 &lt;- seq(from = 1, to = 2)\n\n# x2 is a sequence of numbers from 1 to 10\nx2 &lt;- seq(from = 1, to = 10)\n\n# what happens if we add them?\nx1 + x2\nWhat happens? The shorter vector x1 is duplicated five times in order to match the length of the longer vector x2. The same behavior happens for other operations like subtraction, multiplication, logical comparison, etc.\n\n\n\n\n\n\nWarning\n\n\nIf the shorter vector is not a multiple of the longer one, R will print a warning message!"
  },
  {
    "objectID": "lectures/10-slides.html#vector-recycling-in-r-1",
    "href": "lectures/10-slides.html#vector-recycling-in-r-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Vector Recycling in R",
    "text": "Vector Recycling in R\n\n\n\n\n\n\nNote\n\n\nThis behavior is called Vector Recycling and happens automatically in R: When two vectors of different lengths are used in an operation, R repeats (recycles) the elements of the shorter vector to match the longer vector!\n\n\n\nWhy It Matters: Vector recycling can cause unexpected results. Check if recycling is what you want R to do — if not, adjust the vector lengths manually, like this:\nx1 &lt;- c(1, 2, rep(0, 7))\n\nx1 + x2"
  },
  {
    "objectID": "lectures/10-slides.html#subsetting-data-structures-in-r",
    "href": "lectures/10-slides.html#subsetting-data-structures-in-r",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Subsetting Data Structures in R",
    "text": "Subsetting Data Structures in R\nThere are different ways to access parts of data structures in R.\nWe’ll cover:\n\nVectors\nMatrices\nData Frames\nLists\n\nEach structure uses square brackets [ ], but how you use them depends on the structure."
  },
  {
    "objectID": "lectures/10-slides.html#subsetting-vectors",
    "href": "lectures/10-slides.html#subsetting-vectors",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Subsetting Vectors",
    "text": "Subsetting Vectors\nv &lt;- c(10, 20, 30, 40)\n\nv[2]         # 20 (2nd element)\nv[c(1, 3)]   # 10 and 30\nv[-1]        # all but the first\nv[v &gt; 25]    # elements greater than 25\nVectors are 1D — you just specify positions or logical tests in [ ]"
  },
  {
    "objectID": "lectures/10-slides.html#subsetting-matrices",
    "href": "lectures/10-slides.html#subsetting-matrices",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Subsetting Matrices",
    "text": "Subsetting Matrices\nm &lt;- matrix(1:9, nrow = 3, byrow = TRUE)\n\nm[1, 2]           # value at row 1, column 2\nm[ , 3]           # entire 3rd column\nm[2,  ]           # entire 2nd row\nm[1:2, 2:3]       # top-right submatrix (rows 1–2, cols 2–3)\nm[ , c(1, 3)]     # columns 1 and 3\nMatrices are 2D: use [row, column]"
  },
  {
    "objectID": "lectures/10-slides.html#subsetting-data-frames",
    "href": "lectures/10-slides.html#subsetting-data-frames",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Subsetting Data Frames",
    "text": "Subsetting Data Frames\ndf &lt;- data.frame(\n  name = c(\"Alex\", \"Betty\", \"Chad\", \"J\"),\n  age = c(20, 21, 22, 23))\n\ndf[1, ]            # first row (all columns)\ndf[ , 1]           # first column by index\ndf[ , \"name\"]      # first column by label\ndf$name            # same as above\ndf[[\"name\"]]       # same as above\n\ndf[1, 2]           # single value at row 1, column 2\ndf[2:3, \"name\"]    # values in rows 2 and 3 of column name\n\ndf[df$age &gt; 20, ]            # filter rows where age &gt; 20\ndf[df$name == \"J\", ]         # filter rows where name is \"J\"\ndf[df$age == max(df$age), ]  # filter rows with highest age\nEach column of a data frame is a vector of a specific data type (e.g., numeric, character, etc.)\nAs a whole, a data frame behaves similarly to a list: it contains multiple elements of different data types (like a list), but all elements must be the same length (unlike a list)."
  },
  {
    "objectID": "lectures/10-slides.html#subsetting-lists",
    "href": "lectures/10-slides.html#subsetting-lists",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Subsetting Lists",
    "text": "Subsetting Lists\nmy_list &lt;- list(\n  a = c(20, 30, 40),\n  b = c(\"hello\", \"ciao\"),\n  c = TRUE)\n\nmy_list[1]         # first element of my_list, by position; returns a list\nmy_list[[1]]       # content of the first element: 20, 30, 40; returns a vector\nmy_list[[1]][1]    # first value of the first element: 20\n\nmy_list[2]         # second element of my_list, by position; returns a list\nmy_list[\"b\"]       # second element of my_list, by name; returns a list\nmy_list$b          # content of the second element, only works by name not by position; returns a vector\nmy_list[[\"c\"]]     # returns content of \"c\": TRUE\nRemember: use [ ] to extract a sublist from the original list, and [[ ]] or $ to extract actual elements.\nWhat do my_list[[\"b\"]][1] and my_list[[2]][1] return? And what about my_list[[\"b\"]][3] and why?"
  },
  {
    "objectID": "lectures/10-slides.html#to-print-these-slides-as-pdf",
    "href": "lectures/10-slides.html#to-print-these-slides-as-pdf",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "To print these slides as pdf",
    "text": "To print these slides as pdf\nClick on the icon bottom-right corner &gt; Tools &gt; PDF Export Mode &gt; Print as a Pdf"
  },
  {
    "objectID": "lectures/10-slides.html#example-code-in-base-r",
    "href": "lectures/10-slides.html#example-code-in-base-r",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Example Code in Base R",
    "text": "Example Code in Base R\n# create two dataframes\n\ntwitter &lt;- data.frame(\n  user     = c(\"alice\",\"bob\",\"carlos\",\"diana\",\"emily\",\"lucia\",\"gina\", \"rick\"),\n  likes    = c(45, 80, 22, 130, 55, 60, 15, 30),\n  retweets = c(10, 25,  5,  50, 12, 20, 30, 58),\n  language = c(\"en\",\"es\",\"en\",\"en\",\"fr\",\"en\",\"en\", \"en\"),\n  state    = c(\"CA\",\"TX\",\"TX\",\"NY\",\"IL\",\"CA\",\"IL\", \"AZ\"),\n  stringsAsFactors = FALSE)\n\nstate_lookup &lt;- data.frame(\n  state  = c(\"CA\",\"TX\",\"NY\",\"IL\",\"AZ\"),\n  region = c(\"West\",\"South\",\"Northeast\",\"Midwest\",\"West\"),\n  vote = c(\"Dem\", \"Rep\", \"Dem\", \"Dem\", \"Rep\"),\n  stringsAsFactors = FALSE)"
  },
  {
    "objectID": "lectures/10-slides.html#example-code-in-base-r-1",
    "href": "lectures/10-slides.html#example-code-in-base-r-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Example Code in Base R",
    "text": "Example Code in Base R\n# create new variables in twitter df\ntwitter$tot_likes_retweets &lt;- twitter$likes + twitter$retweets\ntwitter$high_engagement    &lt;- twitter$tot_likes_retweets &gt;= 80\n\n# create a new df with only rows that match conditions\ntw &lt;- twitter[twitter$language == \"en\" & twitter$high_engagement == TRUE, ]\n\n# bring in second df\ntw_full &lt;- merge(tw, state_lookup, by = \"state\", all = FALSE)\n\n# compute sum of one variable\nsum_inter &lt;- sum(tw_full$tot_likes_retweets)\n\n# compute sum of one variable by another\nsum_inter_by_vote &lt;- tapply(tw_full$tot_likes_retweets, tw_full$vote, sum)"
  },
  {
    "objectID": "lectures/10-slides.html#same-code-rewritten-with-tidyverse-syntax",
    "href": "lectures/10-slides.html#same-code-rewritten-with-tidyverse-syntax",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Same code rewritten with Tidyverse Syntax",
    "text": "Same code rewritten with Tidyverse Syntax\n\nlibrary(tidyverse)\n\n# create two dataframes\n\ntwitter &lt;- tibble(\n  user     = c(\"alice\",\"bob\",\"carlos\",\"diana\",\"emily\",\"lucia\",\"gina\",\"rick\"),\n  likes    = c(45, 80, 22, 130, 55, 60, 15, 30),\n  retweets = c(10, 25,  5,  50, 12, 20, 30, 58),\n  language = c(\"en\",\"es\",\"en\",\"en\",\"fr\",\"en\",\"en\",\"en\"),\n  state    = c(\"CA\",\"TX\",\"TX\",\"NY\",\"IL\",\"CA\",\"IL\",\"AZ\"))\n\nstate_lookup &lt;- tibble(\n  state  = c(\"CA\",\"TX\",\"NY\",\"IL\",\"AZ\"),\n  region = c(\"West\",\"South\",\"Northeast\",\"Midwest\",\"West\"),\n  vote   = c(\"Dem\",\"Rep\",\"Dem\",\"Dem\",\"Rep\"))"
  },
  {
    "objectID": "lectures/10-slides.html#same-code-rewritten-with-tidyverse-syntax-1",
    "href": "lectures/10-slides.html#same-code-rewritten-with-tidyverse-syntax-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Same code rewritten with Tidyverse Syntax",
    "text": "Same code rewritten with Tidyverse Syntax\n\ntwitter |&gt;\n  mutate(\n    tot_likes_retweets = likes + retweets,\n    high_engagement    = tot_likes_retweets &gt;= 80\n  ) |&gt;\n  filter(language == \"en\" & high_engagement == TRUE) |&gt;\n  inner_join(state_lookup, by = \"state\") |&gt;\n  summarise(avg_total = mean(tot_likes_retweets, na.rm = TRUE))"
  },
  {
    "objectID": "lectures/10-slides.html#why-we-learn-both",
    "href": "lectures/10-slides.html#why-we-learn-both",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Why we learn both?",
    "text": "Why we learn both?\nToday we start a new module focused on “base R” of 5 lectures:\n\ndata types and data structures\ncontrol flow: conditionals (e.g., if-else structures)\ncontrol flow: loops\nfunctions"
  },
  {
    "objectID": "lectures/10-slides.html#so-far-we-learned-several-tidyverse-packages",
    "href": "lectures/10-slides.html#so-far-we-learned-several-tidyverse-packages",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "So far we learned several Tidyverse packages",
    "text": "So far we learned several Tidyverse packages\nTidyverse https://tidyverse.org/:\n\nggplot2\ndplyr\nforcats\ntidyr\nreadr\nstringr\nlubridate\n\nThe Tidyverse is often the most intuitive place to start before diving into Base R.\nYou’ll keep using the Tidyverse long after this course, but Base R gives you a deeper understanding of how R works underneath."
  },
  {
    "objectID": "lectures/10-slides.html#today-we-start-a-new-module-on-base-r",
    "href": "lectures/10-slides.html#today-we-start-a-new-module-on-base-r",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Today we start a new module on Base R",
    "text": "Today we start a new module on Base R\nToday we begin a 5-lecture module on Base R What you will learn in these lectures:\n\nDifferences and similarities between Base R and Tidyverse\nR data types and data structures\nVector recycling\nControl flow: conditionals (e.g., if-else structures)\nControl flow: loops\nFunctions"
  },
  {
    "objectID": "lectures/10-slides.html#rewriting-the-same-code-with-the-tidyverse",
    "href": "lectures/10-slides.html#rewriting-the-same-code-with-the-tidyverse",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Rewriting the Same Code with the Tidyverse",
    "text": "Rewriting the Same Code with the Tidyverse\nlibrary(tidyverse)\n\n# create two dataframes\n\ntwitter &lt;- tibble(\n  user     = c(\"alice\",\"bob\",\"carlos\",\"diana\",\"emily\",\"lucia\",\"gina\",\"rick\"),\n  likes    = c(45, 80, 22, 130, 55, 60, 15, 30),\n  retweets = c(10, 25,  5,  50, 12, 20, 30, 58),\n  language = c(\"en\",\"es\",\"en\",\"en\",\"fr\",\"en\",\"en\",\"en\"),\n  state    = c(\"CA\",\"TX\",\"TX\",\"NY\",\"IL\",\"CA\",\"IL\",\"AZ\"))\n\nstate_lookup &lt;- tibble(\n  state  = c(\"CA\",\"TX\",\"NY\",\"IL\",\"AZ\"),\n  region = c(\"West\",\"South\",\"Northeast\",\"Midwest\",\"West\"),\n  vote   = c(\"Dem\",\"Rep\",\"Dem\",\"Dem\",\"Rep\"))"
  },
  {
    "objectID": "lectures/10-slides.html#rewriting-the-same-code-with-the-tidyverse-1",
    "href": "lectures/10-slides.html#rewriting-the-same-code-with-the-tidyverse-1",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "Rewriting the Same Code with the Tidyverse",
    "text": "Rewriting the Same Code with the Tidyverse\ntw_full &lt;- twitter |&gt;\n  mutate(\n    tot_likes_retweets = likes + retweets,\n    high_engagement = tot_likes_retweets &gt;= 80) |&gt;\n  filter(language == \"en\" & high_engagement == TRUE) |&gt;\n  inner_join(state_lookup, by = \"state\")\n\nsum_inter &lt;- tw_full |&gt;\n  summarise(sum_inter = sum(tot_likes_retweets))\n\nsum_inter_by_vote &lt;- tw_full |&gt;\n  group_by(vote) |&gt;\n  summarise(sum_inter_by_vote = sum(tot_likes_retweets))"
  },
  {
    "objectID": "lectures/10-slides.html",
    "href": "lectures/10-slides.html",
    "title": "Computing for the Social Sciences: Lecture 10",
    "section": "",
    "text": "Base R & the Tidyverse\nR Data Types and Data Structures\nA Closer Look at Vectors\nSubset Data Structures with Base R\n\n\n Slides last updated on October 29, 2025. Slides authored by Sabrina Nardin. AI used to polish slides style and fix typos."
  }
]