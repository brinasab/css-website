<!--
quarto render --clean
versoin
version
vertex.attributes(bali_igr)
describe.Bali()
class(Bali)
library(statnet)
library(igraph)
library(intergraph)
getwd()
setwd("C:/Users/Sabrina Nardin/Desktop")  # replace with your path
getwd()
load("luke.datasets.RData")
describe.Bali()
class(Bali)
summary(Bali)
View(Bali)
length(Bali$mel)
length(Bali$mel)
Bali$mel[[1]]
network::list.edge.attributes(Bali)
network::list.vertex.attributes(Bali)
# all edge weights
network::list.edge.attributes(Bali)
# specific edge weights
Bali %e% "IC"
as.sociomatrix.sna(Bali, "IC")
Bali$gal
length(Bali$val)
Bali$val[[16]]
# check direction
network::is.directed(Bali)
# weights are stored as edges attributes
network::get.edge.attribute(Bali, "weight")
# add one new node
network::add.vertices(Bali, 1)
# add one edge
add.edge(Bali, 1, 18)
weight <- rnorm(64)
network::set.edge.attribute(Bali, "weight", weight)
network::get.edge.attribute(Bali, "weight")
# create vector of 64 ranom numbers
weight <- rnorm(63)
network::set.edge.attribute(Bali, "weight", weight)
network::get.edge.attribute(Bali, "weight")
# create vector of 64 ranom numbers
weight <- rnorm(60)
network::set.edge.attribute(Bali, "weight", weight)
network::get.edge.attribute(Bali, "weight")
write.csv(Bali, file = "Bali.csv")
# node attribute list
attrs <- list.vertex.attributes(Bali)
# node attribute list
list.vertex.attributes(Bali)
# node attribute list
network::list.vertex.attributes(Bali)
nodes <- data.frame(
id = 1:network::network.size(Bali),   # node IDs
attr1 = get.vertex.attribute(Bali, "attribute1"),
attr2 = get.vertex.attribute(Bali, "attribute2")
# add more as needed
)
# node attribute list
network::list.vertex.attributes(Bali)
nodes <- data.frame(
id = 1:network::network.size(Bali),   # node IDs
attr1 = network::get.vertex.attribute(Bali, "attribute1"),
attr2 = network::get.vertex.attribute(Bali, "attribute2")
# add more as needed
)
write.csv(nodes, file = "bali_node_attributes.csv")
bali_df <- data.frame(Bali)
bali_df
library(statnet)
library(igraph)
library(intergraph)
getwd()
setwd("C:/Users/Sabrina Nardin/Desktop")  # replace with your path
getwd()
load("luke.datasets.RData")
describe.Bali()
class(Bali)
# see https://cran.r-project.org/web/packages/network/vignettes/networkVignette.pdf
summary(Bali)
# check direction
network::is.directed(Bali)
# weights are stored as edges attributes
network::get.edge.attribute(Bali, "weight")
bali_df <- data.frame(Bali)
bali_df
# get them
list.vertex.attributes(Bali)
# get them
network::list.vertex.attributes(Bali)
# Get them into a table
nodes <- data.frame(
id   = 1:network.size(Bali),
name = get.vertex.attribute(Bali, "vertex.names")
)
# get them
network::list.vertex.attributes(Bali)
# Get them into a table
#nodes <- data.frame(
#  id   = 1:network.size(Bali),
#  name = get.vertex.attribute(Bali, "vertex.names")
#)
# get them
network::list.vertex.attributes(Bali)
# Get them into a table
nodes <- data.frame(
id   = 1:network.size(Bali),
name = network::get.vertex.attribute(Bali, "vertex.names")
)
# get them
network::list.vertex.attributes(Bali)
# Get them into a table
nodes <- data.frame(
id   = 1:network.size(Bali),
name = network::get.vertex.attribute(Bali, "vertex.names")
)
nodes
# get them
network::list.vertex.attributes(Bali)
# Get them into a table
nodes <- data.frame(
id   = 1:network.size(Bali),
name = network::get.vertex.attributes(Bali, "vertex.names")
)
attrs <- list.vertex.attributes(Bali)
attrs <- network::list.vertex.attributes(Bali)
for (a in attrs) {
nodes[[a]] <- get.vertex.attribute(Bali, a)
}
# create vector of 63 (to match number of edges in given networks) random numbers as network edge weights
#weight <- rnorm(63)
#network::set.edge.attribute(Bali, "weight", weight)
#network::get.edge.attribute(Bali, "weight")
# create vector of 63 (to match number of edges in given networks) random numbers as network edge weights
#weight <- rnorm(63)
#network::set.edge.attribute(Bali, "weight", weight)
#network::get.edge.attribute(Bali, "weight")
library(ggplot2)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy)) +
labs(title = "Car Fuel Efficiency on the Highway vs. Car Engine Size",
x = "Car Engine Size in Liters",
y = "Car Highway MPG (Fuel Efficiency)")
library(ggplot2)
data(mpg)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = class))
library(ggplot2)
ggplot(data = mpg) +
geom_point(aes(x = displ, y = hwy)) +
labs(title = "Car Fuel Efficiency on the Highway vs. Car Engine Size",
x = "Car Engine Size in Liters",
y = "Car Highway MPG (Fuel Efficiency)")
library(ggplot2)
data(mpg)
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, color = class))
library(ggplot2)
data(mpg)
ggplot(mpg) +
geom_point(aes(x = cty, y = hwy, color = class))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, shape = class))
ggplot(mpg) +
geom_point(aes(x = displ, y = hwy, colour = class))
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy, color = class),
stat = "identity",
position = "identity"
) +
geom_smooth(
mapping = aes(x = displ, y = hwy),
method = "lm"
)
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy, color = class),
stat = "identity",
position = "identity"
) +
geom_smooth(
method = "lm"
)
ggplot(data = mpg) +
geom_point(
mapping = aes(x = displ, y = hwy, color = class))
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(
title = "Car Fuel Efficiency on the Highway vs. Car Engine Size",
subtitle = "Colored by car type",
x = "Car Engine Size in Liters",
y = "Car Highway MPG (Fuel Efficiency)",
caption = "Data: mpg dataset (n = 234)"
) +
theme(plot.title = element_text(face = "bold", size = 14)
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(
title = "Car Fuel Efficiency on the Highway vs. Car Engine Size",
subtitle = "Colored by car type",
x = "Car Engine Size in Liters",
y = "Car Highway MPG (Fuel Efficiency)",
caption = "Data: mpg dataset (n = 234)"
) +
theme(plot.title = element_text(face = "bold", size = 14))
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(
title = "Car Fuel Efficiency on the Highway vs. Car Engine Size",
subtitle = "Colored by car type",
x = "Car Engine Size in Liters",
y = "Car Highway MPG (Fuel Efficiency)",
caption = "Data: mpg dataset (n = 234)"
)
ggplot(data = mpg, aes(x = displ, y = hwy, color = class)) +
geom_point() +
labs(
title = "Car Fuel Efficiency on the Highway vs. Car Engine Size",
subtitle = "Colored by car type",
x = "Car Engine Size in Liters",
y = "Car Highway MPG (Fuel Efficiency)",
caption = "Data: mpg dataset (n = 234)"
) +
theme(plot.title = element_text(face = "bold", size = 18))
